{"version":3,"sources":["RTCHAT/myMessage.js","components/textMessage.js","RTCHAT/RTC/message.js","RTCHAT/callStatus.js","RTCHAT/RTC/PeerConnectionManager.js","RTCHAT/RTC/messageTypes.js","RTCHAT/CALL_SIGNALING/callStatus.js","RTCHAT/CALL_SIGNALING/callPacket.js","RTCHAT/CALL_SIGNALING/CallSignalingManager.js","components/businessLogic/myUser.js","RTCHAT/mySingleUserChat.js","RTCHAT/myGroupChat.js","store/reducers/chatReducer/index.js","RTCHAT/types.js","store/reducers/authReducer/index.js","RTCHAT/PushesManager/myPush.js","store/reducers/pushesReducers/index.js","store/reducers/index.js","store/index.js","proxy.js","RTCHAT/DataRouters/dataRouter.js","RTCHAT/PushesManager/pushesManager.js","RTCHAT/communicator.js","RTCHAT/index.js","store/actions/authActions.js","components/singleChat.js","components/singleUserChat.js","components/videoChatScreen.js","App.js","serviceWorker.js","index.js"],"names":["MyMessage","this","_id","Math","random","localId","from","to","body","chatId","status","SENDING","sentTimeDate","Date","now","seenTimeDate","messageType","TEXT","chatType","seenAckCount","recievedAckCount","setAttributes","setValue","message","type","setAsGroupMessage","VIDEO","IMAGE","SENT","RECIEVED","SEEN","TextMessage","state","props","isMe","cid","backColor","foreColor","alignment","style","width","float","height","src","display","minWidth","maxWidth","backgroundColor","padding","marginTop","color","toLocaleTimeString","Component","payload","CallStatus","CALLING","RUNNING","ACCEPTED","CONNECTING","CONNECTED","ON_ANOTHER_CALL","DECLINED","PeerConnectionManager","communicatorContext","socketConnection","setChannelEnabled","kind","value","index","localStream","getTracks","findIndex","t","enabled","handleCommunication","socket","on","res","peerConnection","query","console","log","setRemoteDescription","RTCSessionDescription","then","recieveCall","catch","err","addIceCandidate","RTCIceCandidate","createConnection","myId","peerId","config","configuration","RTCPeerConnection","onicecandidate","event","candidate","callerId","sendMessage","onaddstream","stream","context","handelOnAddRemoteStream","peerStream","oniceconnectionstatechange","e","info","target","iceConnectionState","destroyConnection","forEach","track","stop","close","startCall","isFront","navigator","mediaDevices","enumerateDevices","sourceInfos","length","sourceInfo","facing","deviceId","getUserMedia","audio","echoCancellation","video","handelOnAddLocalStream","addStream","createOffer","offerToReceiveAudio","offerToReceiveVideo","offer","setLocalDescription","alert","createAnswer","answer","emit","getStream","iceServers","url","urls","username","credential","RINGING_REQUEST","RINGING","REJECTED","USEROFFLINE","USERONLINE","ON_OHTER_CALL","CallPacket","CallSignalingManager","communicatorSocket","handelSingnaling","packet","isBusy","handelOnAddCallStatus","createRTCConnection","startRTCCall","destroyRTCConnection","connetingPeer","ack","initializeSingnaling","Promise","resolve","reject","socketConnected","acceptSignaling","endCallSingnal","MyUser","phoneNumber","user","MySingleUserChat","title","messages","selected","unseenCount","lastMessage","chatStatus","CHAT_NOT_FOUND","compose","sc1","sc2","chat","singleChat","setChat","setUser","USER_NOT_FOUND","USER_CHAT_FOUND","MyGroupChat","gcid","users","setTimeout","AddGroupChatListner","Chat","ChatReducer","mState","action","localStorage","setItem","JSON","stringify","clone","ucId","ucIndex","uc","push","sort","a","b","gmessage","gucId","ucgIndex","gmsg","gstatus","gackIndex","c","ackmIndex","isNewId","m","friend","icbIndex","messageSent","ucsIndex","hindex","filter","msg","ackIndex","msgs","statuss","ccid","acksIndex","markCounter","msgsIndex","element","seenmIndex","msgseen","removeItem","data","getItem","parse","obj","AuthReducer","MyPush","pushType","ACTION_STATUS_NEW","TEXT_MESSAGE","IMAGE_MESSAGE","VIDEO_MESSAGE","CALL","ACTION_STATUS_MARKED","ACTION_STATUS_SUSPENDED","SETVER_ACTION_REMOVE_PUSHES","SETVER_ACTION_REMOVE_PUSH","USER_NEW_PUSH_ACTION","MESSAGE","ACK_MESSAGE","GROUP_MESSAGE","ACK_GROUP_MESSAGE","incPushActions","outPushActions","PushesReducer","pActions","pushActions","singlePAction","i","puIndex","sp","removed","pushAction","o","u_id","ulocalId","ouIndex","RootReducer","combineReducers","middleWare","thunk","initialState","store","window","__REDUX_DEVTOOLS_EXTENSION__","createStore","applyMiddleware","BASEURL","dataRouter","dispatch","PushManager","ackRemotePush","sendPushAction","sendPushGroupAction","loadPushes","getAllPushes","newIncActions","getState","p","singlePushAction","markPushAction","markedIncActions","pushAckAndRemove","axios","post","userId","dispatchIncPushAction","mAction","pushRemote","ackPayload","pushAck","markedPushes","pushLocalAction","pushLocally","onNetworkConnected","oAction","dispatchOutAction","send","removeOutPushAction","emitPush","emitGroupPush","actionSuspended","actionNew","Communicator","dataHandler","ackEmitter","ackEmitters","onConnectEmitter","onDisconnectEmitter","rtcConfig","callSignalingManager","videoChatContext","rtcConnectionManager","pushActionsManager","connect","_dataHandler","_ackEmitter","_ackEmitters","_onConnect","_onDisconnect","io","RTCPeerConnectionManager","PushesManager","sendGroupMessage","markSeen","recieverCid","markSeenGroupMessage","ackRouter","error","timeout","reason","attemptNumber","initializeSignaling","acceptCall","setChatContext","endCallSignal","recieverId","isVideo","setRTCChannelEnabled","remoteStream","setState","callStatus","MyCommunicator","MyCommunicatorObj","MyGroupChatCommunicators","loadAllChats","success","chatData","myChat","prepareChat","incomingChat","userChat","newChat","iIndex","ic","icfound","mIndex","mc","mmIndex","mmc","mmcfound","iiIndex","iic","sentDataHandler","handleOnConnection","handleOnDisconnect","connectChat","SingleChat","messageBody","file","handleSendMesage","usersIds","u","handleSendImage","reader","FileReader","readAsDataURL","onload","result","onerror","onClick","friendId","fontSize","marginLeft","overflowY","map","key","onFocus","cIndex","cusers","onChange","borderRadius","placeholder","border","files","React","SingleUserChat","cursor","borderBottom","align","zIndex","textAlign","textOverflow","VideoCallingScreen","connectUser","isConnected","handleInitiateCall","endCall","answerCall","setSelected","id","configs","getSelected","callRunning","isMute","connectionState","iceTransports","peerConnectionA","myStream","srcObject","volume","muted","friendStream","innerHeight","alignSelf","ref","backfaceVisibility","autoPlay","position","bottom","right","left","innerWidth","className","Fragment","paddingLeft","margin","App","calling","loginError","handleConnect","loginUser","Axios","sc","onConnect","handleConnectSocket","onSendMessage","handleSendMessage","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.28883842.chunk.js","sourcesContent":["\r\nclass MyMessage{\r\n    static TEXT = \"TEXT\";\r\n    static VIDEO = \"VIDEO\";\r\n    static IMAGE = \"IMAGE\";\r\n\r\n\r\n    static SENDING = 0;\r\n    static SENT = 1;\r\n    static RECIEVED = 2;\r\n    static SEEN = 3;\r\n\r\n    constructor(){\r\n        this._id = Math.random()*100000*Math.random();\r\n        this.localId = Math.random()*100000*Math.random();\r\n        this.from = \"\";\r\n        this.to = \"\";\r\n        this.body = \"\";\r\n        this.chatId = \"\";\r\n        this.status = MyMessage.SENDING;\r\n        this.sentTimeDate = Date.now();\r\n        this.seenTimeDate = null\r\n        this.messageType = MyMessage.TEXT;\r\n        this.chatType = \"single\"\r\n        this.seenAckCount = 0;\r\n        this.recievedAckCount = 0;\r\n        this.setAttributes = (from, to, body, chatId=\"\") => {\r\n            this.from = from;\r\n            this.to = to;\r\n            this.body = body;\r\n            this.chatId = chatId;\r\n            return this;\r\n        }\r\n        \r\n        this.setValue = (message) => {\r\n            this._id = message._id;\r\n            this.from =message.from;\r\n            this.to = message.to;\r\n            this.body = message.body;\r\n            this.status = message.status;\r\n            this.type = message.type;\r\n            if(message.chatId){\r\n                this.chatId = message.chatId;\r\n            }\r\n            return this;\r\n        }\r\n        this.setAsGroupMessage = () => {\r\n            this.chatType = \"group\";\r\n            return this;\r\n        }\r\n    }\r\n\r\n}\r\nexport default MyMessage;","import React, { Component } from 'react';\r\nimport MyMessage from '../RTCHAT/myMessage';\r\nconst PRIMARY = \"#5BBC93\"\r\nconst SECONDRY = \"#F2F3F8\";\r\n\r\n\r\n\r\nclass TextMessage extends Component {\r\n    state = {  }\r\n    render() { \r\n        const message = this.props.message?this.props.message: new MyMessage().setAttributes(\"\", \"a\", \"abasdfasdf asdfasdfasdfs dfasdfasdfasdf asdfasdfasdfasd fasdfasdfasd fasdfasdfc dedfsadf\") ;\r\n        const isMe = this.props.cid === message.from;\r\n        const backColor = isMe? SECONDRY:  PRIMARY\r\n        const foreColor = isMe? PRIMARY:  SECONDRY\r\n        const alignment = isMe? \"right\": \"left\";\r\n\r\n        return ( \r\n            <div style={{width: \"100%\", float: \"left\"}}>\r\n                {\r\n                    message.type === \"IMAGE\"? \r\n                     <img  width=\"100px\" height=\"100px\" src={message.body} />:\r\n                <div style={{display: \"block\",minWidth: \"40%\", maxWidth: \"70%\" , float: alignment, backgroundColor: backColor, padding: 10, marginTop: 5 }}>\r\n                    <span style={{color: foreColor}}> {message.body}</span>\r\n                    <span style={{float: \"right\", color: \"red\"}}>{message.status+\"] \"+new Date(message.sentTimeDate).toLocaleTimeString()} o</span>\r\n                </div>\r\n                }\r\n            </div>\r\n         \r\n         );\r\n    }\r\n}\r\n \r\nexport default TextMessage;","class MyMessage\r\n{\r\n    constructor(type, payload, to){\r\n        this.type = type;\r\n        this.payload = payload;\r\n        this.to = to;\r\n    }\r\n}\r\nexport default MyMessage;","class CallStatus{\r\n    static CALLING = 0;\r\n    static RUNNING = 1;\r\n    static ACCEPTED = 2;\r\n    static CONNECTING = 3;\r\n    static CONNECTED = 4;\r\n    static ON_ANOTHER_CALL = 5;\r\n    static DECLINED = 6;\r\n}\r\nexport default CallStatus;","// import { RTCPeerConnection, mediaDevices, RTCIceCandidate, RTCSessionDescription } from 'react-native-webrtc';\r\n\r\nimport { OFFER, ANSER, CALLER_ICE, RECIEVER_ICE} from './messageTypes';\r\nimport MyMessage from './message';\r\nimport CallStatus from '../callStatus';\r\n\r\n// {\r\n//     urls: 'turn:turn.msgsafe.io:443?transport=tcp',\r\n//     username: 'a9a2b514',\r\n//     credential: '00163e7826d6'\r\n//     }\r\nclass PeerConnectionManager \r\n{\r\n  \r\n    constructor(communicatorContext, socketConnection ){\r\n        this.socket = socketConnection;\r\n        this.myId = null;\r\n        this.peerId = null;\r\n        this.localStream = null;\r\n        this.peerStream = null;\r\n        this.context = communicatorContext;\r\n        // this.configuration = {iceServers: [{url: \"stun:stun.l.google.com:19302\"}]};\r\n        this.configuration = {iceServers: [\r\n            {url: \"stun:stun.l.google.com:19302\"}, \r\n            {\r\n                urls: \"turn:numb.viagenie.ca\", \r\n                username: \"ata.mirza40@gmail.com\", \r\n                credential: \"ataMirza12345_\"\r\n            }\r\n            ]};\r\n      \r\n        this.peerConnection = null;\r\n        this.handleCommunication();\r\n    }\r\n\r\n    setChannelEnabled = (kind, value) => {\r\n       let index = (this.localStream.getTracks() || []).findIndex(t => t.kind === kind);\r\n       if(index >=0){\r\n           this.localStream.getTracks()[index].enabled = value;\r\n       }\r\n    }\r\n\r\n    handleCommunication = () =>{\r\n       \r\n        this.socket.on(\"onRecieveRTCMessage\", (res) => {\r\n            if(this.peerConnection){\r\n         \r\n            let message = res.query;\r\n            switch(message.type)\r\n            {\r\n                case OFFER: // RECIEVER\r\n                    console.log(\"STEP-1: RECIEVE OFFER\");\r\n                    console.log(message);\r\n                    console.log(\"---Adding offer to peer connection\")\r\n                    this.peerConnection.setRemoteDescription(new RTCSessionDescription(message.payload))\r\n                        .then(() => {\r\n                           console.log(\"---added remote offer\")\r\n                           this.recieveCall();\r\n                        }).catch(err => {\r\n                            console.log(\"CATCH- error in setting remote offer\");\r\n                            console.log(err)\r\n                        })\r\n                    break;\r\n                case ANSER: // CALLER\r\n                    console.log(\"STEP-4: ANSER RECIEVED\");\r\n                    this.peerConnection.setRemoteDescription(new RTCSessionDescription(message.payload))\r\n                        .then(() => {\r\n                            console.log(\"---added remote answer\")\r\n\r\n                            //// EMIT CALL STARTING......\r\n\r\n                        }).catch(err => {\r\n                            console.log(\"CATCH- error in setting remote answer\");\r\n                            console.log(err)\r\n                        })\r\n                    break;\r\n                case CALLER_ICE: // RECIEVER\r\n                    this.peerConnection.addIceCandidate(new RTCIceCandidate(message.payload))\r\n                        .then(() => {\r\n                            console.log(\"++++++++ICE ADDED: RECIEVER\")\r\n                        }).catch(err => {\r\n                            console.log(\"CATCH- error in setting remote Reciever ice candidate\");\r\n                            console.log(err)\r\n                        })\r\n                    break;\r\n                case RECIEVER_ICE:  // CALLER\r\n                    console.log(\"++++++++ICE ADDED\");\r\n                    this.peerConnection.addIceCandidate(new RTCIceCandidate(message.payload))\r\n                        .then(() => {\r\n                            console.log(\"++++++++ICE ADDED: CALLER\")\r\n                        }).catch(err => {\r\n                            console.log(\"CATCH- error in setting remote Caller ice candidate\");\r\n                            console.log(err)\r\n                        })\r\n                    break;\r\n                default: \r\n                    break;\r\n            }\r\n        }else{\r\n            console.log(\"PEER CONNECTION NOT INITIALIZED\");\r\n        }\r\n        })\r\n\r\n       \r\n\r\n       \r\n    }\r\n\r\n    createConnection  = (myId, peerId, config = null) => {\r\n        this.myId = myId;\r\n        this.peerId = peerId;\r\n        if(config !== null){\r\n            this.configuration = config;\r\n        }\r\n        console.log(\"CONFIGS\");\r\n        console.log(this.configuration);\r\n        this.peerConnection = new RTCPeerConnection(this.configuration);\r\n        this.peerConnection.onicecandidate = (event) => {\r\n            if(event.candidate){\r\n                if(this.callerId){\r\n                    this.sendMessage(new MyMessage(CALLER_ICE, event.candidate, this.peerId));                \r\n                }else{\r\n                    this.sendMessage(new MyMessage(RECIEVER_ICE, event.candidate, this.peerId));\r\n                }\r\n            }\r\n        }\r\n\r\n        this.peerConnection.onaddstream = event => {\r\n            console.log(\"Streaming...!!!\");\r\n            console.log(event.stream);\r\n            this.context.handelOnAddRemoteStream(event.stream)\r\n            this.peerStream = event.stream;\r\n        }\r\n        this.peerConnection.oniceconnectionstatechange = (e) => {\r\n            console.info('ICE Connection State Changed:', e.target.iceConnectionState)\r\n            switch (e.target.iceConnectionState) {\r\n              case 'closed':\r\n              case 'disconnected':\r\n              case 'failed':\r\n                  console.log(\"FAILD, Disconnected OR closed\");\r\n                break\r\n            }\r\n        }\r\n    \r\n    \r\n    }\r\n    destroyConnection = () => {\r\n        // this.setChannelEnabled(\"video\", false);\r\n        // this.setChannelEnabled(\"audio\", false);\r\n        if(this.localStream){\r\n            this.localStream.getTracks().forEach(function(track) {\r\n                track.stop();\r\n            });\r\n        }\r\n        if(this.peerConnection){\r\n            this.peerConnection.close();\r\n            this.peerConnection = null;\r\n            this.localStream = null;\r\n            this.peerStream = null;\r\n            this.peerId = null;\r\n        }\r\n        // this.peerConnection = null;\r\n        // this.peerId = null;\r\n        // this.localStream = null;\r\n        // this.peerStream = null;\r\n       \r\n    }\r\n\r\n\r\n    startCall = ( isFront, isVideo = true) => {\r\n        this.callerId = true;\r\n        console.log(\"STEP-1: Turning On Cam\")\r\n        let videoSourceId = null;\r\n        if(!navigator.mediaDevices){\r\n            alert(\"no video source\")\r\n            return;\r\n        }\r\n       navigator.mediaDevices.enumerateDevices().then(sourceInfos => {\r\n            console.log(\"Source Infos\");\r\n            console.log(sourceInfos);\r\n            for (let index = 0; index < sourceInfos.length; index++) {\r\n                const sourceInfo = sourceInfos[index];\r\n                if(sourceInfo.kind == \"videoinput\" && sourceInfo.facing == (isFront? \"front\": \"back\")){\r\n                  videoSourceId = sourceInfo.deviceId;\r\n                }\r\n                \r\n            }\r\n\r\n        })\r\n        navigator.mediaDevices.getUserMedia({\r\n            audio: {\r\n                echoCancellation: true,\r\n            },\r\n            video: true\r\n        }).then(stream => {\r\n            this.localStream = stream;\r\n            this.context.handelOnAddLocalStream(stream);\r\n            \r\n            console.log(\"STEP-2: ADDING STREAM TO PEER CONNECTION\");\r\n            this.peerConnection.addStream(this.localStream);\r\n            console.log(stream);\r\n\r\n            console.log(\"STEP-3: CREATING OFFER\")\r\n            this.peerConnection.createOffer({offerToReceiveAudio: true, offerToReceiveVideo: true})\r\n                .then(offer => {\r\n                    this.sendMessage(new MyMessage(OFFER, offer, this.peerId) );\r\n                    this.peerConnection.setLocalDescription(offer)\r\n                        .then(() => {\r\n                            console.log(\"---Offer- locally added\");\r\n                        }).catch(err=> {\r\n                            console.log(\"CATCH-error in adding offer\")\r\n                        })\r\n                }).catch(err => {\r\n                    console.log(\"CATCH- error in creating offer\");\r\n                    console.log(err);\r\n                })\r\n        })\r\n    }\r\n\r\n\r\n    recieveCall = () => {\r\n        this.callerId = false;\r\n        let videoSourceId = null;\r\n        let isFront = true;\r\n\r\n        navigator.mediaDevices.enumerateDevices().then(sourceInfos => {\r\n            console.log(\"Source Infos\");\r\n            console.log(sourceInfos);\r\n            for (let index = 0; index < sourceInfos.length; index++) {\r\n                const sourceInfo = sourceInfos[index];\r\n                if(sourceInfo.kind == \"videoinput\" && sourceInfo.facing == (isFront? \"front\": \"back\")){\r\n                  videoSourceId = sourceInfo.deviceId;\r\n                }\r\n                \r\n            }\r\n        })\r\n        navigator.mediaDevices.getUserMedia({\r\n            audio: {\r\n                echoCancellation: true\r\n            },\r\n            video: true\r\n        }).then(stream => {\r\n            this.localStream = stream;\r\n            this.context.handelOnAddLocalStream(stream);\r\n\r\n            console.log(\"STEP-2: ADDING STREAM TO PEER CONNECTION\");\r\n            this.peerConnection.addStream(this.localStream);\r\n\r\n\r\n            console.log(\"STEP-3: CREATING ANSWER\");\r\n            this.peerConnection.createAnswer({offerToReceiveAudio: true, offerToReceiveVideo: true})\r\n                .then(answer =>{\r\n                    console.log(answer);\r\n                    this.sendMessage(new MyMessage(ANSER, answer, this.peerId));\r\n                    console.log(\"---adding answer to description\");\r\n                    this.peerConnection.setLocalDescription(answer)\r\n                            .then(() => {\r\n                                console.log(\"---answer added locally\");\r\n                            }).catch(err =>{\r\n                                console.log(\"CATCH- error in adding answer locally\");\r\n                                console.log(err);\r\n                            })\r\n                }).catch(err =>{\r\n                    console.log(\"CATCH-error in creating answer\");\r\n                    console.log(err);\r\n                })\r\n\r\n        });\r\n\r\n    }\r\n\r\n\r\n   \r\n    sendMessage = (message) => {\r\n        console.log(\"---Sending message of type: \"+ message.type)\r\n        console.log(message);\r\n        this.socket.emit(\"onSendRTCMessage\", {query: message });\r\n    }\r\n\r\n\r\n    getStream = () => {\r\n        return this.localStream;\r\n    }\r\n\r\n}\r\nexport default PeerConnectionManager;\r\n\r\n\r\n","export const OFFER = \"OFFER\";\r\nexport const ANSER = \"ANSWER\";\r\nexport const CALLER_ICE = \"CALLER_ICE\";\r\nexport const RECIEVER_ICE = \"RECIEVER_ICE\";","class CallStatus{\r\n    static RINGING_REQUEST = 0;\r\n    static RINGING  = 2;\r\n    static ACCEPTED = 3;\r\n    static REJECTED = 4;\r\n    static USEROFFLINE = 5;\r\n    static USERONLINE = 6;\r\n    static ON_OHTER_CALL = 7;\r\n\r\n}\r\nexport default CallStatus;","class CallPacket{\r\n    constructor(type, to, from){\r\n        this.type = type;\r\n        this.to = to;\r\n        this.from = from;\r\n    }\r\n}\r\nexport default CallPacket;","import CallStatus from \"./callStatus\";\r\nimport CallPacket from \"./callPacket\";\r\n\r\nclass CallSignalingManager{\r\n    constructor(communicatorSocket, communicatorContext){\r\n        this.socket = communicatorSocket;\r\n        this.context = communicatorContext;\r\n        this.peerId = null;\r\n        this.isBusy = false;\r\n\r\n        this.handelSingnaling();\r\n    }\r\n\r\n\r\n    handelSingnaling = () => {\r\n        this.socket.on(\"onListen\", res => {\r\n            let packet =res.query;\r\n\r\n            switch(packet.type){\r\n                case CallStatus.RINGING_REQUEST: //// RECIEVER\r\n                    if(this.isBusy){\r\n                        this.socket.emit(\"onCommunicate\", {query: new CallPacket(CallStatus.ON_OHTER_CALL, packet.from, this.context.cid)})\r\n                    }else{\r\n                        this.isBusy = true;\r\n                        this.context.handelOnAddCallStatus(CallStatus.RINGING_REQUEST)\r\n                        this.peerId = packet.from;\r\n                        console.log(\"INCOMMING CALL: RING REQUEST\")   \r\n                        //// create RTC Connection here,\r\n                        console.log(\"CREATING RTC CONNECTION: RECIVER\")\r\n                        this.context.createRTCConnection(packet.from)\r\n                        //// show window ringing \r\n                        this.socket.emit(\"onCommunicate\", {query: new CallPacket(CallStatus.RINGING, packet.from, this.context.cid)})\r\n                    }\r\n                    \r\n                    break;\r\n                \r\n                case CallStatus.RINGING:  ////////   CALLER \r\n                this.isBusy = true;\r\n                this.context.handelOnAddCallStatus(CallStatus.RINGING)\r\n\r\n                    ////// UPDATE STATUS ///// ringing.... \r\n                    console.log(\"CALL: RINGING...\")\r\n                    break;\r\n                \r\n                case CallStatus.ACCEPTED: ///// CALLER \r\n                this.isBusy = true;\r\n                this.context.handelOnAddCallStatus(CallStatus.ACCEPTED)\r\n\r\n                    console.log(\"CALL: ACCEPTED\")\r\n                    ///// Start RTC Call...... \r\n                    this.context.startRTCCall(true)\r\n                    break;\r\n                case CallStatus.REJECTED: \r\n                    this.isBusy = false;\r\n                    this.context.handelOnAddCallStatus(CallStatus.REJECTED);\r\n                    this.context.destroyRTCConnection();\r\n                    break;\r\n                case CallStatus.ON_OHTER_CALL: \r\n                    this.isBusy = false;\r\n                    this.context.handelOnAddCallStatus(CallStatus.ON_OHTER_CALL);\r\n                    this.context.destroyRTCConnection();\r\n                    break;\r\n                default: \r\n                    break;\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n\r\n    connetingPeer = () => {\r\n        console.log(\"Connecting...\")\r\n        this.context.handelOnAddCallStatus(CallStatus.RINGING);\r\n        this.socket.emit(\"onCommunicate\", {query: new CallPacket(CallStatus.RINGING_REQUEST, this.peerId, this.context.cid )}, (ack) =>{\r\n            if(ack.type === CallStatus.USEROFFLINE){\r\n                console.log(\"PEER OFFLINE: RECONNECTING\")\r\n                this.connetingPeer(this.peerId)\r\n            }else{\r\n                console.log(\"PEER: ONLINE\")\r\n                \r\n                //// CAN TRIGGER RINGIN HERE \r\n               \r\n            }\r\n        } )\r\n    }\r\n\r\n    initializeSingnaling = (to) => {\r\n        this.peerId = to;\r\n        this.isBusy = true;\r\n        console.log(\"STEP1: initializing signaling\")\r\n        return new Promise((resolve, reject) => {\r\n            if(this.context.socketConnected){\r\n                console.log(\"Me: CONNECTED\")\r\n                //// start signaling, create RTC connection\r\n                console.log(\"CREATING RTC CONNECTION: CALLER\")\r\n                this.context.createRTCConnection(to);\r\n                this.connetingPeer(to);\r\n                resolve(true);\r\n            }else{\r\n                console.log(\"Me: NOT CONNECTED\")\r\n                reject(false);\r\n            }  \r\n        })                                     \r\n    }\r\n\r\n    acceptSignaling = () => {\r\n        this.isBusy = true;\r\n        return new Promise((resolve, reject) => {\r\n            this.socket.emit(\"onCommunicate\", {query: new CallPacket(CallStatus.ACCEPTED, this.peerId, this.context.cid)}, (ack) => {\r\n                if(ack.type === CallStatus.USERONLINE){\r\n                    //////  START RTC CaLL\r\n                    resolve(true);\r\n                }else{\r\n                    reject(false);\r\n                    ////// reconnecting.....and restoring\r\n                }\r\n            });\r\n        })\r\n    }\r\n    endCallSingnal = (to) => {\r\n        this.socket.emit(\"onCommunicate\", {query: new CallPacket(CallStatus.REJECTED, this.peerId, this.context.cid)});\r\n        this.context.handelOnAddCallStatus(CallStatus.REJECTED);\r\n        this.isBusy = false;\r\n        this.peerId = null;\r\n    }\r\n}\r\nexport default CallSignalingManager;","class MyUser{\r\n    constructor(){\r\n        this._id = \"\";\r\n        this.username = \"\";\r\n        this.phoneNumber = \"\";\r\n        \r\n        this.setAttributes = (_id, username) => {\r\n            this._id  = _id;\r\n            this.username = username;\r\n            return this;\r\n        }\r\n        this.setValue = (user) => {\r\n            this._id = user._id;\r\n            this.username = user.username;\r\n            this.phoneNumber = user.phoneNumber;\r\n            return this;\r\n        }\r\n    }\r\n}\r\nexport default MyUser;","import MyMessage from \"./myMessage\";\r\nimport MyUser from \"../components/businessLogic/myUser\";\r\n\r\nclass MySingleUserChat{\r\n    static USER_NOT_FOUND = 0;\r\n    static CHAT_NOT_FOUND = 1;\r\n    static USER_CHAT_FOUND = 2;\r\n\r\n    constructor(user = {_id:\"\", username: \"\"}){\r\n        this._id = \"\";\r\n        this.cid = user._id;\r\n        this.title=user.username;\r\n        this.user = user;\r\n        this.messages =  [];\r\n        this.selected = false;\r\n        this.unseenCount = 0;\r\n        this.lastMessage = new MyMessage();\r\n        this.chatType = \"single\";\r\n        this.chatStatus = MySingleUserChat.CHAT_NOT_FOUND;\r\n        \r\n        this.setAttributes = ( messages, selected, unseenCount = 0) => {\r\n            this.user =user;\r\n            this.cid = user._id ;\r\n            this.title=user.username;\r\n            this.messages = messages;\r\n            this.selected = selected;\r\n            this.unseenCount = unseenCount;\r\n            return this;\r\n        }\r\n        this.compose = (sc1, sc2) => {\r\n             this.cid = sc1.cid;\r\n             this.title = sc1.title;\r\n             this.user = sc1.user;\r\n\r\n            if(sc2.chat){\r\n                this._id = sc2.chat._id;\r\n                this.messages = sc2.chat.messages;\r\n                this.chatStatus = sc2.chatStatus;\r\n                this.unseenCount =sc2.unseenCount;\r\n                if(this.messages.length > 0){\r\n                    this.lastMessage = new MyMessage().setValue(this.messages[this.messages.length -1]);\r\n                }\r\n            }\r\n            console.log(\"VALUE\")\r\n            console.log(this);\r\n            return this;\r\n        }\r\n        this.setValue = (singleChat) => {\r\n            this.cid = singleChat._id;\r\n            this.user = singleChat.user;\r\n            this.messages =singleChat.chat;\r\n            this.selected = false;\r\n            this.unseenCount = 0\r\n            return this;\r\n        }\r\n        this.setChat = (singleChat) => {\r\n            if(singleChat){\r\n                this.cid = singleChat._id;\r\n                this.messages =singleChat.chat;\r\n                this.title = singleChat.title;\r\n                this.selected = false;\r\n                this.unseenCount = 0\r\n            }else{\r\n                this.cid = \"\";\r\n                this.messages =[];\r\n                this.selected = false;\r\n                this.unseenCount = 0\r\n            }\r\n           \r\n            return this;\r\n        }\r\n        this.setUser = (user) => {\r\n            this.user = new MyUser().setValue(user);\r\n            return this;\r\n        }\r\n    }\r\n}\r\nexport default MySingleUserChat;","import MyMessage from \"./myMessage\";\r\nimport {AddGroupChatListner} from './index'\r\nclass MyGroupChat{\r\n    constructor( gcid ){\r\n        this._id = gcid;\r\n        this.cid = gcid;\r\n        this.title=\"Group Chat\";\r\n        this.users = [];\r\n        this.messages =  [];\r\n        this.selected = false;\r\n        this.unseenCount = 0;\r\n        this.lastMessage = new MyMessage();\r\n        this.chatType = \"group\";\r\n        this.chatStatus = 2;\r\n        this.setAttributes = ( users  ,messages, selected) => {\r\n            setTimeout(() =>AddGroupChatListner(this.cid), 500)\r\n            \r\n            this.users =users;\r\n            // this.title=user.username;\r\n            this.messages = messages;\r\n            this.selected = selected;\r\n            // this.unseenCount = unseenCount;\r\n            return this;\r\n        }\r\n        this.setValue = (singleChat) => {\r\n            setTimeout(() =>AddGroupChatListner(this.cid), 500)\r\n            // this.cid = singleChat.cid;\r\n            this.users = singleChat.users;\r\n            this.messages =singleChat.messages;\r\n            this.selected = singleChat.selected;\r\n            this.unseenCount = singleChat.unseenCount;\r\n            return this;\r\n        }\r\n    }\r\n}\r\nexport default MyGroupChat;","import MySingleUserChat from \"../../../RTCHAT/mySingleUserChat\";\r\nimport MyUser from \"../../../components/businessLogic/myUser\";\r\nimport { USER_CHAT_DATA_COLLECTOR,SET_CHAT_LIST_CM ,USER_CHAT_SENT_DATA_COLLECTOR,\r\n     USER_CHAT_HANDLE_SELECTD , HANDLE_REMOVE_CHAT, MSG_ACK_ACTION, MSGS_ACK_ACTION, INITIALIZE_CHAT_BETWEEN_CM, GROUP_CHAT_DATA_HANDLER, GROUP_MESSAGE_ACK_ACTION} from \"../../../RTCHAT/types\";\r\nimport MyGroupChat from \"../../../RTCHAT/myGroupChat\";\r\nimport MyMessage from \"../../../RTCHAT/myMessage\";\r\n\r\nconst state = {\r\n    Chat: [\r\n        // new MySingleUserChat(new MyUser().setAttributes(\"A\", \"atamuhiuldin\")).setAttributes([], false ),\r\n        // new MySingleUserChat(new MyUser().setAttributes(\"B\", \"salman\")).setAttributes([], false ),\r\n        // new MySingleUserChat(new MyUser().setAttributes(\"C\", \"dawood\")).setAttributes([], false), \r\n        // new MyGroupChat(\"ABC\" ).setAttributes([\"A\" , \"B\", \"C\"], [], false),\r\n        // new MyGroupChat(\"CDB\" ).setAttributes([\"A\" , \"B\", \"C\"], [], false)\r\n      ], \r\n    user: {\r\n        _id: \"\", \r\n        username: \"\"\r\n    }\r\n}\r\n\r\n\r\nconst ChatReducer = (mState = {...state}, action) => {\r\n    switch(action.type){\r\n        case SET_CHAT_LIST_CM:\r\n        console.log(action.payload.chat)\r\n         mState.Chat = action.payload.chat;\r\n         localStorage.setItem(\"userchatxyz1010\", JSON.stringify(mState) )\r\n            return clone(mState);\r\n        case USER_CHAT_DATA_COLLECTOR:\r\n            let message = action.payload.message;\r\n            let ucId = message.chatType === \"group\"? message.to : message.from\r\n            if(message.from !== mState.user._id){\r\n                console.log(\"=========user data collection========\")\r\n                console.log(message)\r\n                let ucIndex = mState.Chat.findIndex(uc => uc.cid === ucId);\r\n                if(ucIndex >= 0){\r\n                    mState.Chat[ucIndex].messages.push(message);\r\n                    mState.Chat[ucIndex].lastMessage = message;\r\n                    mState.Chat.sort((a, b) =>  b.lastMessage.sentTimeDate- a.lastMessage.sentTimeDate)\r\n                }else{\r\n                    console.log(\"Undefined user message\")\r\n                    console.log(message);\r\n                }\r\n            }\r\n            mState.Chat.sort((a, b) => b.lastMessage.sentTimeDate - a.lastMessage.sentTimeDate )\r\n         localStorage.setItem(\"userchatxyz1010\", JSON.stringify(mState) )\r\n            return clone(mState);\r\n        case GROUP_CHAT_DATA_HANDLER:\r\n                let gmessage = action.payload.message;\r\n                let gucId = gmessage.chatId;\r\n                if(gmessage.from !== mState.user._id){\r\n                    console.log(\"=========group data collection========\")\r\n                    console.log(gmessage)\r\n                    let ucgIndex = mState.Chat.findIndex(uc => uc.cid === gucId);\r\n                    if(ucgIndex >= 0){\r\n                        mState.Chat[ucgIndex].messages.push(gmessage);\r\n                        mState.Chat[ucgIndex].lastMessage = gmessage;\r\n                        mState.Chat.sort((a, b) =>  b.lastMessage.sentTimeDate- a.lastMessage.sentTimeDate)\r\n                    }else{\r\n                        console.log(\"Undefined user message\")\r\n                        console.log(gmessage);\r\n                    }\r\n                }\r\n                mState.Chat.sort((a, b) => b.lastMessage.sentTimeDate - a.lastMessage.sentTimeDate )\r\n                localStorage.setItem(\"userchatxyz1010\", JSON.stringify(mState) )\r\n                return clone(mState);\r\n\r\n            case GROUP_MESSAGE_ACK_ACTION: \r\n                let gmsg = action.payload.message;\r\n                let gstatus = action.payload.status;\r\n                \r\n                console.log(\"01---MSG\")\r\n                console.log(gmsg);\r\n                let gackIndex = mState.Chat.findIndex(c => c.cid === gmsg.chatId);\r\n                // let gackIndex = mState.Chat.findIndex(c => c.cid === (gmsg.to === mState.user._id? msg.from :msg.to))\r\n                if(gackIndex >= 0){\r\n                    let ackmIndex = -1;\r\n                    if(gmsg.isNewId){\r\n                        console.log(\"02---isNew\")\r\n                        ackmIndex = mState.Chat[gackIndex].messages.findIndex(m => m.localId == gmsg.localId )\r\n                        console.log(ackmIndex)\r\n                    }else{\r\n                      console.log(\"02---\")\r\n                        ackmIndex = mState.Chat[gackIndex].messages.findIndex(m => m._id ==  gmsg._id )\r\n                        console.log(ackmIndex)\r\n  \r\n                    }\r\n                    if(ackmIndex >= 0){\r\n                       switch(gstatus){\r\n                           case MyMessage.SEEN: \r\n                               mState.Chat[gackIndex].messages[ackmIndex].seenAckCount++;\r\n                               if(mState.Chat[gackIndex].messages[ackmIndex].seenAckCount >= mState.Chat[gackIndex].messages[ackmIndex].users.length-1 ){\r\n                                 mState.Chat[gackIndex].messages[ackmIndex].status = MyMessage.SEEN;\r\n                               }\r\n                            break;\r\n                            case MyMessage.RECIEVED:\r\n                                mState.Chat[gackIndex].messages[ackmIndex].recievedAckCount++;\r\n                                mState.Chat[gackIndex].messages[ackmIndex].status = MyMessage.RECIEVED;\r\n                             break;\r\n                            default: \r\n                                break;\r\n                       }\r\n                        // mState.Chat[gackIndex].messages[ackmIndex].status = status;\r\n                        if(gmsg.isNewId){\r\n                          mState.Chat[gackIndex].messages[ackmIndex]._id = gmsg.isNewId;\r\n                          console.log(\"NEW ID MSG\")\r\n                          \r\n                        }\r\n                    }else{\r\n                      console.log(\"MSG NOT FOUND\")\r\n                    }\r\n                }else{\r\n                    console.log(\"CHAT NOT FOUND\")\r\n                }\r\n           localStorage.setItem(\"userchatxyz1010\", JSON.stringify(mState) )\r\n  \r\n                return clone(mState);\r\n        case INITIALIZE_CHAT_BETWEEN_CM:\r\n            const {friend, chat} = action.payload;\r\n            let icbIndex = mState.Chat.findIndex(c => c.cid === friend._id);\r\n            if(icbIndex >= 0){\r\n                mState.Chat[icbIndex]._id = chat._id;\r\n                mState.Chat[icbIndex].chatStatus = MySingleUserChat.USER_CHAT_FOUND;\r\n            }\r\n         localStorage.setItem(\"userchatxyz1010\", JSON.stringify(mState) )\r\n             return clone(mState);\r\n        case USER_CHAT_SENT_DATA_COLLECTOR:\r\n                console.log(\"=========send data collection========\")\r\n                let messageSent = action.payload.message;\r\n                console.log(messageSent)\r\n                let ucsIndex = mState.Chat.findIndex(uc => uc.cid === messageSent.to);\r\n                if(ucsIndex >= 0){\r\n                    mState.Chat[ucsIndex].messages.push(messageSent);\r\n                    mState.Chat[ucsIndex].lastMessage = messageSent;\r\n                mState.Chat.sort((a, b) => b.lastMessage.sentTimeDate - a.lastMessage.sentTimeDate )\r\n\r\n                }else{\r\n                    console.log(\"Undefined user message\")\r\n                    console.log(messageSent);\r\n                }\r\n                localStorage.setItem(\"userchatxyz1010\", JSON.stringify(mState) )\r\n                return clone(mState);\r\n        \r\n        case USER_CHAT_HANDLE_SELECTD:\r\n            let cid = action.payload.cid;\r\n            for (let hindex = 0; hindex < mState.Chat.length; hindex++) {\r\n                if( mState.Chat[hindex].cid === cid){\r\n                    mState.Chat[hindex].selected = true\r\n                  \r\n                }else{\r\n                    mState.Chat[hindex].selected = false\r\n                }\r\n              }\r\n         localStorage.setItem(\"userchatxyz1010\", JSON.stringify(mState) )\r\n\r\n            return clone(mState);\r\n        case HANDLE_REMOVE_CHAT:\r\n            mState.Chat = mState.Chat.filter(c => c.cid !== action.payload.cid); \r\n            mState.Chat.sort((a, b) => b.lastMessage.sentTimeDate - a.lastMessage.sentTimeDate )\r\n            localStorage.setItem(\"userchatxyz1010\", JSON.stringify(mState) )\r\n\r\n            return clone(mState)\r\n        \r\n        case MSG_ACK_ACTION: \r\n              let msg = action.payload.message;\r\n              let status = action.payload.status;\r\n              \r\n              console.log(\"01---MSG\")\r\n              console.log(msg);\r\n              let ackIndex = mState.Chat.findIndex(c => c.cid === (msg.to === mState.user._id? msg.from :msg.to))\r\n              if(ackIndex >= 0){\r\n                  let ackmIndex = -1;\r\n                  if(msg.isNewId){\r\n                      console.log(\"02---isNew\")\r\n                      ackmIndex = mState.Chat[ackIndex].messages.findIndex(m => m.localId == msg.localId )\r\n                      console.log(ackmIndex)\r\n                  }else{\r\n                    console.log(\"02---\")\r\n                      ackmIndex = mState.Chat[ackIndex].messages.findIndex(m => m._id ==  msg._id )\r\n                      console.log(ackmIndex)\r\n\r\n                  }\r\n                  if(ackmIndex >= 0){\r\n                      mState.Chat[ackIndex].messages[ackmIndex].status = status;\r\n                      if(msg.isNewId){\r\n                        mState.Chat[ackIndex].messages[ackmIndex]._id = msg.isNewId;\r\n                      }\r\n                  }else{\r\n                    console.log(\"MSG NOT FOUND\")\r\n                  }\r\n              }else{\r\n                  console.log(\"CHAT NOT FOUND\")\r\n              }\r\n         localStorage.setItem(\"userchatxyz1010\", JSON.stringify(mState) )\r\n\r\n              return clone(mState);\r\n\r\n        case MSGS_ACK_ACTION: \r\n            let msgs = action.payload.messages;\r\n            let statuss = action.payload.status;\r\n            let ccid = action.payload.cid;\r\n            let acksIndex = mState.Chat.findIndex(c => c.cid === ccid)\r\n            let markCounter = 0;\r\n            if(acksIndex >= 0){\r\n                for (let msgsIndex = mState.Chat[acksIndex].messages.length -1 ; msgsIndex >= 0 ; msgsIndex--) {\r\n                    const element = mState.Chat[acksIndex].messages[msgsIndex];\r\n                    for (let seenmIndex = 0; seenmIndex < msgs.length; seenmIndex++) {\r\n                        const msgseen = msgs[seenmIndex];\r\n                        if(msgseen._id === element._id){\r\n                            mState.Chat[acksIndex].messages[msgsIndex].status = statuss;\r\n                            markCounter++;\r\n                            break; \r\n                        }\r\n                    }\r\n                    if(markCounter >= msgs.length){\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n         localStorage.setItem(\"userchatxyz1010\", JSON.stringify(mState) )\r\n\r\n              return clone(mState);\r\n        case \"SET_USER\": \r\n              mState.user = action.payload.user;\r\n              localStorage.setItem(\"userchatxyz1010\", JSON.stringify(mState) )\r\n                return clone(mState);\r\n        case \"LOGOUT\":\r\n            localStorage.removeItem(\"userchatxyz1010\")\r\n            return {\r\n                Chat: [\r\n                  ], \r\n                user: {\r\n                    _id: \"\", \r\n                    username: \"\"\r\n                }\r\n            }\r\n\r\n        default: \r\n           let data = localStorage.getItem(\"userchatxyz1010\")\r\n           if(data){\r\n               data = JSON.parse(data);\r\n               return data;\r\n           }else{\r\n            return clone(mState);\r\n           }\r\n    }\r\n}\r\nexport default ChatReducer;\r\n\r\nconst clone = (obj) =>{\r\n    return JSON.parse(JSON.stringify(obj))\r\n}","export const USER_CHAT_HANDLE_SELECTD =\"USER_CHAT_HANDLE_SELECTD\";\r\nexport const MSG_ACK_ACTION = \"MSG_ACK_ACTION\";\r\nexport const MSGS_ACK_ACTION = \"MSGS_ACK_ACTION\";\r\nexport const USER_CHAT_DATA_COLLECTOR = \"USER_CHAT_DATA_COLLECTOR\";\r\nexport const USER_CHAT_SENT_DATA_COLLECTOR = \"USER_CHAT_SENT_DATA_COLLECTOR\";\r\nexport const HANDLE_REMOVE_CHAT =\"HANDLE_REMOVE_CHAT\";\r\nexport const SET_CHAT_LIST_CM = \"SET_CHAT_LIST_CM\";\r\nexport const INITIALIZE_CHAT_BETWEEN_CM = \"INITIALIZE_CHAT_BETWEEN_CM\";\r\nexport const GROUP_CHAT_DATA_HANDLER = \"GROUP_CHAT_DATA_HANDLER\";\r\nexport const GROUP_MESSAGE_ACK_ACTION = \"GROUP_MESSAGE_ACK_ACTION\";  \r\n\r\n/// CALL ACTIONS \r\nexport const CALL_RUNNING_STATUS = \"CALL_RUNNING_STATUS\";\r\n\r\n\r\n\r\n//// pushes \r\nexport const SET_ALL_PUSHES = \"LOAD_ALL_PUSHES\";\r\nexport const SET_INC_PUSH_STATUS = \"SET_INC_PUSH_STATUS\";\r\nexport const REMOVE_INC_PUSH_ACTIONS  = \"REMOVE_INC_PUSH_ACTIONS\";\r\nexport const ADD_OUT_PUSH_ACTION = \"ADD_OUT_PUSH_ACTION\";\r\nexport const REMOVE_OUT_PUSH_ACTION = \"REMOVE_OUT_PUSH_ACTION\"; \r\nexport const UPDATE_OUT_PUSH_ID = \"UPDATE_OUT_PUSH_ID\";\r\n","\r\nconst state ={\r\n    user: {\r\n        _id: \"\", \r\n        username: \"\"\r\n    }\r\n}\r\n\r\nconst AuthReducer = (mState = {...state}, action) => {\r\n    switch(action.type){\r\n        case \"SET_USER\": \r\n        mState.user = action.payload.user;\r\n        localStorage.setItem(\"userauth1010\", JSON.stringify(mState))\r\n            return clone(mState);\r\n        case \"LOGOUT\":\r\n            localStorage.removeItem(\"userauth1010\");\r\n            return {\r\n                user: {\r\n                    _id: \"\", \r\n                    username: \"\"\r\n                }\r\n            }\r\n        default: \r\n        let data = localStorage.getItem(\"userauth1010\");\r\n        if(data){\r\n            return JSON.parse(data);\r\n        }else{\r\n            return clone(mState);\r\n        }\r\n    }\r\n}\r\nexport default AuthReducer;\r\n\r\nconst clone = (obj) =>{\r\n    return JSON.parse(JSON.stringify(obj))\r\n}","class MyPush {\r\n    static TEXT_MESSAGE = 1;\r\n    static IMAGE_MESSAGE = 2;\r\n    static VIDEO_MESSAGE = 3;\r\n    // static ACK_MESSAGE = 4;\r\n    static CALL = 5;\r\n\r\n    static ACTION_STATUS_NEW = 1;\r\n    static ACTION_STATUS_MARKED = 2;\r\n\r\n\r\n    static ACTION_STATUS_SUSPENDED = 3;\r\n\r\n\r\n    static SETVER_ACTION_REMOVE_PUSHES = 6;\r\n    static SETVER_ACTION_REMOVE_PUSH = 10;\r\n    static USER_NEW_PUSH_ACTION = 7;\r\n\r\n    ///////////// \r\n    static MESSAGE = 8;\r\n    static ACK_MESSAGE = 9;\r\n\r\n\r\n\r\n    static GROUP_MESSAGE = 20;\r\n    static ACK_GROUP_MESSAGE = 21;\r\n\r\n    constructor(users){\r\n        this._id = \"\";\r\n        this.users = []\r\n        if(users.length === 1){\r\n            this.to = users[0];\r\n        }else{\r\n            this.users = users;\r\n        }\r\n        // this.to = to;\r\n        this.localId = Math.random()*100000*Math.random();\r\n        this.pushType = 0;\r\n\r\n        this.payload = null;\r\n        this.status = MyPush.ACTION_STATUS_NEW;\r\n        this.setAttributes = (_id, pushType, payload, status) => {\r\n            this._id = _id;\r\n            this.localId = _id;\r\n            this.pushType = pushType;\r\n            this.payload = payload;\r\n            this.status = status;\r\n            return this;\r\n        }\r\n    }\r\n}\r\nexport default MyPush;","import { SET_ALL_PUSHES, SET_INC_PUSH_STATUS, REMOVE_INC_PUSH_ACTIONS, ADD_OUT_PUSH_ACTION, REMOVE_OUT_PUSH_ACTION, UPDATE_OUT_PUSH_ID } from \"../../../RTCHAT/types\";\r\nimport MyPush from \"../../../RTCHAT/PushesManager/myPush\";\r\n\r\nconst state ={ \r\n    incPushActions: [], \r\n    outPushActions: []\r\n}\r\n\r\nconst PushesReducer = (mState = {...state}, action) =>{ \r\n    switch(action.type){\r\n        case SET_ALL_PUSHES:\r\n            let pActions = action.payload.pushActions;\r\n            for (let index = 0; index < pActions.length; index++) {\r\n                const singlePAction = pActions[index];\r\n                let pIndex = mState.incPushActions.findIndex(i => i._id === singlePAction._id)\r\n                if(pIndex >= 0){\r\n                    console.log(\"already exist\")\r\n                }else{\r\n                    mState.incPushActions.push(new MyPush([]).setAttributes(singlePAction._id, singlePAction.pushType, singlePAction.payload, MyPush.ACTION_STATUS_NEW));\r\n                }\r\n            }\r\n            localStorage.setItem(\"pushaction1010\", JSON.stringify(mState) )\r\n\r\n            return clone(mState);\r\n        case SET_INC_PUSH_STATUS: \r\n            let {_id, status} = action.payload;\r\n            let puIndex = mState.incPushActions.findIndex(i => i._id === _id);\r\n            if(puIndex >= 0){\r\n                mState.incPushActions[puIndex].status = status;\r\n            }\r\n            localStorage.setItem(\"pushaction1010\", JSON.stringify(mState) )\r\n\r\n            return clone(mState);\r\n        case REMOVE_INC_PUSH_ACTIONS:\r\n            action.payload.pushActions.forEach(sp => {\r\n                if(sp.removed){\r\n                    mState.incPushActions = mState.incPushActions.filter(i => i._id !== sp._id)\r\n                }else{\r\n                    console.log(\"NOT REMOVED\");\r\n                    console.log(sp);\r\n                }\r\n            });\r\n            localStorage.setItem(\"pushaction1010\", JSON.stringify(mState) )\r\n            return clone(mState);\r\n        case ADD_OUT_PUSH_ACTION:\r\n            console.log(\"PUSHING LOCALLY ....\")\r\n            mState.outPushActions.push(action.payload.pushAction);\r\n            localStorage.setItem(\"pushaction1010\", JSON.stringify(mState) )\r\n\r\n            return clone(mState);\r\n        case REMOVE_OUT_PUSH_ACTION:\r\n             mState.outPushActions = mState.outPushActions.filter(o => o.localId !== action.payload.pushAction.localId)\r\n            localStorage.setItem(\"pushaction1010\", JSON.stringify(mState) )\r\n            return clone(mState);\r\n        case UPDATE_OUT_PUSH_ID: \r\n            // let {_id, localId} = action.payload;\r\n            let u_id = action.payload._id;\r\n            let ulocalId = action.payload.localId;\r\n            let ouIndex = mState.outPushActions.findIndex(i => i.localId === ulocalId);\r\n            if(puIndex >= 0){\r\n                mState.outPushActions[ouIndex]._id = u_id;\r\n            }\r\n            localStorage.setItem(\"pushaction1010\", JSON.stringify(mState) )\r\n            return clone(mState);\r\n        case \"LOGOUT\":\r\n                localStorage.removeItem(\"pushaction1010\")\r\n                return { \r\n                    incPushActions: [], \r\n                    outPushActions: []\r\n                }\r\n        default:\r\n            let data = localStorage.getItem(\"pushaction1010\")\r\n           if(data){\r\n               data = JSON.parse(data);\r\n               return data;\r\n           }else{\r\n            return clone(mState);\r\n           }\r\n    }\r\n}\r\nexport default PushesReducer;\r\nconst clone = (obj) => {\r\n    return JSON.parse(JSON.stringify(obj));\r\n}","import {combineReducers} from 'redux';\r\n\r\nimport ChatReducer from './chatReducer';\r\nimport AuthReducer from './authReducer';\r\nimport PushesReducer from './pushesReducers';\r\nconst RootReducer = combineReducers({\r\n    ChatReducer, \r\n    AuthReducer, \r\n    PushesReducer\r\n})\r\nexport default RootReducer;","import {createStore, applyMiddleware, compose} from 'redux';\r\nimport RootReducer from './reducers';\r\nimport thunk from 'redux-thunk';\r\nconst middleWare = [thunk]\r\n\r\nconst initialState ={}\r\n\r\n\r\nlet store = null \r\n\r\nif(window.__REDUX_DEVTOOLS_EXTENSION__){\r\n    store = createStore(\r\n        RootReducer, \r\n        initialState, \r\n        compose(applyMiddleware(...middleWare), \r\n        window.__REDUX_DEVTOOLS_EXTENSION__()\r\n        )\r\n    )\r\n}else{\r\n    store = createStore(\r\n        RootReducer, \r\n        initialState, \r\n        compose(applyMiddleware(...middleWare))\r\n    )\r\n}\r\n\r\nexport default store;","// export const BASEURL = \"http://localhost:5000\";\r\nexport const BASEURL = \"https://niofoxvideochatserver.herokuapp.com/\";","import MyPush from \"../PushesManager/myPush\";\r\nimport { MSG_ACK_ACTION, USER_CHAT_DATA_COLLECTOR, GROUP_CHAT_DATA_HANDLER, GROUP_MESSAGE_ACK_ACTION } from \"../types\";\r\nimport store from '../../store';\r\n\r\n\r\nconst dataRouter = (action) => {\r\n   \r\n    switch(action.pushType){\r\n        \r\n        case MyPush.MESSAGE: \r\n        action.payload._id = action._id;\r\n        store.dispatch({\r\n            type: USER_CHAT_DATA_COLLECTOR, \r\n            payload: {message: action.payload}\r\n        })\r\n            break;\r\n\r\n        case MyPush.ACK_MESSAGE:\r\n            store.dispatch({\r\n                type: MSG_ACK_ACTION, \r\n                payload: {message: action.payload, status:action.payload.status}\r\n            })\r\n            break;\r\n        case MyPush.GROUP_MESSAGE:\r\n            action.payload._id = action._id;\r\n            store.dispatch({\r\n                type: GROUP_CHAT_DATA_HANDLER, \r\n                payload: {message: action.payload}\r\n            })\r\n            break;\r\n        case MyPush.ACK_GROUP_MESSAGE:\r\n            store.dispatch({\r\n                type: GROUP_MESSAGE_ACK_ACTION, \r\n                payload: {message: action.payload, status:action.payload.status}\r\n            })\r\n            break;\r\n\r\n\r\n\r\n\r\n        default: \r\n            break;\r\n    }\r\n}\r\nexport default dataRouter;","import store from '../../store';\r\nimport axios from 'axios';\r\nimport { BASEURL } from '../../proxy';\r\nimport { SET_ALL_PUSHES, SET_INC_PUSH_STATUS, USER_CHAT_DATA_COLLECTOR, REMOVE_INC_PUSH_ACTIONS, MSGS_ACK_ACTION, ADD_OUT_PUSH_ACTION, REMOVE_OUT_PUSH_ACTION } from '../types';\r\nimport MyPush from './myPush';\r\nimport MyMessage from '../myMessage';\r\nimport dataRouter from '../DataRouters/dataRouter';\r\n\r\nclass PushManager{\r\n    constructor(cid, socket, communicatorContext){\r\n        this.cid = cid;\r\n        this.socket = socket;\r\n        this.communicatorContext = communicatorContext;\r\n        this.socket.on(\"onListenPushCommunicator\", (res) => {\r\n            let query = res.query;\r\n            dataRouter(query)\r\n            //// ack remote push\r\n            this.ackRemotePush(query)\r\n            //// sending ack\r\n            switch(query.pushType){\r\n                case MyPush.MESSAGE: \r\n                    this.sendPushAction(MyPush.ACK_MESSAGE, {_id: query.payload._id, to: query.payload.to, from: query.payload.from ,status: MyMessage.RECIEVED}, query.payload.from)\r\n                    break;\r\n            }\r\n        })\r\n        this.socket.on(\"onListenGroupPushCommunicator\", (res) => {\r\n            let query = res.query;\r\n            dataRouter(query)\r\n            //// ack remote push\r\n            this.ackRemotePush(query)\r\n            //// sending ack\r\n            switch(query.pushType){\r\n                case MyPush.GROUP_MESSAGE: \r\n                    query.payload._id = query._id;\r\n                    this.sendPushGroupAction(MyPush.ACK_GROUP_MESSAGE, {_id: query.payload._id,  chatId: query.payload.chatId ,from: query.payload.from ,status: MyMessage.RECIEVED}, query.users)\r\n                    break;\r\n            }\r\n        })\r\n\r\n\r\n        this.loadPushes = () => {\r\n            this.getAllPushes()\r\n                .then(res => {\r\n                    /// getting actions with new tag\r\n                    let incActions = store.getState().PushesReducer.incPushActions;\r\n                    let newIncActions = incActions.filter(p => p.status === MyPush.ACTION_STATUS_NEW);\r\n                    for (let index = 0; index < newIncActions.length; index++) {\r\n                            const singlePushAction = newIncActions[index];\r\n                            // this.dispatchIncPushAction(singlePushAction);\r\n                            dataRouter(singlePushAction)\r\n\r\n                            switch(singlePushAction.pushType){\r\n                                case MyPush.MESSAGE: \r\n                                  this.sendPushAction(MyPush.ACK_MESSAGE, {_id: singlePushAction.payload._id, to: singlePushAction.payload.to, from: singlePushAction.payload.from ,status: MyMessage.RECIEVED}, singlePushAction.payload.from)\r\n                                  break;\r\n                           \r\n                            }\r\n                            this.markPushAction(singlePushAction._id, MyPush.ACTION_STATUS_MARKED);\r\n                    }\r\n                    let markedIncActions = store.getState().PushesReducer.incPushActions.filter(p => p.status === MyPush.ACTION_STATUS_MARKED);\r\n                    this.pushAckAndRemove(markedIncActions);\r\n                    \r\n                }).catch(err => {\r\n                    console.log(\"CATCH: LOAD PUSHED\")\r\n                    console.log(err);\r\n                })\r\n            \r\n        }\r\n\r\n        this.getAllPushes = () => {\r\n            return new Promise((resolve, reject) => {\r\n                axios.post(BASEURL+ \"/API/user/chat/get-pushes\", {userId: this.cid})\r\n                .then(res => {\r\n                    store.dispatch({\r\n                        type: SET_ALL_PUSHES, \r\n                        payload:{pushActions: res.data}\r\n                    });\r\n                    resolve(true);\r\n                }).catch(err => {\r\n                    console.log(\"CATCH: NETWORK ERROR\")\r\n                    console.log(err);\r\n                    reject(false)\r\n                })\r\n            })\r\n        }\r\n\r\n        ///////// INCOMMING PUSHES MANAGER ///////////////\r\n        this.dispatchIncPushAction = (pushAction) => {\r\n            switch(pushAction.pushType){\r\n                case MyPush.TEXT_MESSAGE:\r\n                    let mAction = {...pushAction};\r\n                    mAction.payload._id = pushAction._id;\r\n                    store.dispatch({\r\n                        type: USER_CHAT_DATA_COLLECTOR, \r\n                        payload: {message: mAction.payload}\r\n                    })\r\n                    \r\n                    this.pushRemote({message: mAction.payload, cid: mAction.payload.from, status: MyMessage.RECIEVED}, MyPush.ACK_MESSAGE)\r\n                    break;\r\n                case MyPush.ACK_MESSAGE:\r\n                    let ackPayload = pushAction.payload;\r\n                    store.dispatch({\r\n                        type: MSGS_ACK_ACTION, \r\n                        payload: {messages: ackPayload.messages, cid:ackPayload.cid ,status:ackPayload.status}\r\n                    })\r\n                    break;\r\n                default: \r\n                    break;\r\n            }\r\n        }\r\n        this.markPushAction = (_id, status) => {\r\n            store.dispatch({\r\n                type: SET_INC_PUSH_STATUS, \r\n                payload: {_id, status}\r\n            })\r\n        }\r\n\r\n        this.pushAck = (push) => {\r\n            // this.socket.emit(\"onPushCommunicator\", {query: {payload: push, type: MyPush.USER_NEW_PUSH_ACTION }})\r\n        }\r\n\r\n        this.pushAckAndRemove = (markedPushes) => {\r\n            this.socket.emit(\"onPushCommunicator\", {query: {payload: markedPushes, pushType: MyPush.SETVER_ACTION_REMOVE_PUSHES}}, (ack) => {\r\n                store.dispatch({\r\n                    type: REMOVE_INC_PUSH_ACTIONS, \r\n                    payload: {pushActions: ack}\r\n                })\r\n            })\r\n        }\r\n\r\n        this.ackRemotePush = (action) => {\r\n            //// this will trigger server to delete it\r\n            this.socket.emit(\"onPushCommunicator\", {query: {payload: {_id: action._id}, pushType: MyPush.SETVER_ACTION_REMOVE_PUSH}}, (ack) => {\r\n\r\n            })\r\n        }\r\n\r\n        this.pushRemote = (payload, type) => {\r\n            this.socket.emit(\"onPushCommunicator\", {query: {payload: payload, type: type}}, (ack) => {\r\n                // store.dispatch({\r\n                //     type: REMOVE_INC_PUSH_ACTIONS, \r\n                //     payload: {pushActions: ack}\r\n                // })\r\n            })\r\n        }\r\n\r\n        this.pushLocalAction = (pushType, payload, status=MyPush.ACTION_STATUS_NEW) => {\r\n            store.dispatch({\r\n                type: ADD_OUT_PUSH_ACTION, \r\n                payload: {pushAction: new MyPush([\"\"]).setAttributes(Math.random()*1000*Math.random(), pushType, payload, status )}\r\n            })\r\n        }\r\n        this.pushLocally = (action) => {\r\n            store.dispatch({\r\n                type: ADD_OUT_PUSH_ACTION, \r\n                payload: {pushAction: action}\r\n            })\r\n        }\r\n\r\n\r\n        this.onNetworkConnected = () => {\r\n\r\n            /////// LISTEN OUT PUSHES \r\n            let outActions = store.getState().PushesReducer.outPushActions;\r\n            outActions.forEach(oAction => {\r\n                this.dispatchOutAction(oAction)\r\n            });\r\n        }\r\n\r\n\r\n        ////// OUTGOING PUSHES MANAGER ///////////////////////\r\n        this.dispatchOutAction = (action) => {\r\n            console.log(\"ACTION DISPATCH\")\r\n            console.log(action)\r\n            switch(action.pushType){\r\n                case MyPush.TEXT_MESSAGE: \r\n                    console.log(\"SENDING ...\")\r\n                    this.communicatorContext.send(action.payload.message, action.payload.chatId, action)\r\n                    break;\r\n                default: \r\n                    break;\r\n            }\r\n        }\r\n\r\n        this.removeOutPushAction = (action) => {\r\n            store.dispatch({\r\n                type: REMOVE_OUT_PUSH_ACTION, \r\n                payload: {pushAction: action}\r\n            })\r\n        }\r\n\r\n\r\n        this.emitPush = (action) => {\r\n            this.socket.emit(\"onPushActionCommunicator\", {query: action}, (ack) => {\r\n                /// on emit success remove locally saved action\r\n                this.removeOutPushAction(ack);\r\n                console.log(\"EMIT PUSH ACK: \")\r\n                console.log(ack);\r\n                switch(ack.pushType){\r\n                    case MyPush.MESSAGE:\r\n                        ack.pushType = MyPush.ACK_MESSAGE;\r\n                        ack.payload.isNewId = ack._id;\r\n                        ack.payload.status = MyMessage.SENT\r\n                        console.log(\"ACK SENDING >>>\")\r\n                        console.log(ack)\r\n                        dataRouter(ack);\r\n                        break;\r\n                   \r\n                        \r\n                }\r\n            })\r\n        }\r\n\r\n        this.emitGroupPush = (action) => {\r\n            this.socket.emit(\"onPushGroupActionCommunicator\", {query: action}, (ack) => {\r\n                /// on emit success remove locally saved action\r\n                this.removeOutPushAction(ack);\r\n                console.log(\"EMIT PUSH ACK: \")\r\n                console.log(ack);\r\n                switch(ack.pushType){\r\n                    case MyPush.GROUP_MESSAGE:\r\n                        ack.pushType = MyPush.ACK_GROUP_MESSAGE;\r\n                        ack.payload.isNewId = ack._id;\r\n                        ack.payload.status = MyMessage.SENT\r\n                        console.log(\"ACK SENDING >>>\")\r\n                        console.log(ack)\r\n                        dataRouter(ack);\r\n                        break;\r\n                   \r\n                        \r\n                }\r\n            })\r\n        }\r\n        this.sendPushAction = (pushType, payload, to) => {\r\n            //// save action locally\r\n            if(this.communicatorContext.socketConnected){ \r\n                /// ONLINE MODE\r\n                //// create new suspended action\r\n                let actionSuspended = new MyPush([to]).setAttributes(Math.random()*1000*Math.random(), pushType, payload,MyPush.ACTION_STATUS_SUSPENDED  )\r\n                /// push locally\r\n                this.pushLocally(actionSuspended);\r\n                /// route to reducer\r\n                dataRouter(actionSuspended);\r\n                /// emit to peer \r\n                this.emitPush(actionSuspended)\r\n                // this.socket.emit(\"onPushCommunicator\", {query: actionSuspended}, (ack) => {\r\n                //     /// route ack to reducer\r\n                   \r\n                // })\r\n            }else{\r\n                /// OFFLINE MODE\r\n                //// create new action \r\n                let actionNew = new MyPush([to]).setAttributes(Math.random()*1000*Math.random(), pushType, payload,MyPush.ACTION_STATUS_NEW )\r\n                /// push locally to send when get online\r\n                this.pushLocally(actionNew);\r\n                /// route to reducer\r\n                dataRouter(actionNew);\r\n            }\r\n        }\r\n        this.sendPushGroupAction = (pushType, payload, users) => {\r\n            //// save action locally\r\n            if(this.communicatorContext.socketConnected){ \r\n                /// ONLINE MODE\r\n                //// create new suspended action\r\n                let actionSuspended = new MyPush(users).setAttributes(Math.random()*1000*Math.random(), pushType, payload,MyPush.ACTION_STATUS_SUSPENDED  )\r\n                /// push locally\r\n                this.pushLocally(actionSuspended);\r\n                /// route to reducer\r\n                dataRouter(actionSuspended);\r\n                /// emit to peer \r\n                this.emitGroupPush(actionSuspended)\r\n                // this.socket.emit(\"onPushCommunicator\", {query: actionSuspended}, (ack) => {\r\n                //     /// route ack to reducer\r\n                   \r\n                // })\r\n            }else{\r\n                /// OFFLINE MODE\r\n                //// create new action \r\n                let actionNew = new MyPush(users).setAttributes(Math.random()*1000*Math.random(), pushType, payload,MyPush.ACTION_STATUS_NEW )\r\n                /// push locally to send when get online\r\n                this.pushLocally(actionNew);\r\n                /// route to reducer\r\n                dataRouter(actionNew);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n}\r\nexport default PushManager;","import io from \"socket.io-client\"\r\nimport MyMessage from \"./myMessage\";\r\nimport RTCPeerConnectionManager from './RTC/PeerConnectionManager';\r\nimport CallSignalingManager from \"./CALL_SIGNALING/CallSignalingManager\";\r\nimport PushesManager from \"./PushesManager/pushesManager\"\r\nimport { BASEURL } from \"../proxy\";\r\nimport MyPush from \"./PushesManager/myPush\";\r\nclass Communicator {\r\n    constructor(){\r\n        this.socket = null\r\n        this.dataHandler = null;\r\n        this.ackEmitter = null;\r\n        this.ackEmitters = null;\r\n        this.onConnectEmitter = null;\r\n        this.onDisconnectEmitter = null; \r\n\r\n        this.cid = null;\r\n        this.socketConnected = false\r\n        this.rtcConfig = {iceServers: [\r\n          {url: \"stun:stun.l.google.com:19302\"}, \r\n          {\r\n            urls: 'turn:turn.msgsafe.io:443?transport=tcp',\r\n            username: 'a9a2b514',\r\n            credential: '00163e7826d6'\r\n          }\r\n          ]}\r\n        // this.rtcConfig = {\r\n        //   iceServers: [{url: \"stun:stun.l.google.com:19302\"},{\r\n        //     \"username\": \"cF-nwxK2kqrzEVXG3gpNay0WXXoLbeCwv_-EuL-Tsw1J_PZDQAvUazFKwoEnsJ9NAAAAAF68ZvFhdGFuaW9mb3g=\",\r\n        //     \"urls\": [\r\n        //         \"stun:ss-turn2.xirsys.com\",\r\n        //         \"turn:ss-turn2.xirsys.com:80?transport=udp\",\r\n        //         \"turn:ss-turn2.xirsys.com:3478?transport=udp\",\r\n        //         \"turn:ss-turn2.xirsys.com:80?transport=tcp\",\r\n        //         \"turn:ss-turn2.xirsys.com:3478?transport=tcp\",\r\n        //         \"turns:ss-turn2.xirsys.com:443?transport=tcp\",\r\n        //         \"turns:ss-turn2.xirsys.com:5349?transport=tcp\"\r\n        //     ],\r\n        //     \"credential\": \"f51ef064-9560-11ea-93a3-0242ac140004\"\r\n        // }]\r\n        // }\r\n\r\n\r\n\r\n        ///// Video/Audio chat variables \r\n        this.callSignalingManager = false;\r\n\r\n        this.videoChatContext = null; \r\n        //// Initializing rtcConnectionManager on conncting to socket at this.socket.on(\"connect\"() => initizligin) \r\n        this.rtcConnectionManager = null\r\n      \r\n        //// push actions managers \r\n        this.pushActionsManager = null;\r\n\r\n\r\n\r\n        this.connect = (cid, _dataHandler, _ackEmitter, _ackEmitters, _onConnect = null, _onDisconnect = null ) => {\r\n            this.cid = cid;\r\n            this.dataHandler = _dataHandler;\r\n            this.ackEmitter = _ackEmitter;\r\n            this.ackEmitters = _ackEmitters;\r\n            this.onConnectEmitter = _onConnect;\r\n            this.onDisconnectEmitter = _onDisconnect;\r\n            this.socket = io(BASEURL, {query: {cid: cid}})\r\n            this.rtcConnectionManager = new RTCPeerConnectionManager(this, this.socket) ;\r\n            this.callSignalingManager = new CallSignalingManager(this.socket, this);\r\n            this.pushActionsManager = new PushesManager(this.cid, this.socket, this);\r\n            \r\n\r\n\r\n            this.send = (message) => {\r\n                this.pushActionsManager.sendPushAction(MyPush.MESSAGE, message, message.to )\r\n            }\r\n\r\n            this.sendGroupMessage = (message, users) => {\r\n              this.pushActionsManager.sendPushGroupAction(MyPush.GROUP_MESSAGE, message, users);\r\n            }\r\n\r\n\r\n\r\n\r\n            this.markSeen = (messages, recieverCid, chatId=\"\", users=[]) => {\r\n                // this.socket.emit(\"onMarkSeenSent\", {query: {messages: messages, to: recieverCid, from: this.cid, chatId: chatId}}, (ack) => {\r\n                //     this.ackEmitters(messages, recieverCid ,MyMessage.SEEN);\r\n                // })\r\n                console.log(\"MARK SEEN: \")\r\n                if(messages.length > 0){\r\n                  // if(messages[0].chatType === \"group\"){\r\n                  //   console.log(\"GROUP:\")\r\n                  //   messages.forEach(msg => {\r\n                  //     this.pushActionsManager.sendPushGroupAction(MyPush.ACK_GROUP_MESSAGE, {_id: msg._id, from: msg.to, to: msg.from, chatId: chatId ,status: MyMessage.SEEN }, users )\r\n                  //   });\r\n                  // }else{\r\n                    messages.forEach(msg => {\r\n                      this.pushActionsManager.sendPushAction(MyPush.ACK_MESSAGE, {_id: msg._id, from: msg.to, to: msg.from ,status: MyMessage.SEEN }, recieverCid)\r\n                    });\r\n                  // }\r\n                }\r\n            }\r\n            \r\n            this.markSeenGroupMessage = (messages, recieverCid, chatId=\"\", users=[]) => {\r\n              console.log(\"MARK SEEN: \")\r\n              if(messages.length > 0){\r\n                  console.log(\"GROUP:\")\r\n                  messages.forEach(msg => {\r\n                    this.pushActionsManager.sendPushGroupAction(MyPush.ACK_GROUP_MESSAGE, {_id: msg._id, from: msg.to, to: msg.from, chatId: chatId ,status: MyMessage.SEEN }, users )\r\n                  });\r\n              }\r\n          }\r\n\r\n            // this.sendOnRecieveAck = msg => {\r\n            //   this.socket.emit(\"onRecievedAckSend\", {query: {message: {_id: msg._id, to: msg.to, from: msg.from}}})\r\n            //   this.ackEmitter(msg, MyMessage.RECIEVED)\r\n            // }\r\n          \r\n            // this.socket.on(\"onRecieveMessage\", (res) => {\r\n            //     console.log(\"onRecieve: called\")\r\n            //     let query = res.query;\r\n            //     this.dataHandler(query.message);\r\n            //     this.sendOnRecieveAck(query.message)\r\n            //     // this.socket.emit(\"onRecievedAckSend\", {query: {message: {_id: query.message._id, to: query.message.to, from: query.message.from}}})\r\n            //     // this.dataHandler(query.message);\r\n            // })\r\n            \r\n            // this.socket.on(\"onRecievedAck\", (res) => {\r\n            //     this.ackEmitter(res.query.message, MyMessage.RECIEVED)\r\n            // })\r\n          \r\n            // this.socket.on(\"onMarkSeen\", (res) => {\r\n            //     this.ackEmitters(res.query.messages, res.query.from, MyMessage.SEEN)\r\n            // })\r\n          \r\n            ///////////////////////////////////////////////////////////////////////////////\r\n            ////////// PUSHES ROUTERS ////////////////\r\n            //////////////////////////////////////////////////////////////////////////////\r\n\r\n            this.dataRouter = (action) => {\r\n\r\n            }\r\n            this.ackRouter = (action) => {\r\n\r\n            }\r\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          //////// Connections Managers ////////////////////////////////////////////////////\r\n          \r\n            this.socket.on(\"connect\", () => {\r\n                console.log(\"STATUS: CONNECTED\")\r\n                this.pushActionsManager.loadPushes()\r\n                this.socketConnected = true;\r\n                this.pushActionsManager.onNetworkConnected() \r\n                if(this.onConnectEmitter) this.onConnectEmitter();\r\n\r\n                // this.onDisconnectEmitter? this.onDisconnectEmitter() :false;\r\n                // this.videoChatContext.setState({isConnected: true})\r\n                // this.rtcConnectionManager = new RTCPeerConnectionManager(this, this.socket) ;\r\n            })\r\n\r\n            this.socket.on(\"connect_error\", (error) => {\r\n                console.log(\"CONNECT: ERROR\")\r\n                if(this.onDisconnectEmitter) this.onDisconnectEmitter();\r\n                this.socketConnected = false;\r\n                console.log(error);\r\n            })\r\n\r\n            this.socket.on(\"connect_timeout\", (timeout) => {\r\n                console.log(\"CONNECT: TIMEOUT\");\r\n                console.log(timeout);\r\n                this.socketConnected = false;\r\n\r\n            })\r\n\r\n            this.socket.on('disconnect', (reason) => {\r\n              if(this.onDisconnectEmitter) this.onDisconnectEmitter();\r\n              this.socketConnected = false;\r\n\r\n                if (reason === 'io server disconnect') {\r\n                  // the disconnection was initiated by the server, you need to reconnect manually\r\n                  this.socket.connect();\r\n                }\r\n                // else the socket will automatically try to reconnect\r\n              });\r\n\r\n              this.socket.on('reconnect', (attemptNumber) => {\r\n                console.log(\"SOCKET: RECONNECTED\")\r\n                console.log(attemptNumber)\r\n                this.socketConnected = false;\r\n\r\n              });\r\n\r\n\r\n              this.socket.on('reconnect_attempt', (attemptNumber) => {\r\n                console.log(\"RECONNECT ATTEMPTS\")\r\n                this.socketConnected = false;\r\n              \r\n                console.log(attemptNumber);\r\n              });\r\n\r\n\r\n\r\n              this.socket.on('reconnecting', (attemptNumber) => {\r\n                console.log(\"RECONNECTING...\")\r\n                this.socketConnected = false;\r\n\r\n              });\r\n\r\n              this.socket.on('reconnect_error', (error) => {\r\n                console.log(\"RECONNECT ERROR\")\r\n                this.socketConnected = false;\r\n\r\n              });\r\n           \r\n        }\r\n\r\n\r\n        //////// Video Chat Listners \r\n\r\n\r\n        //////// EXPOSED FUNCTIONS /////// \r\n        this.initializeSignaling = (to) => {\r\n          this.callSignalingManager.initializeSingnaling(to)\r\n        }\r\n        this.acceptCall = () => {\r\n          this.callSignalingManager.acceptSignaling()\r\n        }\r\n        this.setChatContext = (context) => {\r\n          this.videoChatContext = context;\r\n        } \r\n        this.endCallSignal = () => {\r\n          this.callSignalingManager.endCallSingnal()\r\n        }\r\n\r\n        /////////////////  /////////////\r\n        ///// DONT USE BELOW FUNCTIONS \r\n\r\n        this.createRTCConnection = (recieverId) => {\r\n          this.rtcConnectionManager.createConnection(this.cid, recieverId, this.rtcConfig)\r\n          //////// SHOW WINDOW \r\n        }\r\n\r\n        this.startRTCCall = (isVideo) => {\r\n          this.rtcConnectionManager.startCall(isVideo);\r\n        }\r\n      \r\n\r\n        this.setRTCChannelEnabled = (kind, value) => {\r\n          this.rtcConnectionManager.setChannelEnabled(kind, value);\r\n        }\r\n        this.destroyRTCConnection = () => {\r\n          //// TODO : \r\n          /// communicate partner of this.\r\n          this.rtcConnectionManager.destroyConnection();\r\n        }\r\n\r\n\r\n        this.handelOnAddRemoteStream = (remoteStream) => {\r\n          //////// send it to chatContext\r\n          this.videoChatContext.setState({peerStream: remoteStream});\r\n        }\r\n        this.handelOnAddLocalStream = (localStream) => {\r\n          //////// send it to context\r\n          this.videoChatContext.setState({localStream: localStream});\r\n        }\r\n        this.handelOnAddCallStatus = (status) => {\r\n          //// CALL status from Class: CallStatus\r\n          console.log(\"CALL STATUS \"+ status)\r\n          this.videoChatContext.setState({callStatus: status});\r\n        }\r\n\r\n\r\n    \r\n\r\n\r\n      \r\n    }\r\n}\r\n\r\nexport default Communicator;","import MyCommunicatorObj from './communicator';\r\nimport store from '../store';\r\nimport { USER_CHAT_HANDLE_SELECTD, MSG_ACK_ACTION, \r\n     MSGS_ACK_ACTION ,USER_CHAT_DATA_COLLECTOR, USER_CHAT_SENT_DATA_COLLECTOR,\r\n      HANDLE_REMOVE_CHAT, SET_CHAT_LIST_CM, INITIALIZE_CHAT_BETWEEN_CM } from './types';\r\nimport MyMessage from './myMessage';\r\nimport axios from 'axios';\r\nimport MyUser from '../components/businessLogic/myUser';\r\nimport MySingleUserChat from './mySingleUserChat';\r\nimport MyGroupChat from './myGroupChat';\r\nimport MyPushesManagerObj from './PushesManager/pushesManager';\r\n// import PeerConnection from '../RTC/PeerConnection';\r\nexport const MyCommunicator = new MyCommunicatorObj();\r\nlet MyPushesManager = null;\r\n\r\n\r\nexport const configs =  [\r\n    {\r\n    id:1, \r\n    selected: false,\r\n    value: {iceServers: [\r\n      {urls: \"stun:stun.l.google.com:19302\"}, \r\n      {\r\n          urls: \"turn:numb.viagenie.ca\", \r\n          username: \"ata.mirza40@gmail.com\", \r\n          credential: \"ataMirza12345_\"\r\n      }\r\n      ]}\r\n    }, \r\n    {\r\n      id: 2, \r\n      selected:false,\r\n      value: {iceServers: [\r\n        {url: \"stun:stun.l.google.com:19302\"}\r\n        ]}\r\n    }, \r\n    {\r\n      id:3, \r\n      selected:false,\r\n      value:{iceServers: [\r\n        {url: \"stun:stun.l.google.com:19302\"}, \r\n        {\r\n          urls: 'turn:turn.msgsafe.io:443?transport=tcp',\r\n          username: 'a9a2b514',\r\n          credential: '00163e7826d6'\r\n        }\r\n        ]}\r\n    }, \r\n    {\r\n      id: 4, \r\n      selected:false, \r\n      value: {\r\n        iceServers: [\r\n          {url: \"stun:stun.l.google.com:19302\"}, \r\n          {\r\n            url: 'turn:192.158.29.39:3478?transport=udp',\r\n            credential: 'JZEOEt2V3Qb0y27GRntt2u2PAYA=',\r\n            username: '28224511:1379330808'\r\n          }\r\n        ]\r\n      }\r\n    },\r\n    {\r\n      id: 5, \r\n      selected:false, \r\n      value: {\r\n        iceServers: [\r\n          {url: \"stun:stun.l.google.com:19302\"}, \r\n          {\r\n            \"urls\": [\r\n            \"turn:13.250.13.83:3478?transport=udp\"\r\n            ],\r\n            \"username\": \"YzYNCouZM1mhqhmseWk6\",\r\n            \"credential\": \"YzYNCouZM1mhqhmseWk6\"\r\n            }\r\n        ]\r\n      }\r\n    }, \r\n    {\r\n      id:6, \r\n      selected: false,\r\n      value: {iceServers: [\r\n        {urls: \"stun:stun.l.google.com:19302\"}, \r\n        {\r\n            urls: \"turn:numb.viagenie.ca\", \r\n            username: \"ata.mirza40@gmail.com\", \r\n            credential: \"ataMirza12345_\"\r\n        }\r\n        ], iceTransports: \"relay\"\r\n       }\r\n      }, \r\n    {\r\n      id: 7, \r\n      selected: false, \r\n      value: {iceServers: [\r\n        {url: \"stun:stun.l.google.com:19302\"}, \r\n        {\r\n        urls: 'turn:turn.msgsafe.io:443?transport=tcp',\r\n        username: 'a9a2b514',\r\n        credential: '00163e7826d6'\r\n      }]}\r\n    }, \r\n    {\r\n      id: 8, \r\n      selected: false, \r\n      value: {iceServers: [\r\n        {\r\n        urls: 'turn:turn.msgsafe.io:443?transport=tcp',\r\n        username: 'a9a2b514',\r\n        credential: '00163e7826d6'\r\n      }]}\r\n    }, \r\n    {\r\n        id: 9, \r\n        selected: true,\r\n        value: {\r\n            iceServers: [{\r\n                username: \"OGd17N2DDOJ-KiTrR_gUGi6E-YLfycQvcn76UfG4vQt_GqeQ4VxEJyVv8gMfPl_AAAAAAF68WnZhdGFuaW9mb3g=\",\r\n                urls: [\r\n                    \"stun:ss-turn2.xirsys.com\",\r\n                    \"turn:ss-turn2.xirsys.com:80?transport=udp\",\r\n                    \"turn:ss-turn2.xirsys.com:3478?transport=udp\",\r\n                    \"turn:ss-turn2.xirsys.com:80?transport=tcp\",\r\n                    \"turn:ss-turn2.xirsys.com:3478?transport=tcp\",\r\n                    \"turns:ss-turn2.xirsys.com:443?transport=tcp\",\r\n                    \"turns:ss-turn2.xirsys.com:5349?transport=tcp\"\r\n                ],\r\n                credential: \"85073860-9559-11ea-9ee3-0242ac140004\"\r\n            }]\r\n        }\r\n    }\r\n]\r\n\r\n\r\nconst MyGroupChatCommunicators = [];\r\nlet peerConnection = null;\r\nexport const loadAllChats = () => {\r\n\r\n\r\n\r\n    axios.post(\"http://localhost:5000/API/user/auth/get-all\")\r\n        .then(res =>{\r\n            if(res.data.success){\r\n                let chatData = res.data.users;\r\n                let myChat = [];\r\n                for (let index = 0; index < chatData.length; index++) {\r\n                    const singleChat = chatData[index];\r\n                    myChat.push(new MySingleUserChat(new MyUser().setValue(singleChat)).setAttributes([], false ))\r\n                }\r\n           \r\n                store.dispatch({\r\n                    type: SET_CHAT_LIST_CM, \r\n                    payload: {chat: myChat}\r\n                })\r\n            }else{\r\n                console.log(\"ERROR SUCCESS:FALSE\");\r\n                console.log(res.data.error);\r\n            }\r\n        }).catch(err =>{\r\n            console.log(\"CATCH: API, NETWORK ERROR\")\r\n            console.log(err);\r\n        })\r\n}\r\n\r\nexport const prepareChat =  (userId) => {\r\n    axios.post(\"http://localhost:5000/API/user/chat/user-chat\", {userId: userId})\r\n        .then(res =>{\r\n            if(res.data.success){\r\n                let incomingChat = res.data.user.userChat;\r\n                let myChat = [...store.getState().ChatReducer.Chat];\r\n                let newChat = [];\r\n\r\n                //// merging \r\n                for (let iIndex = 0; iIndex < incomingChat.length; iIndex++) {\r\n                    const ic = incomingChat[iIndex];\r\n                    let icfound = false;\r\n                    for (let mIndex = 0; mIndex < myChat.length; mIndex++) {\r\n                        const mc = myChat[mIndex];\r\n                        \r\n                        if(mc.cid === ic.cid){\r\n                            icfound = true;\r\n                            mc._id = ic._id;\r\n                            mc.messages = ic.messages;\r\n                            mc.chatStatus = MySingleUserChat.USER_CHAT_FOUND;\r\n                            // mc.title = ic.title;\r\n                            newChat.push(mc);\r\n                            break;\r\n                        }\r\n                    }\r\n                    if(!icfound){\r\n                        ic.chatStatus = MySingleUserChat.USER_CHAT_FOUND;\r\n                        if(ic.chatType === \"group\"){\r\n                            newChat.push( new MyGroupChat(ic._id).setValue(ic) );\r\n                        }else{\r\n                            // newChat.push(ic);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                for (let mmIndex = 0; mmIndex < myChat.length; mmIndex++) {\r\n                    const mmc = myChat[mmIndex];\r\n                    let mmcfound = false;\r\n                    for (let iiIndex = 0; iiIndex < incomingChat.length; iiIndex++) {\r\n                        const iic = incomingChat[iiIndex];\r\n                        if(mmc.cid === iic.cid){\r\n                            mmcfound = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if(!mmcfound){\r\n                        newChat.push(mmc);\r\n                    }\r\n                }\r\n            \r\n\r\n            \r\n                    store.dispatch({\r\n                        type: SET_CHAT_LIST_CM, \r\n                        payload: {chat: newChat}\r\n                    })\r\n            }else{\r\n            }\r\n        }).catch(err => {\r\n            console.log(\"CATCH: Error\");\r\n            console.log(err);\r\n        })\r\n}\r\n\r\nexport const initializeChat = (userId, friendId) => {\r\n    axios.post(\"http://localhost:5000/API/user/chat/initialize-chat\", {userId: userId, friendId: friendId})\r\n        .then(res => {\r\n            if(res.data.success){\r\n                store.dispatch({\r\n                    type: INITIALIZE_CHAT_BETWEEN_CM,\r\n                    payload: {friend: res.data.friend, chat: res.data.chat} \r\n                })\r\n            }else{\r\n                console.log(\"INIT CHAT SUCCESS: FALSE\")\r\n                console.log(res.data.error)\r\n            }\r\n        }).catch(err => {\r\n            console.log(\"CATCH: INITIALIZE CHAT\")\r\n            console.log(err);\r\n        })\r\n}\r\n\r\nexport const setUserChatSelected = (cid) => {\r\n    store.dispatch({\r\n        type: USER_CHAT_HANDLE_SELECTD, \r\n        payload: {cid: cid}\r\n    })\r\n}\r\nexport const logout = () => {\r\n    store.dispatch({\r\n        type: \"LOGOUT\"\r\n    })\r\n}\r\n/////////////////////////////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////// PRIVATE DATA EMITTERS //////////////////////////////////\r\n/////////////////////////////////////////////////////////////////////////////////////////////\r\nconst ackEmitter = (message, status) => {\r\n    store.dispatch({\r\n        type: MSG_ACK_ACTION, \r\n        payload: {message: message, status}\r\n    })\r\n}\r\nconst ackEmitters = (messages, cid ,status) => {\r\n    store.dispatch({\r\n        type: MSGS_ACK_ACTION, \r\n        payload: {messages: messages, cid:cid ,status:status}\r\n    })\r\n}\r\n\r\nconst dataHandler = (message) => {\r\n  store.dispatch({\r\n      type: USER_CHAT_DATA_COLLECTOR, \r\n      payload: {message: message}\r\n  })\r\n}\r\n\r\nconst sentDataHandler = (message) => {\r\n     store.dispatch({\r\n         type: USER_CHAT_SENT_DATA_COLLECTOR, \r\n         payload: {message: message}\r\n     })\r\n   }\r\n\r\nconst handleOnConnection = () => {\r\n    \r\n}\r\nconst handleOnDisconnect = () => {\r\n\r\n}\r\n//////////------------------------------------------------------------------------/////////////\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////// MESSAGES MANAGER //////////////////////////////////////\r\n/////////////////////////////////////////////////////////////////////////////////////////////////\r\nexport const connectChat = (cid) => {\r\n    MyCommunicator.connect(cid, dataHandler, ackEmitter, ackEmitters, handleOnConnection, handleOnDisconnect);\r\n   \r\n\r\n\r\n    // vvvv REMOVE IN FUTURE vvvvv  \r\n    store.dispatch({\r\n        type: HANDLE_REMOVE_CHAT, \r\n        payload: {cid: cid}\r\n    })\r\n}\r\nexport const sendMessage = (message, chatId, users=[]) => {\r\n    if(message.chatType === \"single\"){\r\n        MyCommunicator.send(message, chatId)\r\n    }else{\r\n        MyCommunicator.sendGroupMessage(message, users);\r\n    }\r\n    sentDataHandler(message)\r\n}\r\n// export const sendGroupMessage = (message, users) => {\r\n    \r\n//     sentDataHandler(message);\r\n// }\r\n\r\n\r\n\r\n\r\nexport const markSeen = (cid, chatId) => {\r\n    \r\n    let chat = store.getState().ChatReducer.Chat;\r\n    let cIndex = chat.findIndex(c => c.cid === cid);\r\n    if(cIndex === -1){\r\n        cIndex = chat.findIndex(c => c._id === chatId);\r\n    }\r\n    if(cIndex >= 0){\r\n      \r\n        let cusers = [];\r\n        if(chat[cIndex].chatType===\"group\"){\r\n            let messages = chat[cIndex].messages.filter(m => ((m.status === MyMessage.SENDING || m.status === MyMessage.RECIEVED || m.status === MyMessage.SENT) && m.from === cid ))\r\n            for (let index = 0; index < messages.length; index++) {\r\n                 messages[index].status = MyMessage.SEEN;\r\n                 messages[index].seenTimeDate = Date.now();\r\n            }\r\n            for (let index = 0; index < chat[cIndex].users.length; index++) {\r\n                const u = chat[cIndex].users[index];\r\n                cusers.push(u._id);\r\n            }\r\n            MyCommunicator.markSeenGroupMessage(messages, cid, chatId, cusers );\r\n\r\n        }else{\r\n            let messages = chat[cIndex].messages.filter(m => ((m.status === MyMessage.SENDING || m.status === MyMessage.RECIEVED || m.status === MyMessage.SENT) && m.from === cid ))\r\n            for (let index = 0; index < messages.length; index++) {\r\n                 messages[index].status = MyMessage.SEEN;\r\n                 messages[index].seenTimeDate = Date.now();\r\n            }\r\n            MyCommunicator.markSeen(messages, cid, chatId, cusers );\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n////// Add Group Chat Listner\r\nexport const AddGroupChatListner = (gcid) => {\r\n    MyGroupChatCommunicators.push(new MyCommunicatorObj().connect(gcid, dataHandler, ackEmitter, ackEmitters));\r\n}\r\n//////////------------------------------------------------------------------------/////////////\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n////////////////////////////////////////////////////////////////////\r\n///////////////////// VIDEO CHAT ////////////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n\r\nexport const setSelected = (id) => {\r\n    // let configsn = [configs]\r\n    for (let index = 0; index < configs.length; index++) {\r\n      const c = configs[index];\r\n      if(c.id === id){\r\n        configs[index].selected = true;\r\n      }else{\r\n        configs[index].selected = false;\r\n      }\r\n    }\r\n    // configs =  configsn;\r\n    return configs;\r\n  }\r\n\r\nconst getSelected = () => {\r\n    return configs.filter(c => c.selected === true)[0].value;\r\n  }\r\n\r\n \r\n//   export const createRTCConnection = (context,myId, peerId) => {\r\n//     MyCommunicator.rtcConnectionManager.createConnection(myId, peerId, getSelected())\r\n//     MyCommunicator.videoChatContext =context\r\n// }\r\n\r\n\r\n\r\n\r\n// export const startRTCCall = (context, myId, reciever) => {\r\n//     MyCommunicator.createRTCConnection(context, myId, reciever,getSelected() )\r\n// }\r\n\r\n// export const setCallChannelStates = (kind, value) => {\r\n    //     peerConnection.setChannelEnabled(kind, !this.state.isMute);\r\n    // }\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    //////////////////////////\r\n    \r\n\r\nexport const onConnectEmitter = (onConnectEmitter) => {\r\n    MyCommunicator.onConnectEmitter = onConnectEmitter;\r\n}\r\n    \r\nexport const initiazlizeRTCCall = (to) => {\r\n       MyCommunicator.initializeSignaling( to);\r\n}\r\nexport const answerRTCCall = () => {\r\n  console.log(\"ANSWER CALL\")\r\n  MyCommunicator.acceptCall()\r\n}\r\nexport const setRTCCallContext = (context) => {\r\n    MyCommunicator.setChatContext(context)\r\n}\r\nexport const endRTCCall = () => {\r\n    MyCommunicator.destroyRTCConnection();\r\n    MyCommunicator.endCallSignal()\r\n}\r\n//////////------------------------------------------------------------------------/////////////\r\n\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////\r\n/////////////////////////////////// PUSHES MANAGER ////////////////////////////////////////////\r\n///////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n// export const loadPushes = () => {\r\n//     MyPushesManager.loadPushes();\r\n// }\r\n\r\n\r\n//////////------------------------------------------------------------------------/////////////\r\n","export const setUser = (user) => dispatch =>{\r\n    dispatch({\r\n        type: \"SET_USER\", \r\n        payload: {user: user}\r\n    })\r\n}","import React from 'react';\r\nimport TextMessage from './textMessage';\r\nimport { sendMessage, markSeen, initializeChat} from '../RTCHAT'\r\nimport MyMessage from '../RTCHAT/myMessage';\r\nimport {connect} from 'react-redux';\r\nimport {setUser } from '../store/actions/authActions';\r\nimport MySingleUserChat from '../RTCHAT/mySingleUserChat';\r\nimport base64Img from 'base64-img';\r\nconst PRIMARY = \"#5BBC93\"\r\nconst SECONDRY = \"white\";\r\n\r\n\r\nclass SingleChat extends React.Component{\r\n  state={\r\n   \r\n\r\n    messageBody: \"\", \r\n    file: null,\r\n    chat: []\r\n  }\r\n\r\n  handleSendMesage = (friend, chatId ,cid, chatType, users) => {\r\n      this.setState({messageBody: \"\"})\r\n      let message = null;\r\n      let usersIds = [];\r\n      if(chatType === \"group\"){\r\n        for (let index = 0; index < users.length; index++) {\r\n          const u = users[index];\r\n          usersIds.push(u._id);\r\n        }\r\n        message =  new MyMessage().setAttributes(cid, friend, this.state.messageBody, chatId).setAsGroupMessage()\r\n      }else{\r\n        message =  new MyMessage().setAttributes(cid, friend, this.state.messageBody)\r\n      }\r\n      sendMessage(message, chatId, usersIds)\r\n  }\r\n\r\n\r\n  handleSendImage = (friend, chatId ,cid) => {\r\n    console.log(this.state.file)\r\n    const reader = new FileReader();\r\n    let image = \"\"\r\n    reader.readAsDataURL(this.state.file);\r\n    reader.onload = (e) => {\r\n      console.log(\"onload\")\r\n      console.log(e);\r\n      console.log(reader.result)\r\n      image = reader.result;\r\n      // image.slice()\r\n      //  let  message =  new MyMessage().setAttributes(cid, friend, reader.result)\r\n      //  message.type = \"IMAGE\";\r\n      //  sendMessage(message, chatId)\r\n\r\n    }\r\n    reader.onerror = (err => {\r\n      console.log(\"ERROR ON FILE \")\r\n      console.log(err);\r\n    })\r\n    // base64Img.base64(this.state.file, (err, data) => {\r\n    //   console.log(err);\r\n    //   console.log(data);\r\n    // })\r\n  }\r\n\r\n  render(){\r\n      const userChat = this.props.userChat.filter(uc => uc.selected === true)[0];\r\n     \r\n       if(!userChat){\r\n           return false\r\n       }\r\n       if(userChat.chatStatus !== MySingleUserChat.USER_CHAT_FOUND){\r\n          return (\r\n            <div>\r\n                <button onClick={() => initializeChat( this.props.user._id, userChat.user._id)}>Initialize Chat with {userChat.title}</button>\r\n            </div>\r\n          )\r\n       }\r\n  return (\r\n    <div style={{width: \"100%\", height: \"100%\"}}>\r\n       <div style={{width: \"100%\",  height: 100, backgroundColor: PRIMARY}}>\r\n          {/* <div style={{width: \"100%\"}}>\r\n              {\r\n                  this.props.userChat.map(uc => \r\n                  <button onClick={() => this.handleConnect(uc)} style={{backgroundColor: uc.reserved? PRIMARY: SECONDRY, border: \"2px solid \"+uc.reserved? SECONDRY: PRIMARY, borderRadius: 30 }}>\r\n                        <span style={{color: uc.reserved? SECONDRY :PRIMARY, fontSize: 18}}>{uc.title}</span>\r\n                  </button>)\r\n              }\r\n          </div> */}\r\n            <span style={{fontSize: 30, color: \"white\", marginLeft: 20}}>{userChat.title}</span>\r\n          {/* <input value={this.state.uid} onChange={(e) => this.setState({uid: e.target.value})} style={{borderRadius: 30, padding: 5, color: PRIMARY}} placeholder=\"your name\"/>\r\n          <input value={this.state.friend} onChange={(e) => this.setState({friend: e.target.value})} style={{borderRadius: 30, padding: 5, color: PRIMARY}} placeholder=\"frient name\"/> */}\r\n\r\n          \r\n       </div>\r\n       <div style={{height: 550, width: \"100%\", overflowY: \"scroll\", backgroundColor: \"white\"}}>\r\n\r\n        {\r\n            userChat.messages.map((m, index) => <div key={index}><TextMessage message={m} cid={this.props.user._id}/><br/></div>)\r\n        }\r\n\r\n\r\n\r\n       </div>\r\n       <div style={{width: \"100%\", height: 70, backgroundColor: SECONDRY}}>\r\n     \r\n     \r\n        <input onFocus={() => markSeen(userChat.cid, userChat._id)} value={this.state.messageBody} onChange={(e) => this.setState({messageBody: e.target.value})} style={{borderRadius: 30, padding: 5, color: PRIMARY, width: \"70%\", height: 55, fontSize: 25}} placeholder=\"frient name\"/>\r\n      \r\n      \r\n        {/* <button onClick={() => this.handleSendImage(userChat.cid, userChat._id ,this.props.user._id)} style={{backgroundColor: PRIMARY, border: \"2px solid \"+SECONDRY, borderRadius: 30, width: \"20%\", height: 55 }}>\r\n          <span style={{color: SECONDRY, fontSize: 18}}>SEND</span>\r\n        </button> */}\r\n        <button onClick={() => this.handleSendMesage(userChat.cid, userChat._id ,this.props.user._id, userChat.chatType, userChat.users)} style={{backgroundColor: PRIMARY, border: \"2px solid \"+SECONDRY, borderRadius: 30, width: \"20%\", height: 55 }}>\r\n          <span style={{color: SECONDRY, fontSize: 18}}>SEND</span>\r\n        </button>\r\n        <input onChange={(e) => this.setState({file: e.target.files[0]})} type=\"file\"/>\r\n\r\n       </div>\r\n    </div>\r\n  );\r\n  }\r\n}\r\n\r\nexport default connect(null, {setUser})(SingleChat);\r\n","import React, { Component } from 'react';\r\nimport {setUserChatSelected} from '../RTCHAT'\r\nconst PRIMARY = \"#5BBC93\"\r\n// const SECONDRY = \"white\";\r\n\r\nclass SingleUserChat extends Component {\r\n    state = {  }\r\n    render() { \r\n        const uc = this.props.singleChat;\r\n        const message = uc.messages.length > 0 ? uc.messages[uc.messages.length-1]: false\r\n        const unseenCount = uc.messages.unseenCount;\r\n        return ( \r\n            <div onClick={() => setUserChatSelected(uc.cid)} style={{ cursor:\"pointer\",width: \"100%\", height: 100, backgroundColor: uc.selected? \"#EBEBEB\": \"white\", borderBottom: \"2px solid #f0f0f0\" }}>\r\n              <div align=\"center\" style={{ width: \"30%\", height: \"100%\" ,float:\"left\" ,borderRadius: 50, border: \"1px solid #f0f0f0\"}}>\r\n               { unseenCount > 0 ? <div align=\"center\"  style={{ marginTop:\"40%\" ,zIndex: 99, backgroundColor: PRIMARY , borderRadius: 50, width: \"25px\", height: \"25px\"}}> \r\n                    {unseenCount}\r\n                </div>: false}\r\n                   \r\n                </div>\r\n              <div style={{width: \"65%\", float: \"right\"}}>\r\n                <span style={{fontSize: 25, width: \"100%\", textAlign: \"center\"}}>{uc.title}</span><br/>\r\n                <span style={{textOverflow: \"ellipsis\"}}>{ message? message.type===\"TEXT\"?message.body :\"IMAGE\" : false}</span>\r\n              </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default SingleUserChat;","import React from 'react';\r\n\r\n// import PeerConnection from '../RTC/PeerConnection';\r\nimport {setRTCCallContext, initiazlizeRTCCall, endRTCCall, answerRTCCall, connectChat, onConnectEmitter} from '../RTCHAT'\r\nimport CallStatus from '../RTCHAT/CALL_SIGNALING/callStatus';\r\nclass VideoCallingScreen extends React.Component {\r\n  \r\n  \r\n  constructor(){\r\n    super()\r\n\r\n    // this.myStream = React.createRef();\r\n    // this.friendStream = React.createRef();\r\n\r\n  this.state = {\r\n    localStream: null, \r\n    peerStream:null, \r\n    isConnected: false, \r\n    myId: \"\", \r\n    friendId: \"\", \r\n    callRunning: false, \r\n    isMute: false,\r\n    connectionState: \"\", \r\n    callStatus: -1,\r\n    configs:  [\r\n      {\r\n      id:1, \r\n      selected: false,\r\n      value: {iceServers: [\r\n        {urls: \"stun:stun.l.google.com:19302\"}, \r\n        {\r\n            urls: \"turn:numb.viagenie.ca\", \r\n            username: \"ata.mirza40@gmail.com\", \r\n            credential: \"ataMirza12345_\"\r\n        }\r\n        ]}\r\n      }, \r\n      {\r\n        id: 2, \r\n        selected:false,\r\n        value: {iceServers: [\r\n          {url: \"stun:stun.l.google.com:19302\"}\r\n          ]}\r\n      }, \r\n      {\r\n        id:3, \r\n        selected:true,\r\n        value:{iceServers: [\r\n          {url: \"stun:stun.l.google.com:19302\"}, \r\n          {\r\n            urls: 'turn:turn.msgsafe.io:443?transport=tcp',\r\n            username: 'a9a2b514',\r\n            credential: '00163e7826d6'\r\n          }\r\n          ]}\r\n      }, \r\n      {\r\n        id: 4, \r\n        selected:false, \r\n        value: {\r\n          iceServers: [\r\n            {url: \"stun:stun.l.google.com:19302\"}, \r\n            {\r\n              url: 'turn:192.158.29.39:3478?transport=udp',\r\n              credential: 'JZEOEt2V3Qb0y27GRntt2u2PAYA=',\r\n              username: '28224511:1379330808'\r\n            }\r\n          ]\r\n        }\r\n      },\r\n      {\r\n        id: 5, \r\n        selected:false, \r\n        value: {\r\n          iceServers: [\r\n            {url: \"stun:stun.l.google.com:19302\"}, \r\n            {\r\n              \"urls\": [\r\n              \"turn:13.250.13.83:3478?transport=udp\"\r\n              ],\r\n              \"username\": \"YzYNCouZM1mhqhmseWk6\",\r\n              \"credential\": \"YzYNCouZM1mhqhmseWk6\"\r\n              }\r\n          ]\r\n        }\r\n      }, \r\n      {\r\n        id:6, \r\n        selected: false,\r\n        value: {iceServers: [\r\n          {urls: \"stun:stun.l.google.com:19302\"}, \r\n          {\r\n              urls: \"turn:numb.viagenie.ca\", \r\n              username: \"ata.mirza40@gmail.com\", \r\n              credential: \"ataMirza12345_\"\r\n          }\r\n          ], iceTransports: \"relay\"\r\n         }\r\n        }, \r\n      {\r\n        id: 7, \r\n        selected: false, \r\n        value: {iceServers: [\r\n          {url: \"stun:stun.l.google.com:19302\"}, \r\n          {\r\n          urls: 'turn:turn.msgsafe.io:443?transport=tcp',\r\n          username: 'a9a2b514',\r\n          credential: '00163e7826d6'\r\n        }]}\r\n      }, \r\n      {\r\n        id: 8, \r\n        selected: false, \r\n        value: {iceServers: [\r\n          {\r\n          urls: 'turn:turn.msgsafe.io:443?transport=tcp',\r\n          username: 'a9a2b514',\r\n          credential: '00163e7826d6'\r\n        }]}\r\n      }\r\n  ]\r\n\r\n  }\r\n  this.peerConnectionA = null\r\n\r\n}\r\n\r\ncomponentDidMount(){\r\n  //// STEP # 1\r\n  setRTCCallContext(this);\r\n}\r\n\r\nconnectUser = () => {\r\n    if(this.state.myId !== \"\" && this.state.friendId !== \"\"){\r\n      console.log(\"STATE\")\r\n      console.log(this.state);\r\n      connectChat( this.state.myId);\r\n      onConnectEmitter(() => {\r\n        this.setState({isConnected: true});\r\n      })\r\n    }else{\r\n      alert(\"Invalid USER or FRIEND Id\")\r\n    }\r\n}\r\n\r\n\r\n\r\nhandleInitiateCall = ( ) => {\r\n    initiazlizeRTCCall(this.state.friendId);\r\n}\r\n\r\nendCall = () => {\r\n    endRTCCall();\r\n}\r\nanswerCall = () => {\r\n  answerRTCCall()\r\nthis.setState({callStatus: CallStatus.ACCEPTED})\r\n}\r\n\r\nsetSelected = (id) => {\r\n  let configs = [...this.state.configs]\r\n  for (let index = 0; index < configs.length; index++) {\r\n    const c = configs[index];\r\n    if(c.id === id){\r\n      configs[index].selected = true;\r\n    }else{\r\n      configs[index].selected = false;\r\n    }\r\n  }\r\n  this.setState({configs: configs})\r\n}\r\n\r\ngetSelected = () => {\r\n  return this.state.configs.filter(c => c.selected === true)[0].value;\r\n}\r\n\r\n\r\n\r\nrender(){\r\n  if(this.myStream){\r\n    this.myStream.srcObject = this.state.localStream; \r\n    this.myStream.volume = 0 ;\r\n    this.myStream.muted = true;\r\n    // this.friendStream.volume = 0;\r\n    // this.friendStream.muted = 0;\r\n    this.friendStream.srcObject = this.state.peerStream;\r\n  }\r\n\r\n  switch(this.state.callStatus){\r\n    case CallStatus.RINGING_REQUEST: \r\n      return (\r\n        <div style={{backgroundColor: \"#363442\" ,width: \"100%\", height: window.innerHeight}}>\r\n          <div align=\"center\" style={{alignSelf: \"center\"}}>\r\n            <div style={{height: 200}}/>\r\n            <span style={{color: \"white\", fontSize: 30}}>Ringing...</span><br/>\r\n            <div style={{height: 50}}/>\r\n            <button onClick={() => this.answerCall()} style={{width: 100, height: 50, backgroundColor: \"green\", border: \"0px\", borderRadius: 50, color: \"white\", fontSize: 20}}>Accept</button>\r\n            <button onClick={() => this.endCall()} style={{width: 100, height: 50, backgroundColor: \"red\", border: \"0px\", borderRadius: 50, color: \"white\", fontSize: 20}}>CANCEL</button>\r\n\r\n          </div>\r\n        </div>\r\n      )\r\n\r\n      case CallStatus.RINGING: \r\n      return (\r\n        <div style={{backgroundColor: \"#363442\" ,width: \"100%\", height: window.innerHeight}}>\r\n          <div align=\"center\" style={{alignSelf: \"center\"}}>\r\n            <div style={{height: 200}}/>\r\n            <span style={{color: \"white\", fontSize: 30}}>Ringing...</span><br/>\r\n            <div style={{height: 50}}/>\r\n            <button onClick={() => this.endCall()} style={{width: 100, height: 50, backgroundColor: \"red\", border: \"0px\", borderRadius: 50, color: \"white\", fontSize: 20}}>CANCEL</button>\r\n          </div>\r\n        </div>\r\n      )\r\n\r\n    case CallStatus.ACCEPTED: \r\n        return (\r\n          <div style={{backgroundColor: \"#363442\" ,width: \"100%\", height: window.innerHeight}}>\r\n             <video ref={e => this.friendStream = e} style={{width: \"100%\" ,height: window.innerHeight, backfaceVisibility:\"visible\"}}  autoPlay />\r\n             <video ref={e => this.myStream = e} style={{width: 200, zIndex: 999  , position:\"absolute\", bottom: 10, right: 10 , height: 200, backfaceVisibility:\"visible\"}}   />\r\n             <button onClick={() => this.endCall()} align=\"center\" style={{position: \"absolute\", backgroundColor:\"red\", width: 60, height: 60, color: \"white\" ,borderRadius: 50, border: \"0px\" ,bottom: 30, left: (window.innerWidth/2)-10}}>END</button>\r\n          </div>\r\n        )\r\n    default: \r\n    return (\r\n      <div className=\"App\">\r\n        <h1 align=\"center\">CHAT APPLICATIONS</h1>\r\n           <div style={{height: 100}}/>\r\n         { this.state.isConnected? \r\n         <React.Fragment>\r\n           <h2 align=\"center\">{`ME: ${this.state.myId}, FRIEND: ${this.state.friendId}`}</h2>\r\n          <div style={{paddingLeft: \"32%\", width: \"100%\"}}>\r\n              <button  style={{width: 300, height: 50, borderRadius: 30, margin:\"auto\"}} onClick={() => this.handleInitiateCall()}>START CALL</button>\r\n          </div>\r\n         </React.Fragment>:  \r\n         <React.Fragment>\r\n         <div style={{width: \"100%\", paddingLeft: \"34%\"}}>\r\n           <span style={{fontSize: 30}}>Me:</span><br/>\r\n           <input style={{borderRadius: 20, padding: 10, fontSize: 20}}  value={this.state.myId}  onChange={(e) => this.setState({myId: e.target.value})}  type=\"text\"/>\r\n          </div>\r\n          <div style={{width: \"100%\",paddingLeft: \"34%\"}}>\r\n           <span style={{fontSize: 30}}>Friend:</span><br/>\r\n           <input style={{borderRadius: 20, padding: 10, fontSize: 20}} value={this.state.friendId}  onChange={(e) => this.setState({friendId: e.target.value})}  type=\"text\"/>\r\n          </div>\r\n          <div style={{height: 30}}/>\r\n\r\n          <div style={{paddingLeft: \"32%\", width: \"100%\"}}>\r\n           <button  style={{width: 300, height: 50, borderRadius: 30, margin:\"auto\"}} onClick={() => this.connectUser()}>Connect</button>\r\n          </div></React.Fragment>}\r\n            {/* <button onClick={() => this.handleInitiateCall()}>Call</button> */}\r\n            {/* <button onClick={() => this.answerCall(true)}>Answer</button> */}\r\n          {/* <video ref={e => this.friendStream = e} style={{width: \"100%\" ,background:\"#f0f0f0\" ,height: 500, backfaceVisibility:\"visible\"}} autoPlay />\r\n          <video ref={e => this.myStream = e} style={{width: 200, zIndex: 999  , position:\"absolute\", bottom: 10, right: 10 , height: 200, backfaceVisibility:\"visible\"}} autoPlay /> */}\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\n}\r\n\r\nexport default VideoCallingScreen;\r\n","import React from 'react';\nimport SingleChat from './components/singleChat'\nimport SingleUserChat from './components/singleUserChat'\nimport {connectChat, prepareChat} from './RTCHAT'\nimport {setUser} from './store/actions/authActions'\nimport {connect} from 'react-redux';\n// import TextMessage from './components/textMessage';\nimport {loadAllChats, logout} from './RTCHAT'\nimport VideoChatScreen from './components/videoChatScreen'\nimport Axios from 'axios';\nimport { BASEURL } from './proxy';\nconst PRIMARY = \"#5BBC93\"\nconst SECONDRY = \"white\";\n\nclass App extends React.Component{\n\n\n  state={\n    calling: true, \n    loginError: \"\", \n    phoneNumber:\"\"\n    \n  }\n\n  handleConnect = (uc) => {\n    connectChat(uc.cid);\n   \n    prepareChat(uc.cid)\n    this.props.setUser(uc.user);\n    \n  }\n  componentDidMount() {\n    if(this.props.user._id !==\"\"){\n      connectChat(this.props.user._id)\n      \n      // prepareChat(this.props.user._id);\n    }else{\n      loadAllChats()\n    }\n  }\n \n\n  loginUser = (phoneNumber) => {\n    if(phoneNumber === \"\"){\n      this.setState({loginError: \"Enter PhoneNumber\"})\n      return false;\n    }\n    Axios.post(BASEURL+ \"/API/user/auth/login\", {phoneNumber})\n      .then(res => {\n        if(res.data.success){\n            prepareChat(res.data.user._id)\n            this.props.setUser(res.data.user);\n            this.setState({loginError: \"Login Success!\"});\n        }else{\n          this.setState({loginError: res.data.msg});\n        }\n      }).catch(err => {\n        console.log(\"CATCH: NETWORK ERROR\")\n        this.setState({loginError: \"CATCH: NETWORK ERROR\"});\n        console.log(err);\n      })\n  }\n\n\n\n\n  render(){\n\n    if(this.state.calling){\n      return (\n        <VideoChatScreen/>\n      )\n    }\n\n  return (\n    \n    <div key={0} style={{width: \"100%\", height: \"100%\"}}>\n     \n\n\n\n     { this.props.user._id !== \"\" ?\n      (<div  key={1} style={{width: \"100%\", height: 700 }}>\n         <div  key={2} style={{width: \"20%\", height: \"100%\", backgroundColor: \"white\", float:\"left\"}}>\n          <div  key={3} style={{width: \"100%\", height: 100, textAlign:\"center\"}}>\n            <span  key={4} style={{fontSize: 25, color: PRIMARY}}>{this.props.user.username}</span>\n            <button onClick={() => {logout(); loadAllChats() }} style={{borderRadius: 10}}>logout</button>\n          </div>\n          {\n            this.props.userChat.map((sc, index) => <SingleUserChat key={index} singleChat={sc}/> )\n          }\n         \n        </div>\n        <div  key={5} style={{width: \"80%\", float:\"right\"}}>\n          <SingleChat  key={6} user={this.props.user} userChat={this.props.userChat} onConnect={this.handleConnectSocket} onSendMessage={this.handleSendMessage}/>\n        </div>\n      </div>) :\n      <div  key={7} align=\"center\" style={{margin:\"auto\", marginTop: 100}}>\n        \n              {/* {\n                  this.props.userChat.map((uc, index) => \n                  <button key={index} onClick={() => this.handleConnect(uc)} style={{ width: \"200px\", height: \"100px\", cursor:\"pointer\" , border: \"2px solid \"+uc.reserved? SECONDRY: PRIMARY, borderRadius: 30 }}>\n                        <span style={{color: uc.reserved? SECONDRY :PRIMARY, fontSize: 18}}>{uc.title}</span>\n                  </button>)\n              } */}\n               <input type=\"text\" placeholder=\"phonenumber\" onChange={e => this.setState({phoneNumber: e.target.value})} value={this.state.phoneNumber}/>\n          <button onClick={() => this.loginUser(this.state.phoneNumber)}> LOGIN </button>\n         <span>{this.state.loginError}</span>\n         \n       </div>}\n    </div>\n   \n  );\n  }\n}\n\nconst mapStateToProps = state => ({\n  userChat: state.ChatReducer.Chat, \n  user: state.AuthReducer.user\n})\nexport default connect(mapStateToProps, {setUser})(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux'\nimport store from './store'\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}