{"version":3,"sources":["RTCHAT/myMessage.js","components/textMessage.js","RTCHAT/RTC/message.js","RTCHAT/callStatus.js","RTCHAT/RTC/PeerConnectionManager.js","RTCHAT/RTC/messageTypes.js","RTCHAT/CALL_SIGNALING/callStatus.js","RTCHAT/CALL_SIGNALING/callPacket.js","RTCHAT/CALL_SIGNALING/CallSignalingManager.js","RTCHAT/communicator.js","proxy.js","components/businessLogic/myUser.js","RTCHAT/mySingleUserChat.js","RTCHAT/myGroupChat.js","store/reducers/chatReducer/index.js","RTCHAT/types.js","store/reducers/authReducer/index.js","store/reducers/index.js","store/index.js","RTCHAT/index.js","store/actions/authActions.js","components/singleChat.js","components/singleUserChat.js","components/videoChatScreen.js","App.js","serviceWorker.js","index.js"],"names":["MyMessage","this","_id","Math","random","from","to","body","status","SENDING","sentTimeDate","Date","now","seenTimeDate","type","TEXT","chatType","setAttributes","setValue","message","setAsGroupMessage","VIDEO","IMAGE","SENT","RECIEVED","SEEN","TextMessage","state","props","isMe","cid","backColor","foreColor","alignment","style","width","float","display","minWidth","maxWidth","backgroundColor","padding","marginTop","color","toLocaleTimeString","Component","payload","CallStatus","CALLING","RUNNING","ACCEPTED","CONNECTING","CONNECTED","ON_ANOTHER_CALL","DECLINED","PeerConnectionManager","communicatorContext","socketConnection","setChannelEnabled","kind","value","index","localStream","getTracks","findIndex","t","enabled","handleCommunication","socket","on","res","peerConnection","query","console","log","setRemoteDescription","RTCSessionDescription","then","recieveCall","catch","err","addIceCandidate","RTCIceCandidate","createConnection","myId","peerId","config","configuration","RTCPeerConnection","onicecandidate","event","candidate","callerId","sendMessage","onaddstream","stream","context","handelOnAddRemoteStream","peerStream","oniceconnectionstatechange","e","info","target","iceConnectionState","destroyConnection","forEach","track","stop","close","startCall","isFront","navigator","mediaDevices","enumerateDevices","sourceInfos","length","sourceInfo","facing","deviceId","getUserMedia","audio","video","handelOnAddLocalStream","addStream","createOffer","offerToReceiveAudio","offerToReceiveVideo","offer","setLocalDescription","createAnswer","answer","emit","getStream","iceServers","url","urls","username","credential","RINGING_REQUEST","RINGING","REJECTED","USEROFFLINE","USERONLINE","CallPacket","CallSignalingManager","communicatorSocket","handelSingnaling","packet","handelOnAddCallStatus","createRTCConnection","startRTCCall","destroyRTCConnection","connetingPeer","ack","initializeSingnaling","Promise","resolve","reject","socketConnected","acceptSignaling","endCallSingnal","Communicator","dataHandler","ackEmitter","ackEmitters","rtcConfig","callSignalingManager","videoChatContext","rtcConnectionManager","connect","_dataHandler","_ackEmitter","_ackEmitters","io","RTCPeerConnectionManager","send","chatId","markSeen","messages","recieverCid","setState","isConnected","error","timeout","reason","attemptNumber","initializeSignaling","acceptCall","setChatContext","endCallSignal","recieverId","isVideo","setRTCChannelEnabled","remoteStream","callStatus","MyUser","phoneNumber","user","MySingleUserChat","title","selected","unseenCount","lastMessage","chatStatus","CHAT_NOT_FOUND","compose","sc1","sc2","chat","singleChat","setChat","setUser","USER_NOT_FOUND","USER_CHAT_FOUND","MyGroupChat","gcid","users","setTimeout","AddGroupChatListner","Chat","ChatReducer","mState","action","clone","ucId","ucIndex","uc","push","sort","a","b","friend","icbIndex","c","messageSent","ucsIndex","hindex","filter","msg","ackIndex","ackmIndex","m","msgs","statuss","ccid","acksIndex","markCounter","msgsIndex","element","seenmIndex","msgseen","obj","JSON","parse","stringify","AuthReducer","RootReducer","combineReducers","middleWare","thunk","initialState","store","window","__REDUX_DEVTOOLS_EXTENSION__","createStore","applyMiddleware","MyCommunicator","MyCommunicatorObj","MyGroupChatCommunicators","prepareChat","userId","axios","post","data","success","incomingChat","userChat","myChat","getState","newChat","iIndex","ic","icfound","mIndex","mc","mmIndex","mmc","mmcfound","iiIndex","iic","dispatch","connectChat","sentDataHandler","SingleChat","messageBody","handleSendMesage","onClick","friendId","height","fontSize","marginLeft","overflowY","map","key","onFocus","cIndex","onChange","borderRadius","placeholder","border","React","SingleUserChat","cursor","borderBottom","align","zIndex","textAlign","textOverflow","VideoCallingScreen","connectUser","alert","handleInitiateCall","endCall","answerCall","setSelected","id","configs","getSelected","callRunning","isMute","connectionState","iceTransports","peerConnectionA","myStream","srcObject","friendStream","innerHeight","alignSelf","ref","backfaceVisibility","autoPlay","position","bottom","right","left","innerWidth","className","Fragment","paddingLeft","margin","App","calling","handleConnect","sc","onConnect","handleConnectSocket","onSendMessage","handleSendMessage","reserved","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.63b95299.chunk.js","sourcesContent":["\r\nclass MyMessage{\r\n    static TEXT = \"TEXT\";\r\n    static VIDEO = \"VIDEO\";\r\n    static IMAGE = \"IMAGE\";\r\n\r\n\r\n    static SENDING = \"gray\";\r\n    static SENT = \"black\";\r\n    static RECIEVED = \"yellow\";\r\n    static SEEN = \"#0D4330\";\r\n\r\n    constructor(){\r\n        this._id = Math.random()*100000*Math.random();\r\n        this.from = \"\";\r\n        this.to = \"\";\r\n        this.body = \"\";\r\n        this.status = MyMessage.SENDING;\r\n        this.sentTimeDate = Date.now();\r\n        this.seenTimeDate = null\r\n        this.type = MyMessage.TEXT;\r\n        this.chatType = \"single\"\r\n        this.setAttributes = (from, to, body) => {\r\n            this.from = from;\r\n            this.to = to;\r\n            this.body = body;\r\n            return this;\r\n        }\r\n        \r\n        this.setValue = (message) => {\r\n            this._id = message._id;\r\n            this.from =message.from;\r\n            this.to = message.to;\r\n            this.body = message.body;\r\n            this.status = message.status;\r\n            this.type = message.type;\r\n            return this;\r\n        }\r\n        this.setAsGroupMessage = () => {\r\n            this.chatType = \"group\";\r\n            return this;\r\n        }\r\n    }\r\n\r\n}\r\nexport default MyMessage;","import React, { Component } from 'react';\r\nimport MyMessage from '../RTCHAT/myMessage';\r\nconst PRIMARY = \"#5BBC93\"\r\nconst SECONDRY = \"#F2F3F8\";\r\n\r\n\r\n\r\nclass TextMessage extends Component {\r\n    state = {  }\r\n    render() { \r\n        const message = this.props.message?this.props.message: new MyMessage().setAttributes(\"\", \"a\", \"abasdfasdf asdfasdfasdfs dfasdfasdfasdf asdfasdfasdfasd fasdfasdfasd fasdfasdfc dedfsadf\") ;\r\n        const isMe = this.props.cid === message.from;\r\n        const backColor = isMe? SECONDRY:  PRIMARY\r\n        const foreColor = isMe? PRIMARY:  SECONDRY\r\n        const alignment = isMe? \"right\": \"left\";\r\n\r\n        return ( \r\n            <div style={{width: \"100%\", float: \"left\"}}>\r\n                <div style={{display: \"block\",minWidth: \"40%\", maxWidth: \"70%\" , float: alignment, backgroundColor: backColor, padding: 10, marginTop: 5 }}>\r\n                    <span style={{color: foreColor}}> {message.body}</span>\r\n                    <span style={{float: \"right\", color: message.status}}>{\" \"+new Date(message.sentTimeDate).toLocaleTimeString()} o</span>\r\n                </div>\r\n            </div>\r\n         \r\n         );\r\n    }\r\n}\r\n \r\nexport default TextMessage;","class MyMessage\r\n{\r\n    constructor(type, payload, to){\r\n        this.type = type;\r\n        this.payload = payload;\r\n        this.to = to;\r\n    }\r\n}\r\nexport default MyMessage;","class CallStatus{\r\n    static CALLING = 0;\r\n    static RUNNING = 1;\r\n    static ACCEPTED = 2;\r\n    static CONNECTING = 3;\r\n    static CONNECTED = 4;\r\n    static ON_ANOTHER_CALL = 5;\r\n    static DECLINED = 6;\r\n}\r\nexport default CallStatus;","// import { RTCPeerConnection, mediaDevices, RTCIceCandidate, RTCSessionDescription } from 'react-native-webrtc';\r\n\r\nimport { OFFER, ANSER, CALLER_ICE, RECIEVER_ICE} from './messageTypes';\r\nimport MyMessage from './message';\r\nimport CallStatus from '../callStatus';\r\n\r\n// {\r\n//     urls: 'turn:turn.msgsafe.io:443?transport=tcp',\r\n//     username: 'a9a2b514',\r\n//     credential: '00163e7826d6'\r\n//     }\r\nclass PeerConnectionManager \r\n{\r\n  \r\n    constructor(communicatorContext, socketConnection ){\r\n        this.socket = socketConnection;\r\n        this.myId = null;\r\n        this.peerId = null;\r\n        this.localStream = null;\r\n        this.peerStream = null;\r\n        this.context = communicatorContext;\r\n        // this.configuration = {iceServers: [{url: \"stun:stun.l.google.com:19302\"}]};\r\n        this.configuration = {iceServers: [\r\n            {url: \"stun:stun.l.google.com:19302\"}, \r\n            {\r\n                urls: \"turn:numb.viagenie.ca\", \r\n                username: \"ata.mirza40@gmail.com\", \r\n                credential: \"ataMirza12345_\"\r\n            }\r\n            ]};\r\n      \r\n        this.peerConnection = null;\r\n        this.handleCommunication();\r\n    }\r\n\r\n    setChannelEnabled = (kind, value) => {\r\n       let index = (this.localStream.getTracks() || []).findIndex(t => t.kind === kind);\r\n       if(index >=0){\r\n           this.localStream.getTracks()[index].enabled = value;\r\n       }\r\n    }\r\n\r\n    handleCommunication = () =>{\r\n       \r\n        this.socket.on(\"onRecieveRTCMessage\", (res) => {\r\n            if(this.peerConnection){\r\n         \r\n            let message = res.query;\r\n            switch(message.type)\r\n            {\r\n                case OFFER: // RECIEVER\r\n                    console.log(\"STEP-1: RECIEVE OFFER\");\r\n                    console.log(message);\r\n                    console.log(\"---Adding offer to peer connection\")\r\n                    this.peerConnection.setRemoteDescription(new RTCSessionDescription(message.payload))\r\n                        .then(() => {\r\n                           console.log(\"---added remote offer\")\r\n                           this.recieveCall();\r\n                        }).catch(err => {\r\n                            console.log(\"CATCH- error in setting remote offer\");\r\n                            console.log(err)\r\n                        })\r\n                    break;\r\n                case ANSER: // CALLER\r\n                    console.log(\"STEP-4: ANSER RECIEVED\");\r\n                    this.peerConnection.setRemoteDescription(new RTCSessionDescription(message.payload))\r\n                        .then(() => {\r\n                            console.log(\"---added remote answer\")\r\n\r\n                            //// EMIT CALL STARTING......\r\n\r\n                        }).catch(err => {\r\n                            console.log(\"CATCH- error in setting remote answer\");\r\n                            console.log(err)\r\n                        })\r\n                    break;\r\n                case CALLER_ICE: // RECIEVER\r\n                    this.peerConnection.addIceCandidate(new RTCIceCandidate(message.payload))\r\n                        .then(() => {\r\n                            console.log(\"++++++++ICE ADDED: RECIEVER\")\r\n                        }).catch(err => {\r\n                            console.log(\"CATCH- error in setting remote Reciever ice candidate\");\r\n                            console.log(err)\r\n                        })\r\n                    break;\r\n                case RECIEVER_ICE:  // CALLER\r\n                    console.log(\"++++++++ICE ADDED\");\r\n                    this.peerConnection.addIceCandidate(new RTCIceCandidate(message.payload))\r\n                        .then(() => {\r\n                            console.log(\"++++++++ICE ADDED: CALLER\")\r\n                        }).catch(err => {\r\n                            console.log(\"CATCH- error in setting remote Caller ice candidate\");\r\n                            console.log(err)\r\n                        })\r\n                    break;\r\n                default: \r\n                    break;\r\n            }\r\n        }else{\r\n            console.log(\"PEER CONNECTION NOT INITIALIZED\");\r\n        }\r\n        })\r\n\r\n       \r\n\r\n       \r\n    }\r\n\r\n    createConnection  = (myId, peerId, config = null) => {\r\n        this.myId = myId;\r\n        this.peerId = peerId;\r\n        if(config !== null){\r\n            this.configuration = config;\r\n        }\r\n        console.log(\"CONFIGS\");\r\n        console.log(this.configuration);\r\n        this.peerConnection = new RTCPeerConnection(this.configuration);\r\n        this.peerConnection.onicecandidate = (event) => {\r\n            if(event.candidate){\r\n                if(this.callerId){\r\n                    this.sendMessage(new MyMessage(CALLER_ICE, event.candidate, this.peerId));                \r\n                }else{\r\n                    this.sendMessage(new MyMessage(RECIEVER_ICE, event.candidate, this.peerId));\r\n                }\r\n            }\r\n        }\r\n\r\n        this.peerConnection.onaddstream = event => {\r\n            console.log(\"Streaming...!!!\");\r\n            console.log(event.stream);\r\n            this.context.handelOnAddRemoteStream(event.stream)\r\n            this.peerStream = event.stream;\r\n        }\r\n        this.peerConnection.oniceconnectionstatechange = (e) => {\r\n            console.info('ICE Connection State Changed:', e.target.iceConnectionState)\r\n            switch (e.target.iceConnectionState) {\r\n              case 'closed':\r\n              case 'disconnected':\r\n              case 'failed':\r\n                  console.log(\"FAILD, Disconnected OR closed\");\r\n                break\r\n            }\r\n        }\r\n    \r\n    \r\n    }\r\n    destroyConnection = () => {\r\n        // this.setChannelEnabled(\"video\", false);\r\n        // this.setChannelEnabled(\"audio\", false);\r\n        if(this.localStream){\r\n            this.localStream.getTracks().forEach(function(track) {\r\n                track.stop();\r\n            });\r\n        }\r\n        if(this.peerConnection){\r\n            this.peerConnection.close();\r\n            this.peerConnection = null;\r\n            this.localStream = null;\r\n            this.peerStream = null;\r\n            this.peerId = null;\r\n        }\r\n        // this.peerConnection = null;\r\n        // this.peerId = null;\r\n        // this.localStream = null;\r\n        // this.peerStream = null;\r\n       \r\n    }\r\n\r\n\r\n    startCall = ( isFront, isVideo = true) => {\r\n        this.callerId = true;\r\n        console.log(\"STEP-1: Turning On Cam\")\r\n        let videoSourceId = null;\r\n       navigator.mediaDevices.enumerateDevices().then(sourceInfos => {\r\n            console.log(\"Source Infos\");\r\n            console.log(sourceInfos);\r\n            for (let index = 0; index < sourceInfos.length; index++) {\r\n                const sourceInfo = sourceInfos[index];\r\n                if(sourceInfo.kind == \"videoinput\" && sourceInfo.facing == (isFront? \"front\": \"back\")){\r\n                  videoSourceId = sourceInfo.deviceId;\r\n                }\r\n                \r\n            }\r\n\r\n        })\r\n        navigator.mediaDevices.getUserMedia({\r\n            audio: true,\r\n            video: true\r\n        }).then(stream => {\r\n            this.localStream = stream;\r\n            this.context.handelOnAddLocalStream(stream);\r\n            \r\n            console.log(\"STEP-2: ADDING STREAM TO PEER CONNECTION\");\r\n            this.peerConnection.addStream(this.localStream);\r\n            console.log(stream);\r\n\r\n            console.log(\"STEP-3: CREATING OFFER\")\r\n            this.peerConnection.createOffer({offerToReceiveAudio: true, offerToReceiveVideo: true})\r\n                .then(offer => {\r\n                    this.sendMessage(new MyMessage(OFFER, offer, this.peerId) );\r\n                    this.peerConnection.setLocalDescription(offer)\r\n                        .then(() => {\r\n                            console.log(\"---Offer- locally added\");\r\n                        }).catch(err=> {\r\n                            console.log(\"CATCH-error in adding offer\")\r\n                        })\r\n                }).catch(err => {\r\n                    console.log(\"CATCH- error in creating offer\");\r\n                    console.log(err);\r\n                })\r\n        })\r\n    }\r\n\r\n\r\n    recieveCall = () => {\r\n        this.callerId = false;\r\n        let videoSourceId = null;\r\n        let isFront = true;\r\n\r\n        navigator.mediaDevices.enumerateDevices().then(sourceInfos => {\r\n            console.log(\"Source Infos\");\r\n            console.log(sourceInfos);\r\n            for (let index = 0; index < sourceInfos.length; index++) {\r\n                const sourceInfo = sourceInfos[index];\r\n                if(sourceInfo.kind == \"videoinput\" && sourceInfo.facing == (isFront? \"front\": \"back\")){\r\n                  videoSourceId = sourceInfo.deviceId;\r\n                }\r\n                \r\n            }\r\n        })\r\n        navigator.mediaDevices.getUserMedia({\r\n            audio: true,\r\n            video: true\r\n        }).then(stream => {\r\n            this.localStream = stream;\r\n            this.context.handelOnAddLocalStream(stream);\r\n\r\n            console.log(\"STEP-2: ADDING STREAM TO PEER CONNECTION\");\r\n            this.peerConnection.addStream(this.localStream);\r\n\r\n\r\n            console.log(\"STEP-3: CREATING ANSWER\");\r\n            this.peerConnection.createAnswer({offerToReceiveAudio: true, offerToReceiveVideo: true})\r\n                .then(answer =>{\r\n                    console.log(answer);\r\n                    this.sendMessage(new MyMessage(ANSER, answer, this.peerId));\r\n                    console.log(\"---adding answer to description\");\r\n                    this.peerConnection.setLocalDescription(answer)\r\n                            .then(() => {\r\n                                console.log(\"---answer added locally\");\r\n                            }).catch(err =>{\r\n                                console.log(\"CATCH- error in adding answer locally\");\r\n                                console.log(err);\r\n                            })\r\n                }).catch(err =>{\r\n                    console.log(\"CATCH-error in creating answer\");\r\n                    console.log(err);\r\n                })\r\n\r\n        });\r\n\r\n    }\r\n\r\n\r\n   \r\n    sendMessage = (message) => {\r\n        console.log(\"---Sending message of type: \"+ message.type)\r\n        console.log(message);\r\n        this.socket.emit(\"onSendRTCMessage\", {query: message });\r\n    }\r\n\r\n\r\n    getStream = () => {\r\n        return this.localStream;\r\n    }\r\n\r\n}\r\nexport default PeerConnectionManager;\r\n\r\n\r\n","export const OFFER = \"OFFER\";\r\nexport const ANSER = \"ANSWER\";\r\nexport const CALLER_ICE = \"CALLER_ICE\";\r\nexport const RECIEVER_ICE = \"RECIEVER_ICE\";","class CallStatus{\r\n    static RINGING_REQUEST = 0;\r\n    static RINGING  = 2;\r\n    static ACCEPTED = 3;\r\n    static REJECTED = 4;\r\n    static USEROFFLINE = 5;\r\n    static USERONLINE = 6;\r\n\r\n}\r\nexport default CallStatus;","class CallPacket{\r\n    constructor(type, to, from){\r\n        this.type = type;\r\n        this.to = to;\r\n        this.from = from;\r\n    }\r\n}\r\nexport default CallPacket;","import CallStatus from \"./callStatus\";\r\nimport CallPacket from \"./callPacket\";\r\n\r\nclass CallSignalingManager{\r\n    constructor(communicatorSocket, communicatorContext){\r\n        this.socket = communicatorSocket;\r\n        this.context = communicatorContext;\r\n\r\n\r\n        this.handelSingnaling();\r\n    }\r\n\r\n\r\n    handelSingnaling = () => {\r\n        this.socket.on(\"onListen\", res => {\r\n            let packet =res.query;\r\n\r\n            switch(packet.type){\r\n                case CallStatus.RINGING_REQUEST: //// RECIEVER\r\n                    this.context.handelOnAddCallStatus(CallStatus.RINGING_REQUEST)\r\n                    console.log(\"INCOMMING CALL: RING REQUEST\")   \r\n                //// create RTC Connection here,\r\n                    console.log(\"CREATING RTC CONNECTION: RECIVER\")\r\n                    this.context.createRTCConnection(packet.from)\r\n                    //// show window ringing \r\n                    this.socket.emit(\"onCommunicate\", {query: new CallPacket(CallStatus.RINGING, packet.from, this.context.cid)})\r\n                    \r\n                    break;\r\n                \r\n                case CallStatus.RINGING:  ////////   CALLER \r\n                this.context.handelOnAddCallStatus(CallStatus.RINGING)\r\n\r\n                    ////// UPDATE STATUS ///// ringing.... \r\n                    console.log(\"CALL: RINGING...\")\r\n                    break;\r\n                \r\n                case CallStatus.ACCEPTED: ///// CALLER \r\n                this.context.handelOnAddCallStatus(CallStatus.ACCEPTED)\r\n\r\n                    console.log(\"CALL: ACCEPTED\")\r\n                    ///// Start RTC Call...... \r\n                    this.context.startRTCCall(true)\r\n                    break;\r\n                case CallStatus.REJECTED: \r\n                    this.context.handelOnAddCallStatus(CallStatus.REJECTED);\r\n                    this.context.destroyRTCConnection();\r\n                    break;\r\n                default: \r\n                    break;\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n\r\n    connetingPeer = (to) => {\r\n        console.log(\"Connecting...\")\r\n        this.context.handelOnAddCallStatus(CallStatus.RINGING);\r\n        this.socket.emit(\"onCommunicate\", {query: new CallPacket(CallStatus.RINGING_REQUEST, to, this.context.cid )}, (ack) =>{\r\n            if(ack.type === CallStatus.USEROFFLINE){\r\n                console.log(\"PEER OFFLINE: RECONNECTING\")\r\n                this.connetingPeer(to)\r\n            }else{\r\n                console.log(\"PEER: ONLINE\")\r\n                \r\n                //// CAN TRIGGER RINGIN HERE \r\n               \r\n            }\r\n        } )\r\n    }\r\n\r\n    initializeSingnaling = (to) => {\r\n        console.log(\"STEP1: initializing signaling\")\r\n        return new Promise((resolve, reject) => {\r\n            if(this.context.socketConnected){\r\n                console.log(\"Me: CONNECTED\")\r\n                //// start signaling, create RTC connection\r\n                console.log(\"CREATING RTC CONNECTION: CALLER\")\r\n                this.context.createRTCConnection(to);\r\n                this.connetingPeer(to);\r\n                resolve(true);\r\n            }else{\r\n                console.log(\"Me: NOT CONNECTED\")\r\n                reject(false);\r\n            }  \r\n        })                                     \r\n    }\r\n\r\n    acceptSignaling = (to) => {\r\n        return new Promise((resolve, reject) => {\r\n            this.socket.emit(\"onCommunicate\", {query: new CallPacket(CallStatus.ACCEPTED, to, this.context.cid)}, (ack) => {\r\n                if(ack.type === CallStatus.USERONLINE){\r\n                    //////  START RTC CaLL\r\n                    resolve(true);\r\n                }else{\r\n                    reject(false);\r\n                    ////// reconnecting.....and restoring\r\n                }\r\n            });\r\n        })\r\n    }\r\n    endCallSingnal = (to) => {\r\n        this.socket.emit(\"onCommunicate\", {query: new CallPacket(CallStatus.REJECTED, to, this.context.cid)});\r\n        this.context.handelOnAddCallStatus(CallStatus.REJECTED);\r\n        \r\n    }\r\n}\r\nexport default CallSignalingManager;","import io from \"socket.io-client\"\r\nimport MyMessage from \"./myMessage\";\r\nimport RTCPeerConnectionManager from './RTC/PeerConnectionManager';\r\nimport CallSignalingManager from \"./CALL_SIGNALING/CallSignalingManager\";\r\nimport { BASEURL } from \"../proxy\";\r\nclass Communicator {\r\n    constructor(){\r\n        this.socket = null\r\n        this.dataHandler = null;\r\n        this.ackEmitter = null;\r\n        this.ackEmitters = null;\r\n        this.cid = null;\r\n        this.socketConnected = false\r\n        this.rtcConfig = {iceServers: [\r\n          {url: \"stun:stun.l.google.com:19302\"}, \r\n          {\r\n            urls: 'turn:turn.msgsafe.io:443?transport=tcp',\r\n            username: 'a9a2b514',\r\n            credential: '00163e7826d6'\r\n          }\r\n          ]}\r\n        ///// Video/Audio chat variables \r\n        this.callSignalingManager = false;\r\n\r\n        this.videoChatContext = null; \r\n        //// Initializing rtcConnectionManager on conncting to socket at this.socket.on(\"connect\"() => initizligin) \r\n        this.rtcConnectionManager = null\r\n      \r\n\r\n\r\n\r\n        this.connect = (cid, _dataHandler, _ackEmitter, _ackEmitters) => {\r\n            this.cid = cid;\r\n            this.dataHandler = _dataHandler;\r\n            this.ackEmitter = _ackEmitter;\r\n            this.ackEmitters = _ackEmitters;\r\n            this.socket = io(BASEURL, {query: {cid: cid}})\r\n            this.rtcConnectionManager = new RTCPeerConnectionManager(this, this.socket) ;\r\n            this.callSignalingManager = new CallSignalingManager(this.socket, this);\r\n          \r\n            this.send = (message, chatId) => {\r\n                console.log(\"EMIT ON SENT\")\r\n                this.socket.emit(\"onMessageSent\", {query: {message: message, chatId: chatId }}, (ack) => {\r\n                    this.ackEmitter(ack.message, MyMessage.SENT)\r\n                }) ;\r\n                console.log(\"onSentCalled\")\r\n                this.dataHandler(message);\r\n            }\r\n\r\n            this.markSeen = (messages, recieverCid) => {\r\n                this.socket.emit(\"onMarkSeenSent\", {query: {messages: messages, to: recieverCid, from: this.cid}}, (ack) => {\r\n                    this.ackEmitters(messages, recieverCid ,MyMessage.SEEN);\r\n                })\r\n            }\r\n\r\n\r\n            this.socket.on(\"onRecieveMessage\", (res) => {\r\n                console.log(\"onRecieve: called\")\r\n                let query = res.query;\r\n                this.socket.emit(\"onRecievedAckSend\", {query: {message: {_id: query.message._id, to: query.message.to, from: query.message.from}}})\r\n                this.dataHandler(query.message);\r\n            })\r\n            \r\n            this.socket.on(\"onRecievedAck\", (res) => {\r\n                this.ackEmitter(res.query.message, MyMessage.RECIEVED)\r\n            })\r\n          \r\n            this.socket.on(\"onMarkSeen\", (res) => {\r\n                this.ackEmitters(res.query.messages, res.query.from, MyMessage.SEEN)\r\n            })\r\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          //////// Connections Managers ////////////////////////////////////////////////////\r\n          \r\n            this.socket.on(\"connect\", () => {\r\n                console.log(\"STATUS: CONNECTED\")\r\n                this.socketConnected = true;\r\n                this.videoChatContext.setState({isConnected: true})\r\n                // this.rtcConnectionManager = new RTCPeerConnectionManager(this, this.socket) ;\r\n            })\r\n\r\n            this.socket.on(\"connect_error\", (error) => {\r\n                console.log(\"CONNECT: ERROR\")\r\n                this.socketConnected = false;\r\n                console.log(error);\r\n            })\r\n\r\n            this.socket.on(\"connect_timeout\", (timeout) => {\r\n                console.log(\"CONNECT: TIMEOUT\");\r\n                console.log(timeout);\r\n            })\r\n\r\n            this.socket.on('disconnect', (reason) => {\r\n                if (reason === 'io server disconnect') {\r\n                  // the disconnection was initiated by the server, you need to reconnect manually\r\n                  this.socket.connect();\r\n                }\r\n                // else the socket will automatically try to reconnect\r\n              });\r\n\r\n              this.socket.on('reconnect', (attemptNumber) => {\r\n                console.log(\"SOCKET: RECONNECTED\")\r\n                console.log(attemptNumber)\r\n              });\r\n\r\n\r\n              this.socket.on('reconnect_attempt', (attemptNumber) => {\r\n                console.log(\"RECONNECT ATTEMPTS\")\r\n                console.log(attemptNumber);\r\n              });\r\n\r\n\r\n              this.socket.on('reconnecting', (attemptNumber) => {\r\n                console.log(\"RECONNECTING...\")\r\n              });\r\n\r\n              this.socket.on('reconnect_error', (error) => {\r\n                console.log(\"RECONNECT ERROR\")\r\n              });\r\n           \r\n        }\r\n\r\n\r\n        //////// Video Chat Listners \r\n\r\n\r\n        //////// EXPOSED FUNCTIONS /////// \r\n        this.initializeSignaling = (context, to) => {\r\n          this.videoChatContext = context;\r\n          this.callSignalingManager.initializeSingnaling(to)\r\n        }\r\n        this.acceptCall = ( context, to) => {\r\n          this.videoChatContext = context\r\n          \r\n          this.callSignalingManager.acceptSignaling(to)\r\n        }\r\n        this.setChatContext = (context) => {\r\n          this.videoChatContext = context;\r\n        } \r\n        this.endCallSignal = (to) => {\r\n          this.callSignalingManager.endCallSingnal(to)\r\n        }\r\n\r\n        /////////////////  /////////////\r\n        ///// DONT USE BELOW FUNCTIONS \r\n\r\n        this.createRTCConnection = (recieverId) => {\r\n          this.rtcConnectionManager.createConnection(this.cid, recieverId, this.rtcConfig)\r\n          //////// SHOW WINDOW \r\n        }\r\n\r\n        this.startRTCCall = (isVideo) => {\r\n          this.rtcConnectionManager.startCall(isVideo);\r\n        }\r\n      \r\n\r\n        this.setRTCChannelEnabled = (kind, value) => {\r\n          this.rtcConnectionManager.setChannelEnabled(kind, value);\r\n        }\r\n        this.destroyRTCConnection = () => {\r\n          //// TODO : \r\n          /// communicate partner of this.\r\n          this.rtcConnectionManager.destroyConnection();\r\n        }\r\n\r\n\r\n        this.handelOnAddRemoteStream = (remoteStream) => {\r\n          //////// send it to chatContext\r\n          this.videoChatContext.setState({peerStream: remoteStream});\r\n        }\r\n        this.handelOnAddLocalStream = (localStream) => {\r\n          //////// send it to context\r\n          this.videoChatContext.setState({localStream: localStream});\r\n        }\r\n        this.handelOnAddCallStatus = (status) => {\r\n          //// CALL status from Class: CallStatus\r\n          console.log(\"CALL STATUS \"+ status)\r\n          this.videoChatContext.setState({callStatus: status});\r\n        }\r\n\r\n\r\n    \r\n\r\n\r\n      \r\n    }\r\n}\r\n\r\nexport default Communicator;","export const BASEURL = \"https://niofoxvideochatserver.herokuapp.com/\";","class MyUser{\r\n    constructor(){\r\n        this._id = \"\";\r\n        this.username = \"\";\r\n        this.phoneNumber = \"\";\r\n        \r\n        this.setAttributes = (_id, username) => {\r\n            this._id  = _id;\r\n            this.username = username;\r\n            return this;\r\n        }\r\n        this.setValue = (user) => {\r\n            this._id = user._id;\r\n            this.username = user.username;\r\n            this.phoneNumber = user.phoneNumber;\r\n            return this;\r\n        }\r\n    }\r\n}\r\nexport default MyUser;","import MyMessage from \"./myMessage\";\r\nimport MyUser from \"../components/businessLogic/myUser\";\r\n\r\nclass MySingleUserChat{\r\n    static USER_NOT_FOUND = 0;\r\n    static CHAT_NOT_FOUND = 1;\r\n    static USER_CHAT_FOUND = 2;\r\n\r\n    constructor(user = {_id:\"\", username: \"\"}){\r\n        this._id = \"\";\r\n        this.cid = user._id;\r\n        this.title=user.username;\r\n        this.user = user;\r\n        this.messages =  [];\r\n        this.selected = false;\r\n        this.unseenCount = 0;\r\n        this.lastMessage = new MyMessage();\r\n        this.chatType = \"single\";\r\n        this.chatStatus = MySingleUserChat.CHAT_NOT_FOUND;\r\n        \r\n        this.setAttributes = ( messages, selected, unseenCount = 0) => {\r\n            this.user =user;\r\n            this.cid = user._id ;\r\n            this.title=user.username;\r\n            this.messages = messages;\r\n            this.selected = selected;\r\n            this.unseenCount = unseenCount;\r\n            return this;\r\n        }\r\n        this.compose = (sc1, sc2) => {\r\n             this.cid = sc1.cid;\r\n             this.title = sc1.title;\r\n             this.user = sc1.user;\r\n\r\n            if(sc2.chat){\r\n                this._id = sc2.chat._id;\r\n                this.messages = sc2.chat.messages;\r\n                this.chatStatus = sc2.chatStatus;\r\n                this.unseenCount =sc2.unseenCount;\r\n                if(this.messages.length > 0){\r\n                    this.lastMessage = new MyMessage().setValue(this.messages[this.messages.length -1]);\r\n                }\r\n            }\r\n            console.log(\"VALUE\")\r\n            console.log(this);\r\n            return this;\r\n        }\r\n        this.setValue = (singleChat) => {\r\n            this.cid = singleChat._id;\r\n            this.user = singleChat.user;\r\n            this.messages =singleChat.chat;\r\n            this.selected = false;\r\n            this.unseenCount = 0\r\n            return this;\r\n        }\r\n        this.setChat = (singleChat) => {\r\n            if(singleChat){\r\n                this.cid = singleChat._id;\r\n                this.messages =singleChat.chat;\r\n                this.title = singleChat.title;\r\n                this.selected = false;\r\n                this.unseenCount = 0\r\n            }else{\r\n                this.cid = \"\";\r\n                this.messages =[];\r\n                this.selected = false;\r\n                this.unseenCount = 0\r\n            }\r\n           \r\n            return this;\r\n        }\r\n        this.setUser = (user) => {\r\n            this.user = new MyUser().setValue(user);\r\n            return this;\r\n        }\r\n    }\r\n}\r\nexport default MySingleUserChat;","import MyMessage from \"./myMessage\";\r\nimport {AddGroupChatListner} from './index'\r\nclass MyGroupChat{\r\n    constructor( gcid ){\r\n        this._id = gcid;\r\n        this.cid = gcid;\r\n        this.title=\"Group Chat\";\r\n        this.users = [];\r\n        this.messages =  [];\r\n        this.selected = false;\r\n        this.unseenCount = 0;\r\n        this.lastMessage = new MyMessage();\r\n        this.chatType = \"group\";\r\n        this.chatStatus = 2;\r\n        this.setAttributes = ( users  ,messages, selected) => {\r\n            setTimeout(() =>AddGroupChatListner(this.cid), 500)\r\n            \r\n            this.users =users;\r\n            // this.title=user.username;\r\n            this.messages = messages;\r\n            this.selected = selected;\r\n            // this.unseenCount = unseenCount;\r\n            return this;\r\n        }\r\n        this.setValue = (singleChat) => {\r\n            setTimeout(() =>AddGroupChatListner(this.cid), 500)\r\n            // this.cid = singleChat.cid;\r\n            this.users = singleChat.users;\r\n            this.messages =singleChat.messages;\r\n            this.selected = singleChat.selected;\r\n            this.unseenCount = singleChat.unseenCount;\r\n            return this;\r\n        }\r\n    }\r\n}\r\nexport default MyGroupChat;","import MySingleUserChat from \"../../../RTCHAT/mySingleUserChat\";\r\nimport MyUser from \"../../../components/businessLogic/myUser\";\r\nimport { USER_CHAT_DATA_COLLECTOR,SET_CHAT_LIST_CM ,USER_CHAT_SENT_DATA_COLLECTOR,\r\n     USER_CHAT_HANDLE_SELECTD , HANDLE_REMOVE_CHAT, MSG_ACK_ACTION, MSGS_ACK_ACTION, INITIALIZE_CHAT_BETWEEN_CM} from \"../../../RTCHAT/types\";\r\nimport MyGroupChat from \"../../../RTCHAT/myGroupChat\";\r\n\r\nconst state = {\r\n    Chat: [\r\n        // new MySingleUserChat(new MyUser().setAttributes(\"A\", \"atamuhiuldin\")).setAttributes([], false ),\r\n        // new MySingleUserChat(new MyUser().setAttributes(\"B\", \"salman\")).setAttributes([], false ),\r\n        // new MySingleUserChat(new MyUser().setAttributes(\"C\", \"dawood\")).setAttributes([], false), \r\n        // new MyGroupChat(\"ABC\" ).setAttributes([\"A\" , \"B\", \"C\"], [], false),\r\n        // new MyGroupChat(\"CDB\" ).setAttributes([\"A\" , \"B\", \"C\"], [], false)\r\n      ], \r\n    user: {\r\n        _id: \"\", \r\n        username: \"\"\r\n    }\r\n}\r\n\r\n\r\nconst ChatReducer = (mState = {...state}, action) => {\r\n    switch(action.type){\r\n        case SET_CHAT_LIST_CM:\r\n         mState.Chat = action.payload.chat;\r\n            return clone(mState);\r\n        case USER_CHAT_DATA_COLLECTOR:\r\n           \r\n            let message = action.payload.message;\r\n            let ucId = message.chatType === \"group\"? message.to : message.from\r\n            if(message.from !== mState.user._id){\r\n                console.log(\"=========user data collection========\")\r\n                console.log(message)\r\n                let ucIndex = mState.Chat.findIndex(uc => uc.cid === ucId);\r\n                if(ucIndex >= 0){\r\n                    mState.Chat[ucIndex].messages.push(message);\r\n                    mState.Chat[ucIndex].lastMessage = message;\r\n                    \r\n                    mState.Chat.sort((a, b) =>  b.lastMessage.sentTimeDate- a.lastMessage.sentTimeDate)\r\n    \r\n                }else{\r\n                    console.log(\"Undefined user message\")\r\n                    console.log(message);\r\n                }\r\n            }\r\n            mState.Chat.sort((a, b) => b.lastMessage.sentTimeDate - a.lastMessage.sentTimeDate )\r\n            \r\n            return clone(mState);\r\n\r\n        case INITIALIZE_CHAT_BETWEEN_CM:\r\n            const {friend, chat} = action.payload;\r\n            let icbIndex = mState.Chat.findIndex(c => c.cid === friend._id);\r\n            if(icbIndex >= 0){\r\n                mState.Chat[icbIndex]._id = chat._id;\r\n                mState.Chat[icbIndex].chatStatus = MySingleUserChat.USER_CHAT_FOUND;\r\n            }\r\n             return clone(mState);\r\n        case USER_CHAT_SENT_DATA_COLLECTOR:\r\n                console.log(\"=========send data collection========\")\r\n                let messageSent = action.payload.message;\r\n                console.log(messageSent)\r\n                let ucsIndex = mState.Chat.findIndex(uc => uc.cid === messageSent.to);\r\n                if(ucsIndex >= 0){\r\n                    mState.Chat[ucsIndex].messages.push(messageSent);\r\n                    mState.Chat[ucsIndex].lastMessage = messageSent;\r\n                mState.Chat.sort((a, b) => b.lastMessage.sentTimeDate - a.lastMessage.sentTimeDate )\r\n\r\n                }else{\r\n                    console.log(\"Undefined user message\")\r\n                    console.log(messageSent);\r\n                }\r\n                return clone(mState);\r\n        \r\n        case USER_CHAT_HANDLE_SELECTD:\r\n            let cid = action.payload.cid;\r\n            for (let hindex = 0; hindex < mState.Chat.length; hindex++) {\r\n                if( mState.Chat[hindex].cid === cid){\r\n                    mState.Chat[hindex].selected = true\r\n                  \r\n                }else{\r\n                    mState.Chat[hindex].selected = false\r\n                }\r\n              }\r\n            return clone(mState);\r\n        case HANDLE_REMOVE_CHAT:\r\n            mState.Chat = mState.Chat.filter(c => c.cid !== action.payload.cid); \r\n            mState.Chat.sort((a, b) => b.lastMessage.sentTimeDate - a.lastMessage.sentTimeDate )\r\n\r\n            return clone(mState)\r\n        \r\n        case MSG_ACK_ACTION: \r\n              let msg = action.payload.message;\r\n              let status = action.payload.status;\r\n              let ackIndex = mState.Chat.findIndex(c => c.cid === msg.to)\r\n              if(ackIndex >= 0){\r\n                  let ackmIndex = mState.Chat[ackIndex].messages.findIndex(m => m._id === msg._id )\r\n                  if(ackmIndex >= 0){\r\n                      mState.Chat[ackIndex].messages[ackmIndex].status = status;\r\n                  }\r\n              }\r\n              return clone(mState);\r\n\r\n        case MSGS_ACK_ACTION: \r\n            let msgs = action.payload.messages;\r\n            let statuss = action.payload.status;\r\n            let ccid = action.payload.cid;\r\n            let acksIndex = mState.Chat.findIndex(c => c.cid === ccid)\r\n            let markCounter = 0;\r\n            if(acksIndex >= 0){\r\n                for (let msgsIndex = mState.Chat[acksIndex].messages.length -1 ; msgsIndex >= 0 ; msgsIndex--) {\r\n                    const element = mState.Chat[acksIndex].messages[msgsIndex];\r\n                    for (let seenmIndex = 0; seenmIndex < msgs.length; seenmIndex++) {\r\n                        const msgseen = msgs[seenmIndex];\r\n                        if(msgseen._id === element._id){\r\n                            mState.Chat[acksIndex].messages[msgsIndex].status = statuss;\r\n                            markCounter++;\r\n                            break; \r\n                        }\r\n                    }\r\n                    if(markCounter >= msgs.length){\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n              return clone(mState);\r\n        case \"SET_USER\": \r\n              mState.user = action.payload.user;\r\n                  return clone(mState);\r\n        default: \r\n            return clone(mState);\r\n    }\r\n}\r\nexport default ChatReducer;\r\n\r\nconst clone = (obj) =>{\r\n    return JSON.parse(JSON.stringify(obj))\r\n}","export const USER_CHAT_HANDLE_SELECTD =\"USER_CHAT_HANDLE_SELECTD\";\r\nexport const MSG_ACK_ACTION = \"MSG_ACK_ACTION\";\r\nexport const MSGS_ACK_ACTION = \"MSGS_ACK_ACTION\";\r\nexport const USER_CHAT_DATA_COLLECTOR = \"USER_CHAT_DATA_COLLECTOR\";\r\nexport const USER_CHAT_SENT_DATA_COLLECTOR = \"USER_CHAT_SENT_DATA_COLLECTOR\";\r\nexport const HANDLE_REMOVE_CHAT =\"HANDLE_REMOVE_CHAT\";\r\nexport const SET_CHAT_LIST_CM = \"SET_CHAT_LIST_CM\";\r\nexport const INITIALIZE_CHAT_BETWEEN_CM = \"INITIALIZE_CHAT_BETWEEN_CM\";\r\n\r\n\r\n/// CALL ACTIONS \r\nexport const CALL_RUNNING_STATUS = \"CALL_RUNNING_STATUS\";\r\n","\r\nconst state ={\r\n    user: {\r\n        _id: \"\", \r\n        username: \"\"\r\n    }\r\n}\r\n\r\nconst AuthReducer = (mState = {...state}, action) => {\r\n    switch(action.type){\r\n        case \"SET_USER\": \r\n        mState.user = action.payload.user;\r\n            return clone(mState);\r\n\r\n        default: \r\n         return clone(mState);\r\n    }\r\n}\r\nexport default AuthReducer;\r\n\r\nconst clone = (obj) =>{\r\n    return JSON.parse(JSON.stringify(obj))\r\n}","import {combineReducers} from 'redux';\r\n\r\nimport ChatReducer from './chatReducer';\r\nimport AuthReducer from './authReducer';\r\nconst RootReducer = combineReducers({\r\n    ChatReducer, \r\n    AuthReducer\r\n})\r\nexport default RootReducer;","import {createStore, applyMiddleware, compose} from 'redux';\r\nimport RootReducer from './reducers';\r\nimport thunk from 'redux-thunk';\r\nconst middleWare = [thunk]\r\n\r\nconst initialState ={}\r\n\r\n\r\nlet store = null \r\n\r\nif(window.__REDUX_DEVTOOLS_EXTENSION__){\r\n    store = createStore(\r\n        RootReducer, \r\n        initialState, \r\n        compose(applyMiddleware(...middleWare), \r\n        window.__REDUX_DEVTOOLS_EXTENSION__()\r\n        )\r\n    )\r\n}else{\r\n    store = createStore(\r\n        RootReducer, \r\n        initialState, \r\n        compose(applyMiddleware(...middleWare))\r\n    )\r\n}\r\n\r\nexport default store;","import MyCommunicatorObj from './communicator';\r\nimport store from '../store';\r\nimport { USER_CHAT_HANDLE_SELECTD, MSG_ACK_ACTION, \r\n     MSGS_ACK_ACTION ,USER_CHAT_DATA_COLLECTOR, USER_CHAT_SENT_DATA_COLLECTOR,\r\n      HANDLE_REMOVE_CHAT, SET_CHAT_LIST_CM, INITIALIZE_CHAT_BETWEEN_CM } from './types';\r\nimport MyMessage from './myMessage';\r\nimport axios from 'axios';\r\nimport MyUser from '../components/businessLogic/myUser';\r\nimport MySingleUserChat from './mySingleUserChat';\r\nimport MyGroupChat from './myGroupChat';\r\n// import PeerConnection from '../RTC/PeerConnection';\r\nexport const MyCommunicator = new MyCommunicatorObj();\r\nexport const configs =  [\r\n    {\r\n    id:1, \r\n    selected: false,\r\n    value: {iceServers: [\r\n      {urls: \"stun:stun.l.google.com:19302\"}, \r\n      {\r\n          urls: \"turn:numb.viagenie.ca\", \r\n          username: \"ata.mirza40@gmail.com\", \r\n          credential: \"ataMirza12345_\"\r\n      }\r\n      ]}\r\n    }, \r\n    {\r\n      id: 2, \r\n      selected:false,\r\n      value: {iceServers: [\r\n        {url: \"stun:stun.l.google.com:19302\"}\r\n        ]}\r\n    }, \r\n    {\r\n      id:3, \r\n      selected:true,\r\n      value:{iceServers: [\r\n        {url: \"stun:stun.l.google.com:19302\"}, \r\n        {\r\n          urls: 'turn:turn.msgsafe.io:443?transport=tcp',\r\n          username: 'a9a2b514',\r\n          credential: '00163e7826d6'\r\n        }\r\n        ]}\r\n    }, \r\n    {\r\n      id: 4, \r\n      selected:false, \r\n      value: {\r\n        iceServers: [\r\n          {url: \"stun:stun.l.google.com:19302\"}, \r\n          {\r\n            url: 'turn:192.158.29.39:3478?transport=udp',\r\n            credential: 'JZEOEt2V3Qb0y27GRntt2u2PAYA=',\r\n            username: '28224511:1379330808'\r\n          }\r\n        ]\r\n      }\r\n    },\r\n    {\r\n      id: 5, \r\n      selected:false, \r\n      value: {\r\n        iceServers: [\r\n          {url: \"stun:stun.l.google.com:19302\"}, \r\n          {\r\n            \"urls\": [\r\n            \"turn:13.250.13.83:3478?transport=udp\"\r\n            ],\r\n            \"username\": \"YzYNCouZM1mhqhmseWk6\",\r\n            \"credential\": \"YzYNCouZM1mhqhmseWk6\"\r\n            }\r\n        ]\r\n      }\r\n    }, \r\n    {\r\n      id:6, \r\n      selected: false,\r\n      value: {iceServers: [\r\n        {urls: \"stun:stun.l.google.com:19302\"}, \r\n        {\r\n            urls: \"turn:numb.viagenie.ca\", \r\n            username: \"ata.mirza40@gmail.com\", \r\n            credential: \"ataMirza12345_\"\r\n        }\r\n        ], iceTransports: \"relay\"\r\n       }\r\n      }, \r\n    {\r\n      id: 7, \r\n      selected: false, \r\n      value: {iceServers: [\r\n        {url: \"stun:stun.l.google.com:19302\"}, \r\n        {\r\n        urls: 'turn:turn.msgsafe.io:443?transport=tcp',\r\n        username: 'a9a2b514',\r\n        credential: '00163e7826d6'\r\n      }]}\r\n    }, \r\n    {\r\n      id: 8, \r\n      selected: false, \r\n      value: {iceServers: [\r\n        {\r\n        urls: 'turn:turn.msgsafe.io:443?transport=tcp',\r\n        username: 'a9a2b514',\r\n        credential: '00163e7826d6'\r\n      }]}\r\n    }\r\n]\r\n\r\n\r\nconst MyGroupChatCommunicators = [];\r\nlet peerConnection = null;\r\nexport const loadAllChats = () => {\r\n\r\n\r\n\r\n    axios.post(\"http://localhost:5000/API/user/auth/get-all\")\r\n        .then(res =>{\r\n            if(res.data.success){\r\n                let chatData = res.data.users;\r\n                let myChat = [];\r\n                for (let index = 0; index < chatData.length; index++) {\r\n                    const singleChat = chatData[index];\r\n                    myChat.push(new MySingleUserChat(new MyUser().setValue(singleChat)).setAttributes([], false ))\r\n                }\r\n           \r\n                store.dispatch({\r\n                    type: SET_CHAT_LIST_CM, \r\n                    payload: {chat: myChat}\r\n                })\r\n            }else{\r\n                console.log(\"ERROR SUCCESS:FALSE\");\r\n                console.log(res.data.error);\r\n            }\r\n        }).catch(err =>{\r\n            console.log(\"CATCH: API, NETWORK ERROR\")\r\n            console.log(err);\r\n        })\r\n}\r\n\r\nexport const prepareChat =  (userId) => {\r\n    axios.post(\"http://localhost:5000/API/user/chat/user-chat\", {userId: userId})\r\n        .then(res =>{\r\n            if(res.data.success){\r\n                let incomingChat = res.data.user.userChat;\r\n                let myChat = [...store.getState().ChatReducer.Chat];\r\n                let newChat = [];\r\n\r\n                //// merging \r\n                for (let iIndex = 0; iIndex < incomingChat.length; iIndex++) {\r\n                    const ic = incomingChat[iIndex];\r\n                    let icfound = false;\r\n                    for (let mIndex = 0; mIndex < myChat.length; mIndex++) {\r\n                        const mc = myChat[mIndex];\r\n                        \r\n                        if(mc.cid === ic.cid){\r\n                            icfound = true;\r\n                            mc._id = ic._id;\r\n                            mc.messages = ic.messages;\r\n                            mc.chatStatus = MySingleUserChat.USER_CHAT_FOUND;\r\n                            // mc.title = ic.title;\r\n                            newChat.push(mc);\r\n                            break;\r\n                        }\r\n                    }\r\n                    if(!icfound){\r\n                        ic.chatStatus = MySingleUserChat.USER_CHAT_FOUND;\r\n                        if(ic.chatType === \"group\"){\r\n                            newChat.push( new MyGroupChat(ic._id).setValue(ic) );\r\n                        }else{\r\n                            // newChat.push(ic);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                for (let mmIndex = 0; mmIndex < myChat.length; mmIndex++) {\r\n                    const mmc = myChat[mmIndex];\r\n                    let mmcfound = false;\r\n                    for (let iiIndex = 0; iiIndex < incomingChat.length; iiIndex++) {\r\n                        const iic = incomingChat[iiIndex];\r\n                        if(mmc.cid === iic.cid){\r\n                            mmcfound = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if(!mmcfound){\r\n                        newChat.push(mmc);\r\n                    }\r\n                }\r\n            \r\n\r\n            \r\n                    store.dispatch({\r\n                        type: SET_CHAT_LIST_CM, \r\n                        payload: {chat: newChat}\r\n                    })\r\n            }else{\r\n            }\r\n        }).catch(err => {\r\n            console.log(\"CATCH: Error\");\r\n            console.log(err);\r\n        })\r\n}\r\n\r\nexport const initializeChat = (userId, friendId) => {\r\n    axios.post(\"http://localhost:5000/API/user/chat/initialize-chat\", {userId: userId, friendId: friendId})\r\n        .then(res => {\r\n            if(res.data.success){\r\n                store.dispatch({\r\n                    type: INITIALIZE_CHAT_BETWEEN_CM,\r\n                    payload: {friend: res.data.friend, chat: res.data.chat} \r\n                })\r\n            }else{\r\n                console.log(\"INIT CHAT SUCCESS: FALSE\")\r\n                console.log(res.data.error)\r\n            }\r\n        }).catch(err => {\r\n            console.log(\"CATCH: INITIALIZE CHAT\")\r\n            console.log(err);\r\n        })\r\n}\r\n\r\nexport const setUserChatSelected = (cid) => {\r\n    store.dispatch({\r\n        type: USER_CHAT_HANDLE_SELECTD, \r\n        payload: {cid: cid}\r\n    })\r\n}\r\n\r\nconst ackEmitter = (message, status) => {\r\n    store.dispatch({\r\n        type: MSG_ACK_ACTION, \r\n        payload: {message: message, status}\r\n    })\r\n}\r\nconst ackEmitters = (messages, cid ,status) => {\r\n    store.dispatch({\r\n        type: MSGS_ACK_ACTION, \r\n        payload: {messages: messages, cid:cid ,status:status}\r\n    })\r\n}\r\n\r\nconst dataHandler = (message) => {\r\n  store.dispatch({\r\n      type: USER_CHAT_DATA_COLLECTOR, \r\n      payload: {message: message}\r\n  })\r\n}\r\n\r\nconst sentDataHandler = (message) => {\r\n     store.dispatch({\r\n         type: USER_CHAT_SENT_DATA_COLLECTOR, \r\n         payload: {message: message}\r\n     })\r\n   }\r\n\r\nexport const connectChat = ( context,cid) => {\r\n    MyCommunicator.videoChatContext = context;\r\n    MyCommunicator.connect(cid, dataHandler, ackEmitter, ackEmitters);\r\n    store.dispatch({\r\n        type: HANDLE_REMOVE_CHAT, \r\n        payload: {cid: cid}\r\n    })\r\n}\r\nexport const sendMessage = (message, chatId) => {\r\n    MyCommunicator.send(message, chatId)\r\n    sentDataHandler(message)\r\n}\r\n\r\n\r\n\r\n\r\nexport const markSeen = (cid) => {\r\n    let chat = store.getState().ChatReducer.Chat;\r\n    let cIndex = chat.findIndex(c => c.cid === cid);\r\n    if(cIndex >= 0){\r\n        let messages = chat[cIndex].messages.filter(m => ((m.status === MyMessage.SENDING || m.status === MyMessage.RECIEVED || m.status === MyMessage.SENT) && m.from === cid ))\r\n        MyCommunicator.markSeen(messages, cid);\r\n    }\r\n}\r\n\r\n\r\n\r\n////// Add Group Chat Listner\r\n\r\n\r\nexport const AddGroupChatListner = (gcid) => {\r\n    MyGroupChatCommunicators.push(new MyCommunicatorObj().connect(gcid, dataHandler, ackEmitter, ackEmitter));\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n////////////////////////////////////////////////////////////////////\r\n///////////////////// VIDEO CHAT ////////////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n\r\nexport const setSelected = (id) => {\r\n    // let configsn = [configs]\r\n    for (let index = 0; index < configs.length; index++) {\r\n      const c = configs[index];\r\n      if(c.id === id){\r\n        configs[index].selected = true;\r\n      }else{\r\n        configs[index].selected = false;\r\n      }\r\n    }\r\n    // configs =  configsn;\r\n    return configs;\r\n  }\r\n\r\nconst getSelected = () => {\r\n    return configs.filter(c => c.selected === true)[0].value;\r\n  }\r\n\r\n \r\n  export const createRTCConnection = (context,myId, peerId) => {\r\n    MyCommunicator.rtcConnectionManager.createConnection(myId, peerId, getSelected())\r\n    MyCommunicator.videoChatContext =context\r\n}\r\n\r\n\r\n\r\n\r\nexport const startRTCCall = (context, myId, reciever) => {\r\n    MyCommunicator.createRTCConnection(context, myId, reciever,getSelected() )\r\n}\r\nexport const endRTCCall = (to) => {\r\n    MyCommunicator.destroyRTCConnection();\r\n    MyCommunicator.endCallSignal(to)\r\n}\r\n\r\nexport const setCallChannelStates = (kind, value) => {\r\n    peerConnection.setChannelEnabled(kind, !this.state.isMute);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n//////////////////////////\r\n\r\n\r\nexport const initiazlizeCall = (context, to) => {\r\n    MyCommunicator.initializeSignaling(context, to);\r\n}\r\nexport const answerCall = ( context ,to) => {\r\n    console.log(\"ANSWER CALL\")\r\n    MyCommunicator.acceptCall( context,to)\r\n}","export const setUser = (user) => dispatch =>{\r\n    dispatch({\r\n        type: \"SET_USER\", \r\n        payload: {user: user}\r\n    })\r\n}","import React from 'react';\r\nimport TextMessage from './textMessage';\r\nimport { sendMessage, markSeen, initializeChat} from '../RTCHAT'\r\nimport MyMessage from '../RTCHAT/myMessage';\r\nimport {connect} from 'react-redux';\r\nimport {setUser } from '../store/actions/authActions';\r\nimport MySingleUserChat from '../RTCHAT/mySingleUserChat';\r\nconst PRIMARY = \"#5BBC93\"\r\nconst SECONDRY = \"white\";\r\n\r\n\r\nclass SingleChat extends React.Component{\r\n  state={\r\n   \r\n\r\n    messageBody: \"\", \r\n    chat: []\r\n  }\r\n\r\n  handleSendMesage = (friend, chatId ,cid, chatType) => {\r\n      this.setState({messageBody: \"\"})\r\n      let message = null;\r\n      if(chatType === \"group\"){\r\n        message =  new MyMessage().setAttributes(cid, friend, this.state.messageBody).setAsGroupMessage()\r\n      }else{\r\n        message =  new MyMessage().setAttributes(cid, friend, this.state.messageBody)\r\n      }\r\n      sendMessage(message, chatId)\r\n  }\r\n\r\n \r\n\r\n  render(){\r\n      const userChat = this.props.userChat.filter(uc => uc.selected === true)[0];\r\n     \r\n       if(!userChat){\r\n           return false\r\n       }\r\n       if(userChat.chatStatus !== MySingleUserChat.USER_CHAT_FOUND){\r\n          return (\r\n            <div>\r\n                <button onClick={() => initializeChat( this.props.user._id, userChat.user._id)}>Initialize Chat with {userChat.title}</button>\r\n            </div>\r\n          )\r\n       }\r\n  return (\r\n    <div style={{width: \"100%\", height: \"100%\"}}>\r\n       <div style={{width: \"100%\",  height: 100, backgroundColor: PRIMARY}}>\r\n          {/* <div style={{width: \"100%\"}}>\r\n              {\r\n                  this.props.userChat.map(uc => \r\n                  <button onClick={() => this.handleConnect(uc)} style={{backgroundColor: uc.reserved? PRIMARY: SECONDRY, border: \"2px solid \"+uc.reserved? SECONDRY: PRIMARY, borderRadius: 30 }}>\r\n                        <span style={{color: uc.reserved? SECONDRY :PRIMARY, fontSize: 18}}>{uc.title}</span>\r\n                  </button>)\r\n              }\r\n          </div> */}\r\n            <span style={{fontSize: 30, color: \"white\", marginLeft: 20}}>{userChat.title}</span>\r\n          {/* <input value={this.state.uid} onChange={(e) => this.setState({uid: e.target.value})} style={{borderRadius: 30, padding: 5, color: PRIMARY}} placeholder=\"your name\"/>\r\n          <input value={this.state.friend} onChange={(e) => this.setState({friend: e.target.value})} style={{borderRadius: 30, padding: 5, color: PRIMARY}} placeholder=\"frient name\"/> */}\r\n\r\n          \r\n       </div>\r\n       <div style={{height: 550, width: \"100%\", overflowY: \"scroll\", backgroundColor: \"white\"}}>\r\n\r\n        {\r\n            userChat.messages.map((m, index) => <div key={index}><TextMessage message={m} cid={this.props.user._id}/><br/></div>)\r\n        }\r\n\r\n\r\n\r\n       </div>\r\n       <div style={{width: \"100%\", height: 70, backgroundColor: SECONDRY}}>\r\n     \r\n     \r\n        <input onFocus={() => markSeen(userChat.cid)} value={this.state.messageBody} onChange={(e) => this.setState({messageBody: e.target.value})} style={{borderRadius: 30, padding: 5, color: PRIMARY, width: \"70%\", height: 55, fontSize: 25}} placeholder=\"frient name\"/>\r\n      \r\n      \r\n        <button onClick={() => this.handleSendMesage(userChat.cid, userChat._id ,this.props.user._id, userChat.chatType)} style={{backgroundColor: PRIMARY, border: \"2px solid \"+SECONDRY, borderRadius: 30, width: \"20%\", height: 55 }}>\r\n          <span style={{color: SECONDRY, fontSize: 18}}>SEND</span>\r\n        </button>\r\n\r\n       </div>\r\n    </div>\r\n  );\r\n  }\r\n}\r\n\r\nexport default connect(null, {setUser})(SingleChat);\r\n","import React, { Component } from 'react';\r\nimport {setUserChatSelected} from '../RTCHAT'\r\nconst PRIMARY = \"#5BBC93\"\r\n// const SECONDRY = \"white\";\r\n\r\nclass SingleUserChat extends Component {\r\n    state = {  }\r\n    render() { \r\n        const uc = this.props.singleChat;\r\n        const lastMessage = uc.messages.length > 0 ? uc.messages[uc.messages.length-1].body: false\r\n        const unseenCount = uc.messages.unseenCount;\r\n        return ( \r\n            <div onClick={() => setUserChatSelected(uc.cid)} style={{ cursor:\"pointer\",width: \"100%\", height: 100, backgroundColor: uc.selected? \"#EBEBEB\": \"white\", borderBottom: \"2px solid #f0f0f0\" }}>\r\n              <div align=\"center\" style={{ width: \"30%\", height: \"100%\" ,float:\"left\" ,borderRadius: 50, border: \"1px solid #f0f0f0\"}}>\r\n               { unseenCount > 0 ? <div align=\"center\"  style={{ marginTop:\"40%\" ,zIndex: 99, backgroundColor: PRIMARY , borderRadius: 50, width: \"25px\", height: \"25px\"}}> \r\n                    {unseenCount}\r\n                </div>: false}\r\n                   \r\n                </div>\r\n              <div style={{width: \"65%\", float: \"right\"}}>\r\n                <span style={{fontSize: 25, width: \"100%\", textAlign: \"center\"}}>{uc.title}</span><br/>\r\n                <span style={{textOverflow: \"ellipsis\"}}>{lastMessage}</span>\r\n              </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default SingleUserChat;","import React from 'react';\r\n\r\n// import PeerConnection from '../RTC/PeerConnection';\r\nimport {connectRTCUser,  answerCall,initiazlizeCall , handleInitiateCall, endCall, createRTCConnection ,startRTCCall, endRTCCall, connectChat} from '../RTCHAT'\r\nimport CallStatus from '../RTCHAT/CALL_SIGNALING/callStatus';\r\nclass VideoCallingScreen extends React.Component {\r\n  \r\n  \r\n  constructor(){\r\n    super()\r\n\r\n    // this.myStream = React.createRef();\r\n    // this.friendStream = React.createRef();\r\n\r\n  this.state = {\r\n    localStream: null, \r\n    peerStream:null, \r\n    isConnected: false, \r\n    myId: \"\", \r\n    friendId: \"\", \r\n    callRunning: false, \r\n    isMute: false,\r\n    connectionState: \"\", \r\n    callStatus: -1,\r\n    configs:  [\r\n      {\r\n      id:1, \r\n      selected: false,\r\n      value: {iceServers: [\r\n        {urls: \"stun:stun.l.google.com:19302\"}, \r\n        {\r\n            urls: \"turn:numb.viagenie.ca\", \r\n            username: \"ata.mirza40@gmail.com\", \r\n            credential: \"ataMirza12345_\"\r\n        }\r\n        ]}\r\n      }, \r\n      {\r\n        id: 2, \r\n        selected:false,\r\n        value: {iceServers: [\r\n          {url: \"stun:stun.l.google.com:19302\"}\r\n          ]}\r\n      }, \r\n      {\r\n        id:3, \r\n        selected:true,\r\n        value:{iceServers: [\r\n          {url: \"stun:stun.l.google.com:19302\"}, \r\n          {\r\n            urls: 'turn:turn.msgsafe.io:443?transport=tcp',\r\n            username: 'a9a2b514',\r\n            credential: '00163e7826d6'\r\n          }\r\n          ]}\r\n      }, \r\n      {\r\n        id: 4, \r\n        selected:false, \r\n        value: {\r\n          iceServers: [\r\n            {url: \"stun:stun.l.google.com:19302\"}, \r\n            {\r\n              url: 'turn:192.158.29.39:3478?transport=udp',\r\n              credential: 'JZEOEt2V3Qb0y27GRntt2u2PAYA=',\r\n              username: '28224511:1379330808'\r\n            }\r\n          ]\r\n        }\r\n      },\r\n      {\r\n        id: 5, \r\n        selected:false, \r\n        value: {\r\n          iceServers: [\r\n            {url: \"stun:stun.l.google.com:19302\"}, \r\n            {\r\n              \"urls\": [\r\n              \"turn:13.250.13.83:3478?transport=udp\"\r\n              ],\r\n              \"username\": \"YzYNCouZM1mhqhmseWk6\",\r\n              \"credential\": \"YzYNCouZM1mhqhmseWk6\"\r\n              }\r\n          ]\r\n        }\r\n      }, \r\n      {\r\n        id:6, \r\n        selected: false,\r\n        value: {iceServers: [\r\n          {urls: \"stun:stun.l.google.com:19302\"}, \r\n          {\r\n              urls: \"turn:numb.viagenie.ca\", \r\n              username: \"ata.mirza40@gmail.com\", \r\n              credential: \"ataMirza12345_\"\r\n          }\r\n          ], iceTransports: \"relay\"\r\n         }\r\n        }, \r\n      {\r\n        id: 7, \r\n        selected: false, \r\n        value: {iceServers: [\r\n          {url: \"stun:stun.l.google.com:19302\"}, \r\n          {\r\n          urls: 'turn:turn.msgsafe.io:443?transport=tcp',\r\n          username: 'a9a2b514',\r\n          credential: '00163e7826d6'\r\n        }]}\r\n      }, \r\n      {\r\n        id: 8, \r\n        selected: false, \r\n        value: {iceServers: [\r\n          {\r\n          urls: 'turn:turn.msgsafe.io:443?transport=tcp',\r\n          username: 'a9a2b514',\r\n          credential: '00163e7826d6'\r\n        }]}\r\n      }\r\n  ]\r\n\r\n  }\r\n  this.peerConnectionA = null\r\n\r\n}\r\n\r\nconnectUser = () => {\r\n\r\n    // connectRTCUser(this.state.myId, this.state.friendId, this);\r\n    if(this.state.myId !== \"\" && this.state.friendId !== \"\"){\r\n\r\n      console.log(\"STATE\")\r\n      console.log(this.state);\r\n      connectChat(this, this.state.myId);\r\n    }else{\r\n      alert(\"Invalid USER or FRIEND Id\")\r\n    }\r\n    \r\n    // createRTCConnection(this,this.state.myId, this.state.friendId);\r\n}\r\n\r\n\r\n\r\nhandleInitiateCall = ( ) => {\r\n\r\n//   handleInitiateCall(this, true);\r\n    // startRTCCall(this, this.state.myId, this.state.friendId);\r\n    initiazlizeCall(this,this.state.friendId);\r\n}\r\n\r\nendCall = () => {\r\n\r\n//   endCall(this);\r\n    endRTCCall(this.state.friendId);\r\n}\r\nanswerCall = () => {\r\n  \r\n  answerCall(this,this.state.friendId)\r\nthis.setState({callStatus: CallStatus.ACCEPTED})\r\n}\r\n\r\nsetSelected = (id) => {\r\n  let configs = [...this.state.configs]\r\n  for (let index = 0; index < configs.length; index++) {\r\n    const c = configs[index];\r\n    if(c.id === id){\r\n      configs[index].selected = true;\r\n    }else{\r\n      configs[index].selected = false;\r\n    }\r\n  }\r\n  this.setState({configs: configs})\r\n}\r\n\r\ngetSelected = () => {\r\n  return this.state.configs.filter(c => c.selected === true)[0].value;\r\n}\r\n\r\n\r\n\r\nrender(){\r\n  if(this.myStream){\r\n    this.myStream.srcObject = this.state.localStream; \r\n    this.friendStream.srcObject = this.state.peerStream;\r\n  }\r\n\r\n  switch(this.state.callStatus){\r\n    case CallStatus.RINGING_REQUEST: \r\n      return (\r\n        <div style={{backgroundColor: \"#363442\" ,width: \"100%\", height: window.innerHeight}}>\r\n          <div align=\"center\" style={{alignSelf: \"center\"}}>\r\n            <div style={{height: 200}}/>\r\n            <span style={{color: \"white\", fontSize: 30}}>Ringing...</span><br/>\r\n            <div style={{height: 50}}/>\r\n            <button onClick={() => this.answerCall()} style={{width: 100, height: 50, backgroundColor: \"green\", border: \"0px\", borderRadius: 50, color: \"white\", fontSize: 20}}>Accept</button>\r\n            <button onClick={() => this.endCall()} style={{width: 100, height: 50, backgroundColor: \"red\", border: \"0px\", borderRadius: 50, color: \"white\", fontSize: 20}}>CANCEL</button>\r\n\r\n          </div>\r\n        </div>\r\n      )\r\n\r\n      case CallStatus.RINGING: \r\n      return (\r\n        <div style={{backgroundColor: \"#363442\" ,width: \"100%\", height: window.innerHeight}}>\r\n          <div align=\"center\" style={{alignSelf: \"center\"}}>\r\n            <div style={{height: 200}}/>\r\n            <span style={{color: \"white\", fontSize: 30}}>Ringing...</span><br/>\r\n            <div style={{height: 50}}/>\r\n            <button onClick={() => this.endCall()} style={{width: 100, height: 50, backgroundColor: \"red\", border: \"0px\", borderRadius: 50, color: \"white\", fontSize: 20}}>CANCEL</button>\r\n          </div>\r\n        </div>\r\n      )\r\n\r\n    case CallStatus.ACCEPTED: \r\n        return (\r\n          <div style={{backgroundColor: \"#363442\" ,width: \"100%\", height: window.innerHeight}}>\r\n             <video ref={e => this.friendStream = e} style={{width: \"100%\" ,height: window.innerHeight, backfaceVisibility:\"visible\"}} autoPlay />\r\n             <video ref={e => this.myStream = e} style={{width: 200, zIndex: 999  , position:\"absolute\", bottom: 10, right: 10 , height: 200, backfaceVisibility:\"visible\"}} autoPlay />\r\n             <button onClick={() => this.endCall()} align=\"center\" style={{position: \"absolute\", backgroundColor:\"red\", width: 60, height: 60, color: \"white\" ,borderRadius: 50, border: \"0px\" ,bottom: 30, left: (window.innerWidth/2)-10}}>END</button>\r\n          </div>\r\n        )\r\n    default: \r\n    return (\r\n      <div className=\"App\">\r\n        <h1 align=\"center\">CHAT APPLICATIONS</h1>\r\n           <div style={{height: 100}}/>\r\n         { this.state.isConnected? \r\n         <React.Fragment>\r\n           <h2 align=\"center\">{`ME: ${this.state.myId}, FRIEND: ${this.state.friendId}`}</h2>\r\n          <div style={{paddingLeft: \"32%\", width: \"100%\"}}>\r\n              <button  style={{width: 300, height: 50, borderRadius: 30, margin:\"auto\"}} onClick={() => this.handleInitiateCall()}>START CALL</button>\r\n          </div>\r\n         </React.Fragment>:  \r\n         <React.Fragment>\r\n         <div style={{width: \"100%\", paddingLeft: \"34%\"}}>\r\n           <span style={{fontSize: 30}}>Me:</span><br/>\r\n           <input style={{borderRadius: 20, padding: 10, fontSize: 20}}  value={this.state.myId}  onChange={(e) => this.setState({myId: e.target.value})}  type=\"text\"/>\r\n          </div>\r\n          <div style={{width: \"100%\",paddingLeft: \"34%\"}}>\r\n           <span style={{fontSize: 30}}>Friend:</span><br/>\r\n           <input style={{borderRadius: 20, padding: 10, fontSize: 20}} value={this.state.friendId}  onChange={(e) => this.setState({friendId: e.target.value})}  type=\"text\"/>\r\n          </div>\r\n          <div style={{height: 30}}/>\r\n\r\n          <div style={{paddingLeft: \"32%\", width: \"100%\"}}>\r\n           <button  style={{width: 300, height: 50, borderRadius: 30, margin:\"auto\"}} onClick={() => this.connectUser()}>Connect</button>\r\n          </div></React.Fragment>}\r\n            {/* <button onClick={() => this.handleInitiateCall()}>Call</button> */}\r\n            {/* <button onClick={() => this.answerCall(true)}>Answer</button> */}\r\n          {/* <video ref={e => this.friendStream = e} style={{width: \"100%\" ,background:\"#f0f0f0\" ,height: 500, backfaceVisibility:\"visible\"}} autoPlay />\r\n          <video ref={e => this.myStream = e} style={{width: 200, zIndex: 999  , position:\"absolute\", bottom: 10, right: 10 , height: 200, backfaceVisibility:\"visible\"}} autoPlay /> */}\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\n}\r\n\r\nexport default VideoCallingScreen;\r\n","import React from 'react';\nimport SingleChat from './components/singleChat'\nimport SingleUserChat from './components/singleUserChat'\nimport {connectChat, prepareChat} from './RTCHAT'\nimport {setUser} from './store/actions/authActions'\nimport {connect} from 'react-redux';\n// import TextMessage from './components/textMessage';\nimport {loadAllChats} from './RTCHAT'\nimport VideoChatScreen from './components/videoChatScreen'\nconst PRIMARY = \"#5BBC93\"\nconst SECONDRY = \"white\";\n\nclass App extends React.Component{\n\n\n  state={\n    calling: true\n  }\n\n  handleConnect = (uc) => {\n    connectChat(uc.cid);\n   \n    prepareChat(uc.cid)\n    this.props.setUser(uc.user);\n    \n  }\n  componentDidMount() {\n    // loadAllChats()\n  }\n \n\n\n\n\n  render(){\n\n    if(this.state.calling){\n      return (\n        <VideoChatScreen/>\n      )\n    }\n\n  return (\n    \n    <div key={0} style={{width: \"100%\", height: \"100%\"}}>\n     \n\n\n\n     { this.props.user._id !== \"\" ?\n      (<div  key={1} style={{width: \"100%\", height: 700 }}>\n         <div  key={2} style={{width: \"20%\", height: \"100%\", backgroundColor: \"white\", float:\"left\"}}>\n          <div  key={3} style={{width: \"100%\", height: 100, textAlign:\"center\"}}>\n            <span  key={4} style={{fontSize: 25, color: PRIMARY}}>{this.props.user.username}</span>\n          </div>\n          {\n            this.props.userChat.map((sc, index) => <SingleUserChat key={index} singleChat={sc}/> )\n          }\n         \n        </div>\n        <div  key={5} style={{width: \"80%\", float:\"right\"}}>\n          <SingleChat  key={6} user={this.props.user} userChat={this.props.userChat} onConnect={this.handleConnectSocket} onSendMessage={this.handleSendMessage}/>\n        </div>\n      </div>) :\n      <div  key={7} align=\"center\" style={{margin:\"auto\", marginTop: 100}}>\n        \n              {\n                  this.props.userChat.map((uc, index) => \n                  <button key={index} onClick={() => this.handleConnect(uc)} style={{ width: \"200px\", height: \"100px\", cursor:\"pointer\" , border: \"2px solid \"+uc.reserved? SECONDRY: PRIMARY, borderRadius: 30 }}>\n                        <span style={{color: uc.reserved? SECONDRY :PRIMARY, fontSize: 18}}>{uc.title}</span>\n                  </button>)\n              }\n       </div>}\n    </div>\n   \n  );\n  }\n}\n\nconst mapStateToProps = state => ({\n  userChat: state.ChatReducer.Chat, \n  user: state.AuthReducer.user\n})\nexport default connect(mapStateToProps, {setUser})(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux'\nimport store from './store'\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}