{"version":3,"sources":["RTCHAT/myMessage.js","components/textMessage.js","RTCHAT/communicator.js","RTCHAT/mySingleUserChat.js","components/businessLogic/myUser.js","RTCHAT/myGroupChat.js","store/reducers/chatReducer/index.js","RTCHAT/types.js","store/reducers/authReducer/index.js","store/reducers/index.js","store/index.js","RTCHAT/index.js","store/actions/authActions.js","components/singleChat.js","components/singleUserChat.js","App.js","serviceWorker.js","index.js"],"names":["MyMessage","this","_id","Math","random","from","to","body","status","SENDING","sentTimeDate","Date","now","seenTimeDate","type","TEXT","chatType","setAttributes","setValue","message","setAsGroupMessage","VIDEO","IMAGE","SENT","RECIEVED","SEEN","TextMessage","state","props","isMe","cid","backColor","foreColor","alignment","style","width","float","display","minWidth","maxWidth","backgroundColor","padding","marginTop","color","toLocaleTimeString","Component","Communicator","socket","dataHandler","ackEmitter","ackEmitters","connect","_dataHandler","_ackEmitter","_ackEmitters","io","query","send","console","log","emit","ack","markSeen","messages","recieverCid","on","res","error","timeout","reason","attemptNumber","MySingleUserChat","user","username","title","selected","unseenCount","lastMessage","singleChat","MyUser","MyGroupChat","gcid","users","setTimeout","AddGroupChatListner","Chat","ChatReducer","mState","action","payload","ucId","ucIndex","findIndex","uc","push","sort","a","b","clone","messageSent","ucsIndex","hindex","length","filter","c","msg","ackIndex","ackmIndex","m","msgs","statuss","ccid","acksIndex","markCounter","msgsIndex","element","seenmIndex","msgseen","obj","JSON","parse","stringify","AuthReducer","RootReducer","combineReducers","middleWare","thunk","initialState","store","window","__REDUX_DEVTOOLS_EXTENSION__","createStore","compose","applyMiddleware","MyCommunicator","MyCommunicatorObj","MyGroupChatCommunicators","dispatch","connectChat","sendMessage","sentDataHandler","setUser","SingleChat","messageBody","chat","handleSendMesage","friend","setState","userChat","height","fontSize","marginLeft","overflowY","map","index","key","onFocus","getState","cIndex","value","onChange","e","target","borderRadius","placeholder","onClick","border","React","SingleUserChat","cursor","borderBottom","align","zIndex","textAlign","textOverflow","App","handleConnect","sc","onConnect","handleConnectSocket","onSendMessage","handleSendMessage","margin","reserved","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"+PACMA,EAWF,aAAc,IAAD,2BACTC,KAAKC,IAAoB,IAAdC,KAAKC,SAAgBD,KAAKC,SACrCH,KAAKI,KAAO,GACZJ,KAAKK,GAAK,GACVL,KAAKM,KAAO,GACZN,KAAKO,OAASR,EAAUS,QACxBR,KAAKS,aAAeC,KAAKC,MACzBX,KAAKY,aAAe,KACpBZ,KAAKa,KAAOd,EAAUe,KACtBd,KAAKe,SAAW,SAChBf,KAAKgB,cAAgB,SAACZ,EAAMC,EAAIC,GAI5B,OAHA,EAAKF,KAAOA,EACZ,EAAKC,GAAKA,EACV,EAAKC,KAAOA,EACL,GAGXN,KAAKiB,SAAW,SAACC,GAOb,OANA,EAAKjB,IAAMiB,EAAQjB,IACnB,EAAKG,KAAMc,EAAQd,KACnB,EAAKC,GAAKa,EAAQb,GAClB,EAAKC,KAAOY,EAAQZ,KACpB,EAAKC,OAASW,EAAQX,OACtB,EAAKM,KAAOK,EAAQL,KACb,GAEXb,KAAKmB,kBAAoB,WAErB,OADA,EAAKJ,SAAW,QACT,IAvCbhB,EACKe,KAAO,OADZf,EAEKqB,MAAQ,QAFbrB,EAGKsB,MAAQ,QAHbtB,EAMKS,QAAU,OANfT,EAOKuB,KAAO,QAPZvB,EAQKwB,SAAW,SARhBxB,EASKyB,KAAO,UAmCHzB,QCjBA0B,E,4MApBXC,MAAQ,G,uDAEJ,IAAMR,EAAUlB,KAAK2B,MAAMT,QAAQlB,KAAK2B,MAAMT,SAAS,IAAInB,GAAYiB,cAAc,GAAI,IAAK,4FACxFY,EAAO5B,KAAK2B,MAAME,MAAQX,EAAQd,KAClC0B,EAAYF,EATT,UADD,UAWFG,EAAYH,EAXV,UACC,UAWHI,EAAYJ,EAAM,QAAS,OAEjC,OACI,yBAAKK,MAAO,CAACC,MAAO,OAAQC,MAAO,SAC/B,yBAAKF,MAAO,CAACG,QAAS,QAAQC,SAAU,MAAOC,SAAU,MAAQH,MAAOH,EAAWO,gBAAiBT,EAAWU,QAAS,GAAIC,UAAW,IACnI,0BAAMR,MAAO,CAACS,MAAOX,IAArB,IAAmCb,EAAQZ,MAC3C,0BAAM2B,MAAO,CAACE,MAAO,QAASO,MAAOxB,EAAQX,SAAU,IAAI,IAAIG,KAAKQ,EAAQT,cAAckC,qBAA1F,Y,GAbMC,a,iBC8GXC,EAlHX,aAAc,IAAD,2BACT7C,KAAK8C,OAAS,KACd9C,KAAK+C,YAAc,KACnB/C,KAAKgD,WAAa,KAClBhD,KAAKiD,YAAc,KACnBjD,KAAK6B,IAAM,KAKX7B,KAAKkD,QAAU,SAACrB,EAAKsB,EAAcC,EAAaC,GAC5C,EAAKxB,IAAMA,EACX,EAAKkB,YAAcI,EACnB,EAAKH,WAAaI,EAClB,EAAKH,YAAcI,EACnB,EAAKP,OAASQ,IAAG,iBAAkB,CAACC,MAAO,CAAC1B,IAAKA,KAGjD,EAAK2B,KAAO,SAACtC,GACTuC,QAAQC,IAAI,gBACZ,EAAKZ,OAAOa,KAAK,gBAAiB,CAACJ,MAAO,CAACrC,QAASA,KAAW,SAAC0C,GAC5D,EAAKZ,WAAWY,EAAI1C,QAASnB,EAAUuB,SAE3CmC,QAAQC,IAAI,gBACZ,EAAKX,YAAY7B,IAGrB,EAAK2C,SAAW,SAACC,EAAUC,GACvB,EAAKjB,OAAOa,KAAK,iBAAkB,CAACJ,MAAO,CAACO,SAAUA,EAAUzD,GAAI0D,EAAa3D,KAAM,EAAKyB,OAAO,SAAC+B,GAChG,EAAKX,YAAYa,EAAUC,EAAahE,EAAUyB,UAK1D,EAAKsB,OAAOkB,GAAG,oBAAoB,SAACC,GAChCR,QAAQC,IAAI,qBACZ,IAAIH,EAAQU,EAAIV,MAChB,EAAKT,OAAOa,KAAK,oBAAqB,CAACJ,MAAO,CAACrC,QAAS,CAACjB,IAAKsD,EAAMrC,QAAQjB,IAAKI,GAAIkD,EAAMrC,QAAQb,GAAID,KAAMmD,EAAMrC,QAAQd,SAC3H,EAAK2C,YAAYQ,EAAMrC,YAG3B,EAAK4B,OAAOkB,GAAG,iBAAiB,SAACC,GAC7B,EAAKjB,WAAWiB,EAAIV,MAAMrC,QAASnB,EAAUwB,aAGjD,EAAKuB,OAAOkB,GAAG,cAAc,SAACC,GAC1B,EAAKhB,YAAYgB,EAAIV,MAAMO,SAAUG,EAAIV,MAAMnD,KAAML,EAAUyB,SAenE,EAAKsB,OAAOkB,GAAG,WAAW,WACtBP,QAAQC,IAAI,wBAGhB,EAAKZ,OAAOkB,GAAG,iBAAiB,SAACE,GAC7BT,QAAQC,IAAI,kBACZD,QAAQC,IAAIQ,MAGhB,EAAKpB,OAAOkB,GAAG,mBAAmB,SAACG,GAC/BV,QAAQC,IAAI,oBACZD,QAAQC,IAAIS,MAGhB,EAAKrB,OAAOkB,GAAG,cAAc,SAACI,GACX,yBAAXA,GAEF,EAAKtB,OAAOI,aAKhB,EAAKJ,OAAOkB,GAAG,aAAa,SAACK,GAC3BZ,QAAQC,IAAI,uBACZD,QAAQC,IAAIW,MAId,EAAKvB,OAAOkB,GAAG,qBAAqB,SAACK,GACnCZ,QAAQC,IAAI,sBACZD,QAAQC,IAAIW,MAId,EAAKvB,OAAOkB,GAAG,gBAAgB,SAACK,GAC9BZ,QAAQC,IAAI,sBAGd,EAAKZ,OAAOkB,GAAG,mBAAmB,SAACE,GACjCT,QAAQC,IAAI,wB,eCvEbY,EA7BX,aAA2C,IAAD,OAA9BC,EAA8B,uDAAvB,CAACtE,IAAI,GAAIuE,SAAU,IAAI,oBACtCxE,KAAK6B,IAAM0C,EAAKtE,IAChBD,KAAKyE,MAAMF,EAAKC,SAChBxE,KAAKuE,KAAOA,EACZvE,KAAK8D,SAAY,GACjB9D,KAAK0E,UAAW,EAChB1E,KAAK2E,YAAc,EACnB3E,KAAK4E,YAAc,IAAI7E,EACvBC,KAAKe,SAAW,SAEhBf,KAAKgB,cAAgB,SAAE8C,EAAUY,GAA+B,IAArBC,EAAoB,uDAAN,EAOrD,OANA,EAAKJ,KAAMA,EACX,EAAK1C,IAAM0C,EAAKtE,IAChB,EAAKwE,MAAMF,EAAKC,SAChB,EAAKV,SAAWA,EAChB,EAAKY,SAAWA,EAChB,EAAKC,YAAcA,EACZ,GAEX3E,KAAKiB,SAAW,SAAC4D,GAMb,OALA,EAAKhD,IAAMgD,EAAWhD,IACtB,EAAK0C,KAAOM,EAAWN,KACvB,EAAKT,SAAUe,EAAWf,SAC1B,EAAKY,SAAWG,EAAWH,SAC3B,EAAKC,YAAcE,EAAWF,YACvB,IChBJG,EAXX,aAAc,IAAD,2BACT9E,KAAKC,IAAM,GACXD,KAAKwE,SAAW,GAEhBxE,KAAKgB,cAAgB,SAACf,EAAKuE,GAGvB,OAFA,EAAKvE,IAAOA,EACZ,EAAKuE,SAAWA,EACT,ICyBJO,EA9BX,WAAaC,GAAO,IAAD,2BACfhF,KAAK6B,IAAMmD,EACXhF,KAAKyE,MAAM,aACXzE,KAAKiF,MAAQ,GACbjF,KAAK8D,SAAY,GACjB9D,KAAK0E,UAAW,EAChB1E,KAAK2E,YAAc,EACnB3E,KAAK4E,YAAc,IAAI7E,EACvBC,KAAKe,SAAW,QAEhBf,KAAKgB,cAAgB,SAAEiE,EAAQnB,EAAUY,GAQrC,OAPAQ,YAAW,kBAAKC,EAAoB,EAAKtD,OAAM,KAE/C,EAAKoD,MAAOA,EAEZ,EAAKnB,SAAWA,EAChB,EAAKY,SAAWA,EAET,GAEX1E,KAAKiB,SAAW,SAAC4D,GAMb,OAAO,ICxBbnD,EAAQ,CACV0D,KAAM,CACF,IAAId,GAAiB,IAAIQ,GAAS9D,cAAc,IAAK,iBAAiBA,cAAc,IAAI,GACxF,IAAIsD,GAAiB,IAAIQ,GAAS9D,cAAc,IAAK,WAAWA,cAAc,IAAI,GAClF,IAAIsD,GAAiB,IAAIQ,GAAS9D,cAAc,IAAK,WAAWA,cAAc,IAAI,GAClF,IAAI+D,EAAY,OAAQ/D,cAAc,CAAC,IAAM,IAAK,KAAM,IAAI,GAC5D,IAAI+D,EAAY,OAAQ/D,cAAc,CAAC,IAAM,IAAK,KAAM,IAAI,IAEhEuD,KAAM,CACFtE,IAAK,GACLuE,SAAU,KAsGHa,EAjGK,WAAkC,IAAjCC,EAAgC,sEAAnB5D,GAAQ6D,EAAW,uCACjD,OAAOA,EAAO1E,MAEV,ICpBgC,2BDsB5B,IAAIK,EAAUqE,EAAOC,QAAQtE,QACzBuE,EAA4B,UAArBvE,EAAQH,SAAsBG,EAAQb,GAAKa,EAAQd,KAC9D,GAAGc,EAAQd,OAASkF,EAAOf,KAAKtE,IAAI,CAChCwD,QAAQC,IAAI,yCACZD,QAAQC,IAAIxC,GACZ,IAAIwE,EAAUJ,EAAOF,KAAKO,WAAU,SAAAC,GAAE,OAAIA,EAAG/D,MAAQ4D,KAClDC,GAAW,GACVJ,EAAOF,KAAKM,GAAS5B,SAAS+B,KAAK3E,GACnCoE,EAAOF,KAAKM,GAASd,YAAc1D,EAEnCoE,EAAOF,KAAKU,MAAK,SAACC,EAAGC,GAAJ,OAAWA,EAAEpB,YAAYnE,aAAcsF,EAAEnB,YAAYnE,kBAGtEgD,QAAQC,IAAI,0BACZD,QAAQC,IAAIxC,IAIpB,OAAO+E,EAAMX,GACjB,ICxCqC,gCDyC7B7B,QAAQC,IAAI,yCACZ,IAAIwC,EAAcX,EAAOC,QAAQtE,QACjCuC,QAAQC,IAAIwC,GACZ,IAAIC,EAAWb,EAAOF,KAAKO,WAAU,SAAAC,GAAE,OAAIA,EAAG/D,MAAQqE,EAAY7F,MAUlE,OATG8F,GAAY,GACXb,EAAOF,KAAKe,GAAUrC,SAAS+B,KAAKK,GACpCZ,EAAOF,KAAKe,GAAUvB,YAAcsB,EACxCZ,EAAOF,KAAKU,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAEpB,YAAYnE,aAAesF,EAAEnB,YAAYnE,kBAGlEgD,QAAQC,IAAI,0BACZD,QAAQC,IAAIwC,IAETD,EAAMX,GAErB,IC5D+B,2BD8D3B,IADA,IAAIzD,EAAM0D,EAAOC,QAAQ3D,IAChBuE,EAAS,EAAGA,EAASd,EAAOF,KAAKiB,OAAQD,IAC1Cd,EAAOF,KAAKgB,GAAQvE,MAAQA,EAC5ByD,EAAOF,KAAKgB,GAAQ1B,UAAW,EAG/BY,EAAOF,KAAKgB,GAAQ1B,UAAW,EAGvC,OAAOuB,EAAMX,GACjB,IClEyB,qBDoErB,OADAA,EAAOF,KAAOE,EAAOF,KAAKkB,QAAO,SAAAC,GAAC,OAAIA,EAAE1E,MAAQ0D,EAAOC,QAAQ3D,OACxDoE,EAAMX,GAEjB,IC1EsB,iBD2EhB,IAAIkB,EAAMjB,EAAOC,QAAQtE,QACrBX,EAASgF,EAAOC,QAAQjF,OACxBkG,EAAWnB,EAAOF,KAAKO,WAAU,SAAAY,GAAC,OAAIA,EAAE1E,MAAQ2E,EAAInG,MACxD,GAAGoG,GAAY,EAAE,CACb,IAAIC,EAAYpB,EAAOF,KAAKqB,GAAU3C,SAAS6B,WAAU,SAAAgB,GAAC,OAAIA,EAAE1G,MAAQuG,EAAIvG,OACzEyG,GAAa,IACZpB,EAAOF,KAAKqB,GAAU3C,SAAS4C,GAAWnG,OAASA,GAG3D,OAAO0F,EAAMX,GAEnB,ICrFuB,kBDsFnB,IAAIsB,EAAOrB,EAAOC,QAAQ1B,SACtB+C,EAAUtB,EAAOC,QAAQjF,OACzBuG,EAAOvB,EAAOC,QAAQ3D,IACtBkF,EAAYzB,EAAOF,KAAKO,WAAU,SAAAY,GAAC,OAAIA,EAAE1E,MAAQiF,KACjDE,EAAc,EAClB,GAAGD,GAAa,EACZ,IAAK,IAAIE,EAAY3B,EAAOF,KAAK2B,GAAWjD,SAASuC,OAAQ,EAAIY,GAAa,EAAIA,IAAa,CAE3F,IADA,IAAMC,EAAU5B,EAAOF,KAAK2B,GAAWjD,SAASmD,GACvCE,EAAa,EAAGA,EAAaP,EAAKP,OAAQc,IAAc,CAC7D,IAAMC,EAAUR,EAAKO,GACrB,GAAGC,EAAQnH,MAAQiH,EAAQjH,IAAI,CAC3BqF,EAAOF,KAAK2B,GAAWjD,SAASmD,GAAW1G,OAASsG,EACpDG,IACA,OAGR,GAAGA,GAAeJ,EAAKP,OACnB,MAIV,OAAOJ,EAAMX,GACnB,IAAK,WAEK,OADJA,EAAOf,KAAOgB,EAAOC,QAAQjB,KAClB0B,EAAMX,GACvB,QACI,OAAOW,EAAMX,KAKnBW,EAAQ,SAACoB,GACX,OAAOC,KAAKC,MAAMD,KAAKE,UAAUH,KEvH/B3F,EAAO,CACT6C,KAAM,CACFtE,IAAK,GACLuE,SAAU,KAcHiD,EAVK,WAAkC,IAAjCnC,EAAgC,sEAAnB5D,GAAQ6D,EAAW,uCACjD,OAAOA,EAAO1E,MACV,IAAK,WAED,OADJyE,EAAOf,KAAOgB,EAAOC,QAAQjB,KAClB0B,EAAMX,GAEjB,QACC,OAAOW,EAAMX,KAKhBW,EAAQ,SAACoB,GACX,OAAOC,KAAKC,MAAMD,KAAKE,UAAUH,KCbtBK,EAJKC,YAAgB,CAChCtC,cACAoC,gBCHEG,EAAa,C,MAACC,GAEdC,EAAc,GAqBLC,EAhBZC,OAAOC,6BACEC,YACJR,EACAI,EACAK,YAAQC,IAAe,WAAf,EAAmBR,GAC3BI,OAAOC,iCAIHC,YACJR,EACAI,EACAK,YAAQC,IAAe,WAAf,EAAmBR,KClBtBS,EAAiB,IAAIC,EAG5BC,EAA2B,GAY3BvF,EAAa,SAAC9B,EAASX,GACzBwH,EAAMS,SAAS,CACX3H,KJpBsB,iBIqBtB2E,QAAS,CAACtE,QAASA,EAASX,aAG9B0C,EAAc,SAACa,EAAUjC,EAAKtB,GAChCwH,EAAMS,SAAS,CACX3H,KJzBuB,kBI0BvB2E,QAAS,CAAC1B,SAAUA,EAAUjC,IAAIA,EAAKtB,OAAOA,MAIhDwC,EAAc,SAAC7B,GACnB6G,EAAMS,SAAS,CACX3H,KJ/BkC,2BIgClC2E,QAAS,CAACtE,QAASA,MAWZuH,EAAc,SAAC5G,GACxBwG,EAAenF,QAAQrB,EAAKkB,EAAaC,EAAYC,GACrD8E,EAAMS,SAAS,CACX3H,KJ5CyB,qBI6CzB2E,QAAS,CAAC3D,IAAKA,MAGV6G,EAAc,SAACxH,GACxBmH,EAAe7E,KAAKtC,GAfA,SAACA,GACpB6G,EAAMS,SAAS,CACX3H,KJrCoC,gCIsCpC2E,QAAS,CAACtE,QAASA,KAaxByH,CAAgBzH,IAoBPiE,EAAsB,SAACH,GAChCuD,EAAyB1C,MAAK,IAAIyC,GAAoBpF,QAAQ8B,EAAMjC,EAAaC,EAAYA,K,OC5EpF4F,EAAU,SAACrE,GAAD,OAAU,SAAAiE,GAC7BA,EAAS,CACL3H,KAAM,WACN2E,QAAS,CAACjB,KAAMA,OCOlBsE,E,4MACJnH,MAAM,CAGJoH,YAAa,GACbC,KAAM,I,EAGRC,iBAAmB,SAACC,EAAQpH,EAAKd,GAC7B,EAAKmI,SAAS,CAACJ,YAAa,KAC5B,IAAI5H,EAAU,KAEZA,EADc,UAAbH,GACU,IAAIhB,GAAYiB,cAAca,EAAKoH,EAAQ,EAAKvH,MAAMoH,aAAa3H,qBAEnE,IAAIpB,GAAYiB,cAAca,EAAKoH,EAAQ,EAAKvH,MAAMoH,aAEnEJ,EAAYxH,I,uDAKP,IAAD,OACEiI,EAAWnJ,KAAK2B,MAAMwH,SAAS7C,QAAO,SAAAV,GAAE,OAAoB,IAAhBA,EAAGlB,YAAmB,GAEvE,QAAIyE,GAIP,yBAAKlH,MAAO,CAACC,MAAO,OAAQkH,OAAQ,SACjC,yBAAKnH,MAAO,CAACC,MAAO,OAASkH,OAAQ,IAAK7G,gBAjCjC,YA0CJ,0BAAMN,MAAO,CAACoH,SAAU,GAAI3G,MAAO,QAAS4G,WAAY,KAAMH,EAAS1E,QAM5E,yBAAKxC,MAAO,CAACmH,OAAQ,IAAKlH,MAAO,OAAQqH,UAAW,SAAUhH,gBAAiB,UAG1E4G,EAASrF,SAAS0F,KAAI,SAAC7C,EAAG8C,GAAJ,OAAc,yBAAKC,IAAKD,GAAO,kBAAC,EAAD,CAAavI,QAASyF,EAAG9E,IAAK,EAAKF,MAAM4C,KAAKtE,MAAM,kCAM9G,yBAAKgC,MAAO,CAACC,MAAO,OAAQkH,OAAQ,GAAI7G,gBAxD9B,UA2DT,2BAAOoH,QAAS,kBFLA,SAAC9H,GACrB,IAAIkH,EAAOhB,EAAM6B,WAAWvE,YAAYD,KACpCyE,EAASd,EAAKpD,WAAU,SAAAY,GAAC,OAAIA,EAAE1E,MAAQA,KAC3C,GAAGgI,GAAU,EAAE,CACX,IAAI/F,EAAWiF,EAAKc,GAAQ/F,SAASwC,QAAO,SAAAK,GAAC,OAAMA,EAAEpG,SAAWR,EAAUS,SAAWmG,EAAEpG,SAAWR,EAAUwB,UAAYoF,EAAEpG,SAAWR,EAAUuB,OAASqF,EAAEvG,OAASyB,KACnKwG,EAAexE,SAASC,EAAUjC,IEAZgC,CAASsF,EAAStH,MAAMiI,MAAO9J,KAAK0B,MAAMoH,YAAaiB,SAAU,SAACC,GAAD,OAAO,EAAKd,SAAS,CAACJ,YAAakB,EAAEC,OAAOH,SAAS7H,MAAO,CAACiI,aAAc,GAAI1H,QAAS,EAAGE,MA5D1K,UA4D0LR,MAAO,MAAOkH,OAAQ,GAAIC,SAAU,IAAKc,YAAY,gBAGvP,4BAAQC,QAAS,kBAAM,EAAKpB,iBAAiBG,EAAStH,IAAK,EAAKF,MAAM4C,KAAKtE,IAAKkJ,EAASpI,WAAWkB,MAAO,CAACM,gBA/DpG,UA+D8H8H,OAAQ,kBAAuBH,aAAc,GAAIhI,MAAO,MAAOkH,OAAQ,KAC3M,0BAAMnH,MAAO,CAACS,MA/DP,QA+DwB2G,SAAU,KAAzC,e,GA5DeiB,IAAM1H,WAqEhBM,cAAQ,KAAM,CAAC0F,WAAf1F,CAAyB2F,GCnDzB0B,E,4MAtBX7I,MAAQ,G,uDAEJ,IAAMkE,EAAK5F,KAAK2B,MAAMkD,WAChBD,EAAcgB,EAAG9B,SAASuC,OAAS,GAAIT,EAAG9B,SAAS8B,EAAG9B,SAASuC,OAAO,GAAG/F,KACzEqE,EAAciB,EAAG9B,SAASa,YAChC,OACI,yBAAKyF,QAAS,kBHAUvI,EGAgB+D,EAAG/D,SHCnDkG,EAAMS,SAAS,CACX3H,KJd+B,2BIe/B2E,QAAS,CAAC3D,IAAKA,KAHY,IAACA,GGAyBI,MAAO,CAAEuI,OAAO,UAAUtI,MAAO,OAAQkH,OAAQ,IAAK7G,gBAAiBqD,EAAGlB,SAAU,UAAW,QAAS+F,aAAc,sBACrK,yBAAKC,MAAM,SAASzI,MAAO,CAAEC,MAAO,MAAOkH,OAAQ,OAAQjH,MAAM,OAAQ+H,aAAc,GAAIG,OAAQ,sBAChG1F,EAAc,GAAI,yBAAK+F,MAAM,SAAUzI,MAAO,CAAEQ,UAAU,MAAOkI,OAAQ,GAAIpI,gBAZ9E,UAYyG2H,aAAc,GAAIhI,MAAO,OAAQkH,OAAQ,SAC7IzE,IAIP,yBAAK1C,MAAO,CAACC,MAAO,MAAOC,MAAO,UAChC,0BAAMF,MAAO,CAACoH,SAAU,GAAInH,MAAO,OAAQ0I,UAAW,WAAYhF,EAAGnB,OAAa,6BAClF,0BAAMxC,MAAO,CAAC4I,aAAc,aAAcjG,S,GAhB7BhC,aCOvBkI,E,4MAEJC,cAAgB,SAACnF,GAEf6C,EAAY7C,EAAG/D,KACf,EAAKF,MAAMiH,QAAQhD,EAAGrB,O,uDAMf,IAAD,OACR,OAEE,yBAAKmF,IAAK,EAAGzH,MAAO,CAACC,MAAO,OAAQkH,OAAQ,SACjB,KAAxBpJ,KAAK2B,MAAM4C,KAAKtE,IAChB,yBAAMyJ,IAAK,EAAGzH,MAAO,CAACC,MAAO,OAAQkH,OAAQ,MAC3C,yBAAMM,IAAK,EAAGzH,MAAO,CAACC,MAAO,MAAOkH,OAAQ,OAAQ7G,gBAAiB,QAASJ,MAAM,SACnF,yBAAMuH,IAAK,EAAGzH,MAAO,CAACC,MAAO,OAAQkH,OAAQ,IAAKwB,UAAU,WAC1D,0BAAOlB,IAAK,EAAGzH,MAAO,CAACoH,SAAU,GAAI3G,MAtBjC,YAsBmD1C,KAAK2B,MAAM4C,KAAKC,WAGvExE,KAAK2B,MAAMwH,SAASK,KAAI,SAACwB,EAAIvB,GAAL,OAAe,kBAAC,EAAD,CAAgBC,IAAKD,EAAO5E,WAAYmG,QAInF,yBAAMtB,IAAK,EAAGzH,MAAO,CAACC,MAAO,MAAOC,MAAM,UACxC,kBAAC,EAAD,CAAauH,IAAK,EAAGnF,KAAMvE,KAAK2B,MAAM4C,KAAM4E,SAAUnJ,KAAK2B,MAAMwH,SAAU8B,UAAWjL,KAAKkL,oBAAqBC,cAAenL,KAAKoL,sBAGxI,yBAAM1B,IAAK,EAAGgB,MAAM,SAASzI,MAAO,CAACoJ,OAAO,OAAQ5I,UAAW,MAGnDzC,KAAK2B,MAAMwH,SAASK,KAAI,SAAC5D,EAAI6D,GAAL,OACxB,4BAAQC,IAAKD,EAAOW,QAAS,kBAAM,EAAKW,cAAcnF,IAAK3D,MAAO,CAAEC,MAAO,QAASkH,OAAQ,QAASoB,OAAO,UAAYH,OApCzH,QAoC8KH,aAAc,KACrL,0BAAMjI,MAAO,CAACS,MAAOkD,EAAG0F,SArC/B,QADD,UAsC6DjC,SAAU,KAAMzD,EAAGnB,iB,GAnC9E6F,IAAM1H,WAiDTM,eAJS,SAAAxB,GAAK,MAAK,CAChCyH,SAAUzH,EAAM2D,YAAYD,KAC5Bb,KAAM7C,EAAM+F,YAAYlD,QAEc,CAACqE,WAA1B1F,CAAoC4H,GCjD/BS,QACW,cAA7BvD,OAAOwD,SAASC,UAEe,UAA7BzD,OAAOwD,SAASC,UAEhBzD,OAAOwD,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAU9D,MAAOA,GACf,kBAAC,EAAD,QAGJ+D,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAApI,GACLT,QAAQS,MAAMA,EAAMhD,c","file":"static/js/main.828b10b8.chunk.js","sourcesContent":["\r\nclass MyMessage{\r\n    static TEXT = \"TEXT\";\r\n    static VIDEO = \"VIDEO\";\r\n    static IMAGE = \"IMAGE\";\r\n\r\n\r\n    static SENDING = \"gray\";\r\n    static SENT = \"black\";\r\n    static RECIEVED = \"yellow\";\r\n    static SEEN = \"#0D4330\";\r\n\r\n    constructor(){\r\n        this._id = Math.random()*100000*Math.random();\r\n        this.from = \"\";\r\n        this.to = \"\";\r\n        this.body = \"\";\r\n        this.status = MyMessage.SENDING;\r\n        this.sentTimeDate = Date.now();\r\n        this.seenTimeDate = null\r\n        this.type = MyMessage.TEXT;\r\n        this.chatType = \"single\"\r\n        this.setAttributes = (from, to, body) => {\r\n            this.from = from;\r\n            this.to = to;\r\n            this.body = body;\r\n            return this;\r\n        }\r\n        \r\n        this.setValue = (message) => {\r\n            this._id = message._id;\r\n            this.from =message.from;\r\n            this.to = message.to;\r\n            this.body = message.body;\r\n            this.status = message.status;\r\n            this.type = message.type;\r\n            return this;\r\n        }\r\n        this.setAsGroupMessage = () => {\r\n            this.chatType = \"group\";\r\n            return this;\r\n        }\r\n    }\r\n\r\n}\r\nexport default MyMessage;","import React, { Component } from 'react';\r\nimport MyMessage from '../RTCHAT/myMessage';\r\nconst PRIMARY = \"#5BBC93\"\r\nconst SECONDRY = \"#F2F3F8\";\r\n\r\n\r\n\r\nclass TextMessage extends Component {\r\n    state = {  }\r\n    render() { \r\n        const message = this.props.message?this.props.message: new MyMessage().setAttributes(\"\", \"a\", \"abasdfasdf asdfasdfasdfs dfasdfasdfasdf asdfasdfasdfasd fasdfasdfasd fasdfasdfc dedfsadf\") ;\r\n        const isMe = this.props.cid === message.from;\r\n        const backColor = isMe? SECONDRY:  PRIMARY\r\n        const foreColor = isMe? PRIMARY:  SECONDRY\r\n        const alignment = isMe? \"right\": \"left\";\r\n\r\n        return ( \r\n            <div style={{width: \"100%\", float: \"left\"}}>\r\n                <div style={{display: \"block\",minWidth: \"40%\", maxWidth: \"70%\" , float: alignment, backgroundColor: backColor, padding: 10, marginTop: 5 }}>\r\n                    <span style={{color: foreColor}}> {message.body}</span>\r\n                    <span style={{float: \"right\", color: message.status}}>{\" \"+new Date(message.sentTimeDate).toLocaleTimeString()} o</span>\r\n                </div>\r\n            </div>\r\n         \r\n         );\r\n    }\r\n}\r\n \r\nexport default TextMessage;","import io from \"socket.io-client\"\r\nimport MyMessage from \"./myMessage\";\r\nclass Communicator {\r\n    constructor(){\r\n        this.socket = null\r\n        this.dataHandler = null;\r\n        this.ackEmitter = null;\r\n        this.ackEmitters = null;\r\n        this.cid = null;\r\n      \r\n\r\n\r\n\r\n        this.connect = (cid, _dataHandler, _ackEmitter, _ackEmitters) => {\r\n            this.cid = cid;\r\n            this.dataHandler = _dataHandler;\r\n            this.ackEmitter = _ackEmitter;\r\n            this.ackEmitters = _ackEmitters;\r\n            this.socket = io(\"localhost:5000\", {query: {cid: cid}})\r\n          \r\n          \r\n            this.send = (message) => {\r\n                console.log(\"EMIT ON SENT\")\r\n                this.socket.emit(\"onMessageSent\", {query: {message: message}}, (ack) => {\r\n                    this.ackEmitter(ack.message, MyMessage.SENT)\r\n                }) ;\r\n                console.log(\"onSentCalled\")\r\n                this.dataHandler(message);\r\n            }\r\n\r\n            this.markSeen = (messages, recieverCid) => {\r\n                this.socket.emit(\"onMarkSeenSent\", {query: {messages: messages, to: recieverCid, from: this.cid}}, (ack) => {\r\n                    this.ackEmitters(messages, recieverCid ,MyMessage.SEEN);\r\n                })\r\n            }\r\n\r\n\r\n            this.socket.on(\"onRecieveMessage\", (res) => {\r\n                console.log(\"onRecieve: called\")\r\n                let query = res.query;\r\n                this.socket.emit(\"onRecievedAckSend\", {query: {message: {_id: query.message._id, to: query.message.to, from: query.message.from}}})\r\n                this.dataHandler(query.message);\r\n            })\r\n            \r\n            this.socket.on(\"onRecievedAck\", (res) => {\r\n                this.ackEmitter(res.query.message, MyMessage.RECIEVED)\r\n            })\r\n          \r\n            this.socket.on(\"onMarkSeen\", (res) => {\r\n                this.ackEmitters(res.query.messages, res.query.from, MyMessage.SEEN)\r\n            })\r\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          //////// Connections Managers ////////////////////////////////////////////////////\r\n          \r\n            this.socket.on(\"connect\", () => {\r\n                console.log(\"STATUS: CONNECTED\")\r\n            })\r\n\r\n            this.socket.on(\"connect_error\", (error) => {\r\n                console.log(\"CONNECT: ERROR\")\r\n                console.log(error);\r\n            })\r\n\r\n            this.socket.on(\"connect_timeout\", (timeout) => {\r\n                console.log(\"CONNECT: TIMEOUT\");\r\n                console.log(timeout);\r\n            })\r\n\r\n            this.socket.on('disconnect', (reason) => {\r\n                if (reason === 'io server disconnect') {\r\n                  // the disconnection was initiated by the server, you need to reconnect manually\r\n                  this.socket.connect();\r\n                }\r\n                // else the socket will automatically try to reconnect\r\n              });\r\n\r\n              this.socket.on('reconnect', (attemptNumber) => {\r\n                console.log(\"SOCKET: RECONNECTED\")\r\n                console.log(attemptNumber)\r\n              });\r\n\r\n\r\n              this.socket.on('reconnect_attempt', (attemptNumber) => {\r\n                console.log(\"RECONNECT ATTEMPTS\")\r\n                console.log(attemptNumber);\r\n              });\r\n\r\n\r\n              this.socket.on('reconnecting', (attemptNumber) => {\r\n                console.log(\"RECONNECTING...\")\r\n              });\r\n\r\n              this.socket.on('reconnect_error', (error) => {\r\n                console.log(\"RECONNECT ERROR\")\r\n              });\r\n\r\n           \r\n\r\n\r\n           \r\n        }\r\n\r\n\r\n      \r\n    }\r\n}\r\n\r\nexport default Communicator;","import MyMessage from \"./myMessage\";\r\n\r\nclass MySingleUserChat{\r\n    constructor(user = {_id:\"\", username: \"\"}){\r\n        this.cid = user._id;\r\n        this.title=user.username;\r\n        this.user = user;\r\n        this.messages =  [];\r\n        this.selected = false;\r\n        this.unseenCount = 0;\r\n        this.lastMessage = new MyMessage();\r\n        this.chatType = \"single\"\r\n\r\n        this.setAttributes = ( messages, selected, unseenCount = 0) => {\r\n            this.user =user;\r\n            this.cid = user._id ;\r\n            this.title=user.username;\r\n            this.messages = messages;\r\n            this.selected = selected;\r\n            this.unseenCount = unseenCount;\r\n            return this;\r\n        }\r\n        this.setValue = (singleChat) => {\r\n            this.cid = singleChat.cid;\r\n            this.user = singleChat.user;\r\n            this.messages =singleChat.messages;\r\n            this.selected = singleChat.selected;\r\n            this.unseenCount = singleChat.unseenCount;\r\n            return this;\r\n        }\r\n    }\r\n}\r\nexport default MySingleUserChat;","class MyUser{\r\n    constructor(){\r\n        this._id = \"\";\r\n        this.username = \"\";\r\n        \r\n        this.setAttributes = (_id, username) => {\r\n            this._id  = _id;\r\n            this.username = username;\r\n            return this;\r\n        }\r\n    }\r\n}\r\nexport default MyUser;","import MyMessage from \"./myMessage\";\r\nimport {AddGroupChatListner} from './index'\r\nclass MyGroupChat{\r\n    constructor( gcid ){\r\n        this.cid = gcid;\r\n        this.title=\"Group Chat\";\r\n        this.users = [];\r\n        this.messages =  [];\r\n        this.selected = false;\r\n        this.unseenCount = 0;\r\n        this.lastMessage = new MyMessage();\r\n        this.chatType = \"group\";\r\n        \r\n        this.setAttributes = ( users  ,messages, selected) => {\r\n            setTimeout(() =>AddGroupChatListner(this.cid), 500)\r\n            \r\n            this.users =users;\r\n            // this.title=user.username;\r\n            this.messages = messages;\r\n            this.selected = selected;\r\n            // this.unseenCount = unseenCount;\r\n            return this;\r\n        }\r\n        this.setValue = (singleChat) => {\r\n            // this.cid = singleChat.cid;\r\n            // this.user = singleChat.user;\r\n            // this.messages =singleChat.messages;\r\n            // this.selected = singleChat.selected;\r\n            // this.unseenCount = singleChat.unseenCount;\r\n            return this;\r\n        }\r\n    }\r\n}\r\nexport default MyGroupChat;","import MySingleUserChat from \"../../../RTCHAT/mySingleUserChat\";\r\nimport MyUser from \"../../../components/businessLogic/myUser\";\r\nimport { USER_CHAT_DATA_COLLECTOR, USER_CHAT_SENT_DATA_COLLECTOR, USER_CHAT_HANDLE_SELECTD , HANDLE_REMOVE_CHAT, MSG_ACK_ACTION, MSGS_ACK_ACTION} from \"../../../RTCHAT/types\";\r\nimport MyGroupChat from \"../../../RTCHAT/myGroupChat\";\r\n\r\nconst state = {\r\n    Chat: [\r\n        new MySingleUserChat(new MyUser().setAttributes(\"A\", \"atamuhiuldin\")).setAttributes([], false ),\r\n        new MySingleUserChat(new MyUser().setAttributes(\"B\", \"salman\")).setAttributes([], false ),\r\n        new MySingleUserChat(new MyUser().setAttributes(\"C\", \"dawood\")).setAttributes([], false), \r\n        new MyGroupChat(\"ABC\" ).setAttributes([\"A\" , \"B\", \"C\"], [], false),\r\n        new MyGroupChat(\"CDB\" ).setAttributes([\"A\" , \"B\", \"C\"], [], false)\r\n      ], \r\n    user: {\r\n        _id: \"\", \r\n        username: \"\"\r\n    }\r\n}\r\n\r\n\r\nconst ChatReducer = (mState = {...state}, action) => {\r\n    switch(action.type){\r\n\r\n        case USER_CHAT_DATA_COLLECTOR:\r\n           \r\n            let message = action.payload.message;\r\n            let ucId = message.chatType === \"group\"? message.to : message.from\r\n            if(message.from !== mState.user._id){\r\n                console.log(\"=========user data collection========\")\r\n                console.log(message)\r\n                let ucIndex = mState.Chat.findIndex(uc => uc.cid === ucId);\r\n                if(ucIndex >= 0){\r\n                    mState.Chat[ucIndex].messages.push(message);\r\n                    mState.Chat[ucIndex].lastMessage = message;\r\n                    \r\n                    mState.Chat.sort((a, b) =>  b.lastMessage.sentTimeDate- a.lastMessage.sentTimeDate)\r\n    \r\n                }else{\r\n                    console.log(\"Undefined user message\")\r\n                    console.log(message);\r\n                }\r\n            }\r\n            \r\n            return clone(mState);\r\n        case USER_CHAT_SENT_DATA_COLLECTOR:\r\n                console.log(\"=========send data collection========\")\r\n                let messageSent = action.payload.message;\r\n                console.log(messageSent)\r\n                let ucsIndex = mState.Chat.findIndex(uc => uc.cid === messageSent.to);\r\n                if(ucsIndex >= 0){\r\n                    mState.Chat[ucsIndex].messages.push(messageSent);\r\n                    mState.Chat[ucsIndex].lastMessage = messageSent;\r\n                mState.Chat.sort((a, b) => b.lastMessage.sentTimeDate - a.lastMessage.sentTimeDate )\r\n\r\n                }else{\r\n                    console.log(\"Undefined user message\")\r\n                    console.log(messageSent);\r\n                }\r\n                return clone(mState);\r\n        \r\n        case USER_CHAT_HANDLE_SELECTD:\r\n            let cid = action.payload.cid;\r\n            for (let hindex = 0; hindex < mState.Chat.length; hindex++) {\r\n                if( mState.Chat[hindex].cid === cid){\r\n                    mState.Chat[hindex].selected = true\r\n                  \r\n                }else{\r\n                    mState.Chat[hindex].selected = false\r\n                }\r\n              }\r\n            return clone(mState);\r\n        case HANDLE_REMOVE_CHAT:\r\n            mState.Chat = mState.Chat.filter(c => c.cid !== action.payload.cid); \r\n            return clone(mState)\r\n        \r\n        case MSG_ACK_ACTION: \r\n              let msg = action.payload.message;\r\n              let status = action.payload.status;\r\n              let ackIndex = mState.Chat.findIndex(c => c.cid === msg.to)\r\n              if(ackIndex >= 0){\r\n                  let ackmIndex = mState.Chat[ackIndex].messages.findIndex(m => m._id === msg._id )\r\n                  if(ackmIndex >= 0){\r\n                      mState.Chat[ackIndex].messages[ackmIndex].status = status;\r\n                  }\r\n              }\r\n              return clone(mState);\r\n\r\n        case MSGS_ACK_ACTION: \r\n            let msgs = action.payload.messages;\r\n            let statuss = action.payload.status;\r\n            let ccid = action.payload.cid;\r\n            let acksIndex = mState.Chat.findIndex(c => c.cid === ccid)\r\n            let markCounter = 0;\r\n            if(acksIndex >= 0){\r\n                for (let msgsIndex = mState.Chat[acksIndex].messages.length -1 ; msgsIndex >= 0 ; msgsIndex--) {\r\n                    const element = mState.Chat[acksIndex].messages[msgsIndex];\r\n                    for (let seenmIndex = 0; seenmIndex < msgs.length; seenmIndex++) {\r\n                        const msgseen = msgs[seenmIndex];\r\n                        if(msgseen._id === element._id){\r\n                            mState.Chat[acksIndex].messages[msgsIndex].status = statuss;\r\n                            markCounter++;\r\n                            break; \r\n                        }\r\n                    }\r\n                    if(markCounter >= msgs.length){\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n              return clone(mState);\r\n        case \"SET_USER\": \r\n              mState.user = action.payload.user;\r\n                  return clone(mState);\r\n        default: \r\n            return clone(mState);\r\n    }\r\n}\r\nexport default ChatReducer;\r\n\r\nconst clone = (obj) =>{\r\n    return JSON.parse(JSON.stringify(obj))\r\n}","export const USER_CHAT_HANDLE_SELECTD =\"USER_CHAT_HANDLE_SELECTD\";\r\nexport const MSG_ACK_ACTION = \"MSG_ACK_ACTION\";\r\nexport const MSGS_ACK_ACTION = \"MSGS_ACK_ACTION\";\r\nexport const USER_CHAT_DATA_COLLECTOR = \"USER_CHAT_DATA_COLLECTOR\";\r\nexport const USER_CHAT_SENT_DATA_COLLECTOR = \"USER_CHAT_SENT_DATA_COLLECTOR\";\r\nexport const HANDLE_REMOVE_CHAT =\"HANDLE_REMOVE_CHAT\";\r\n","\r\nconst state ={\r\n    user: {\r\n        _id: \"\", \r\n        username: \"\"\r\n    }\r\n}\r\n\r\nconst AuthReducer = (mState = {...state}, action) => {\r\n    switch(action.type){\r\n        case \"SET_USER\": \r\n        mState.user = action.payload.user;\r\n            return clone(mState);\r\n\r\n        default: \r\n         return clone(mState);\r\n    }\r\n}\r\nexport default AuthReducer;\r\n\r\nconst clone = (obj) =>{\r\n    return JSON.parse(JSON.stringify(obj))\r\n}","import {combineReducers} from 'redux';\r\n\r\nimport ChatReducer from './chatReducer';\r\nimport AuthReducer from './authReducer';\r\nconst RootReducer = combineReducers({\r\n    ChatReducer, \r\n    AuthReducer\r\n})\r\nexport default RootReducer;","import {createStore, applyMiddleware, compose} from 'redux';\r\nimport RootReducer from './reducers';\r\nimport thunk from 'redux-thunk';\r\nconst middleWare = [thunk]\r\n\r\nconst initialState ={}\r\n\r\n\r\nlet store = null \r\n\r\nif(window.__REDUX_DEVTOOLS_EXTENSION__){\r\n    store = createStore(\r\n        RootReducer, \r\n        initialState, \r\n        compose(applyMiddleware(...middleWare), \r\n        window.__REDUX_DEVTOOLS_EXTENSION__()\r\n        )\r\n    )\r\n}else{\r\n    store = createStore(\r\n        RootReducer, \r\n        initialState, \r\n        compose(applyMiddleware(...middleWare))\r\n    )\r\n}\r\n\r\nexport default store;","import MyCommunicatorObj from './communicator';\r\nimport store from '../store';\r\nimport { USER_CHAT_HANDLE_SELECTD, MSG_ACK_ACTION,  MSGS_ACK_ACTION ,USER_CHAT_DATA_COLLECTOR, USER_CHAT_SENT_DATA_COLLECTOR, HANDLE_REMOVE_CHAT } from './types';\r\nimport MyMessage from './myMessage';\r\nexport const MyCommunicator = new MyCommunicatorObj();\r\n\r\n\r\nconst MyGroupChatCommunicators = [];\r\n\r\n\r\n\r\n\r\nexport const setUserChatSelected = (cid) => {\r\n    store.dispatch({\r\n        type: USER_CHAT_HANDLE_SELECTD, \r\n        payload: {cid: cid}\r\n    })\r\n}\r\n\r\nconst ackEmitter = (message, status) => {\r\n    store.dispatch({\r\n        type: MSG_ACK_ACTION, \r\n        payload: {message: message, status}\r\n    })\r\n}\r\nconst ackEmitters = (messages, cid ,status) => {\r\n    store.dispatch({\r\n        type: MSGS_ACK_ACTION, \r\n        payload: {messages: messages, cid:cid ,status:status}\r\n    })\r\n}\r\n\r\nconst dataHandler = (message) => {\r\n  store.dispatch({\r\n      type: USER_CHAT_DATA_COLLECTOR, \r\n      payload: {message: message}\r\n  })\r\n}\r\n\r\nconst sentDataHandler = (message) => {\r\n     store.dispatch({\r\n         type: USER_CHAT_SENT_DATA_COLLECTOR, \r\n         payload: {message: message}\r\n     })\r\n   }\r\n\r\nexport const connectChat = (cid) => {\r\n    MyCommunicator.connect(cid, dataHandler, ackEmitter, ackEmitters);\r\n    store.dispatch({\r\n        type: HANDLE_REMOVE_CHAT, \r\n        payload: {cid: cid}\r\n    })\r\n}\r\nexport const sendMessage = (message) => {\r\n    MyCommunicator.send(message)\r\n    sentDataHandler(message)\r\n}\r\n\r\n\r\n\r\n\r\nexport const markSeen = (cid) => {\r\n    let chat = store.getState().ChatReducer.Chat;\r\n    let cIndex = chat.findIndex(c => c.cid === cid);\r\n    if(cIndex >= 0){\r\n        let messages = chat[cIndex].messages.filter(m => ((m.status === MyMessage.SENDING || m.status === MyMessage.RECIEVED || m.status === MyMessage.SENT) && m.from === cid ))\r\n        MyCommunicator.markSeen(messages, cid);\r\n    }\r\n}\r\n\r\n\r\n\r\n////// Add Group Chat Listner\r\n\r\n\r\nexport const AddGroupChatListner = (gcid) => {\r\n    MyGroupChatCommunicators.push(new MyCommunicatorObj().connect(gcid, dataHandler, ackEmitter, ackEmitter));\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","export const setUser = (user) => dispatch =>{\r\n    dispatch({\r\n        type: \"SET_USER\", \r\n        payload: {user: user}\r\n    })\r\n}","import React from 'react';\r\nimport TextMessage from './textMessage';\r\nimport { sendMessage, markSeen} from '../RTCHAT'\r\nimport MyMessage from '../RTCHAT/myMessage';\r\nimport {connect} from 'react-redux';\r\nimport {setUser } from '../store/actions/authActions';\r\nconst PRIMARY = \"#5BBC93\"\r\nconst SECONDRY = \"white\";\r\n\r\n\r\nclass SingleChat extends React.Component{\r\n  state={\r\n   \r\n\r\n    messageBody: \"\", \r\n    chat: []\r\n  }\r\n\r\n  handleSendMesage = (friend, cid, chatType) => {\r\n      this.setState({messageBody: \"\"})\r\n      let message = null;\r\n      if(chatType === \"group\"){\r\n        message =  new MyMessage().setAttributes(cid, friend, this.state.messageBody).setAsGroupMessage()\r\n      }else{\r\n        message =  new MyMessage().setAttributes(cid, friend, this.state.messageBody)\r\n      }\r\n      sendMessage(message)\r\n  }\r\n\r\n \r\n\r\n  render(){\r\n      const userChat = this.props.userChat.filter(uc => uc.selected === true)[0];\r\n     \r\n       if(!userChat){\r\n           return false\r\n       }\r\n  return (\r\n    <div style={{width: \"100%\", height: \"100%\"}}>\r\n       <div style={{width: \"100%\",  height: 100, backgroundColor: PRIMARY}}>\r\n          {/* <div style={{width: \"100%\"}}>\r\n              {\r\n                  this.props.userChat.map(uc => \r\n                  <button onClick={() => this.handleConnect(uc)} style={{backgroundColor: uc.reserved? PRIMARY: SECONDRY, border: \"2px solid \"+uc.reserved? SECONDRY: PRIMARY, borderRadius: 30 }}>\r\n                        <span style={{color: uc.reserved? SECONDRY :PRIMARY, fontSize: 18}}>{uc.title}</span>\r\n                  </button>)\r\n              }\r\n          </div> */}\r\n            <span style={{fontSize: 30, color: \"white\", marginLeft: 20}}>{userChat.title}</span>\r\n          {/* <input value={this.state.uid} onChange={(e) => this.setState({uid: e.target.value})} style={{borderRadius: 30, padding: 5, color: PRIMARY}} placeholder=\"your name\"/>\r\n          <input value={this.state.friend} onChange={(e) => this.setState({friend: e.target.value})} style={{borderRadius: 30, padding: 5, color: PRIMARY}} placeholder=\"frient name\"/> */}\r\n\r\n          \r\n       </div>\r\n       <div style={{height: 550, width: \"100%\", overflowY: \"scroll\", backgroundColor: \"white\"}}>\r\n\r\n        {\r\n            userChat.messages.map((m, index) => <div key={index}><TextMessage message={m} cid={this.props.user._id}/><br/></div>)\r\n        }\r\n\r\n\r\n\r\n       </div>\r\n       <div style={{width: \"100%\", height: 70, backgroundColor: SECONDRY}}>\r\n     \r\n     \r\n        <input onFocus={() => markSeen(userChat.cid)} value={this.state.messageBody} onChange={(e) => this.setState({messageBody: e.target.value})} style={{borderRadius: 30, padding: 5, color: PRIMARY, width: \"70%\", height: 55, fontSize: 25}} placeholder=\"frient name\"/>\r\n      \r\n      \r\n        <button onClick={() => this.handleSendMesage(userChat.cid, this.props.user._id, userChat.chatType)} style={{backgroundColor: PRIMARY, border: \"2px solid \"+SECONDRY, borderRadius: 30, width: \"20%\", height: 55 }}>\r\n          <span style={{color: SECONDRY, fontSize: 18}}>SEND</span>\r\n        </button>\r\n\r\n       </div>\r\n    </div>\r\n  );\r\n  }\r\n}\r\n\r\nexport default connect(null, {setUser})(SingleChat);\r\n","import React, { Component } from 'react';\r\nimport {setUserChatSelected} from '../RTCHAT'\r\nconst PRIMARY = \"#5BBC93\"\r\n// const SECONDRY = \"white\";\r\n\r\nclass SingleUserChat extends Component {\r\n    state = {  }\r\n    render() { \r\n        const uc = this.props.singleChat;\r\n        const lastMessage = uc.messages.length > 0 ? uc.messages[uc.messages.length-1].body: false\r\n        const unseenCount = uc.messages.unseenCount;\r\n        return ( \r\n            <div onClick={() => setUserChatSelected(uc.cid)} style={{ cursor:\"pointer\",width: \"100%\", height: 100, backgroundColor: uc.selected? \"#EBEBEB\": \"white\", borderBottom: \"2px solid #f0f0f0\" }}>\r\n              <div align=\"center\" style={{ width: \"30%\", height: \"100%\" ,float:\"left\" ,borderRadius: 50, border: \"1px solid #f0f0f0\"}}>\r\n               { unseenCount > 0 ? <div align=\"center\"  style={{ marginTop:\"40%\" ,zIndex: 99, backgroundColor: PRIMARY , borderRadius: 50, width: \"25px\", height: \"25px\"}}> \r\n                    {unseenCount}\r\n                </div>: false}\r\n                   \r\n                </div>\r\n              <div style={{width: \"65%\", float: \"right\"}}>\r\n                <span style={{fontSize: 25, width: \"100%\", textAlign: \"center\"}}>{uc.title}</span><br/>\r\n                <span style={{textOverflow: \"ellipsis\"}}>{lastMessage}</span>\r\n              </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default SingleUserChat;","import React from 'react';\nimport SingleChat from './components/singleChat'\nimport SingleUserChat from './components/singleUserChat'\nimport {connectChat} from './RTCHAT'\nimport {setUser} from './store/actions/authActions'\nimport {connect} from 'react-redux';\n// import TextMessage from './components/textMessage';\n\n\nconst PRIMARY = \"#5BBC93\"\nconst SECONDRY = \"white\";\n\nclass App extends React.Component{\n\n  handleConnect = (uc) => {\n    // this.props.onConnect(cid);\n    connectChat(uc.cid);\n    this.props.setUser(uc.user);\n}\n\n\n\n\n  render(){\n  return (\n    \n    <div key={0} style={{width: \"100%\", height: \"100%\"}}>\n     { this.props.user._id !== \"\" ?\n      (<div  key={1} style={{width: \"100%\", height: 700 }}>\n         <div  key={2} style={{width: \"20%\", height: \"100%\", backgroundColor: \"white\", float:\"left\"}}>\n          <div  key={3} style={{width: \"100%\", height: 100, textAlign:\"center\"}}>\n            <span  key={4} style={{fontSize: 25, color: PRIMARY}}>{this.props.user.username}</span>\n          </div>\n          {\n            this.props.userChat.map((sc, index) => <SingleUserChat key={index} singleChat={sc}/> )\n          }\n         \n        </div>\n        <div  key={5} style={{width: \"80%\", float:\"right\"}}>\n          <SingleChat  key={6} user={this.props.user} userChat={this.props.userChat} onConnect={this.handleConnectSocket} onSendMessage={this.handleSendMessage}/>\n        </div>\n      </div>) :\n      <div  key={7} align=\"center\" style={{margin:\"auto\", marginTop: 100}}>\n        \n              {\n                  this.props.userChat.map((uc, index) => \n                  <button key={index} onClick={() => this.handleConnect(uc)} style={{ width: \"200px\", height: \"100px\", cursor:\"pointer\" , border: \"2px solid \"+uc.reserved? SECONDRY: PRIMARY, borderRadius: 30 }}>\n                        <span style={{color: uc.reserved? SECONDRY :PRIMARY, fontSize: 18}}>{uc.title}</span>\n                  </button>)\n              }\n       </div>}\n    </div>\n   \n  );\n  }\n}\n\nconst mapStateToProps = state => ({\n  userChat: state.ChatReducer.Chat, \n  user: state.AuthReducer.user\n})\nexport default connect(mapStateToProps, {setUser})(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux'\nimport store from './store'\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}